{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","elliptic_curve","--edition=2018","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"arithmetic\"","--cfg","feature=\"ff\"","--cfg","feature=\"group\"","--cfg","feature=\"hazmat\"","--cfg","feature=\"pem\"","--cfg","feature=\"pkcs8\"","--cfg","feature=\"std\"","--cfg","feature=\"zeroize\"","-C","metadata=75b4212f54417adb","-C","extra-filename=-75b4212f54417adb","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--extern","crypto_bigint=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libcrypto_bigint-16a54395da5cbf45.rmeta","--extern","ff=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libff-b3101f6a112947f8.rmeta","--extern","generic_array=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libgeneric_array-27aa0cb646b5b63d.rmeta","--extern","group=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libgroup-b4e49f9514f74807.rmeta","--extern","pkcs8=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libpkcs8-e66c755a5f6ae3d5.rmeta","--extern","rand_core=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/librand_core-7aef63c7b7031ab2.rmeta","--extern","subtle=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libsubtle-e2f94bf36a34fd9e.rmeta","--extern","zeroize=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libzeroize-9efa0d1fc54d6e36.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libelliptic_curve-75b4212f54417adb.rmeta"},"prelude":{"crate_id":{"name":"elliptic_curve","disambiguator":[8722838712850708487,14216125233081741416]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","num":18,"id":{"name":"subtle","disambiguator":[16473552840971905471,13383263026665092334]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","num":19,"id":{"name":"generic_array","disambiguator":[11660036351344994564,3930594429372963592]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","num":20,"id":{"name":"typenum","disambiguator":[15996057349867460478,6617918932531464244]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","num":21,"id":{"name":"zeroize","disambiguator":[744669072465224746,17473627246014046881]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","num":22,"id":{"name":"zeroize_derive","disambiguator":[18017864088066273931,9406744853062868551]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","num":23,"id":{"name":"ff","disambiguator":[10772863217640197424,18295049454361394925]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":24,"id":{"name":"rand_core","disambiguator":[8139118517281542286,12191278135173016247]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","num":25,"id":{"name":"getrandom","disambiguator":[13811811233254902674,13880380393548880828]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","num":26,"id":{"name":"cfg_if","disambiguator":[1132953217716025813,4978080957525979457]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","num":27,"id":{"name":"libc","disambiguator":[6097756368536057402,9635002418138546655]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":28,"id":{"name":"group","disambiguator":[14759585461006320763,12950180433182515839]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":29,"id":{"name":"pkcs8","disambiguator":[14119616878716928870,2709589127819395639]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":30,"id":{"name":"der","disambiguator":[16533849354334248908,4897884399637859936]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":31,"id":{"name":"const_oid","disambiguator":[229544138340359289,14689160280420259787]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":32,"id":{"name":"base64ct","disambiguator":[559631286589222384,4087918704850658821]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","num":33,"id":{"name":"spki","disambiguator":[7904644845798324688,16626291071510500833]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","num":34,"id":{"name":"crypto_bigint","disambiguator":[414956437230983376,8115537097476538402]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":0,"byte_end":5271,"line_start":1,"line_end":173,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":2889},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5365,"byte_end":5368,"line_start":3,"line_end":3,"column_start":21,"column_end":24},"alias_span":null,"name":"Add","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":2920},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5370,"byte_end":5379,"line_start":3,"line_end":3,"column_start":26,"column_end":35},"alias_span":null,"name":"AddAssign","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":2899},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5381,"byte_end":5384,"line_start":3,"line_end":3,"column_start":37,"column_end":40},"alias_span":null,"name":"Mul","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":2916},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5386,"byte_end":5389,"line_start":3,"line_end":3,"column_start":42,"column_end":45},"alias_span":null,"name":"Neg","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":2894},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5391,"byte_end":5394,"line_start":3,"line_end":3,"column_start":47,"column_end":50},"alias_span":null,"name":"Sub","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":1,"index":2924},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5396,"byte_end":5405,"line_start":3,"line_end":3,"column_start":52,"column_end":61},"alias_span":null,"name":"SubAssign","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":1033},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1496,"byte_end":1501,"line_start":61,"line_end":61,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1496,"byte_end":1501,"line_start":61,"line_end":61,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1503,"byte_end":1509,"line_start":61,"line_end":61,"column_start":20,"column_end":26},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1046},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1531,"byte_end":1542,"line_start":62,"line_end":62,"column_start":20,"column_end":31},"alias_span":null,"name":"ScalarBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":34,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1555,"byte_end":1568,"line_start":64,"line_end":64,"column_start":9,"column_end":22},"alias_span":null,"name":"bigint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1588,"byte_end":1601,"line_start":65,"line_end":65,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":2758},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1619,"byte_end":1625,"line_start":65,"line_end":65,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1636,"byte_end":1645,"line_start":66,"line_end":66,"column_start":9,"column_end":18},"alias_span":null,"name":"rand_core","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1655,"byte_end":1661,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"alias_span":null,"name":"subtle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":478},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1739,"byte_end":1755,"line_start":72,"line_end":72,"column_start":22,"column_end":38},"alias_span":null,"name":"AffineArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":480},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1757,"byte_end":1777,"line_start":72,"line_end":72,"column_start":40,"column_end":60},"alias_span":null,"name":"ProjectiveArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":482},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1779,"byte_end":1795,"line_start":72,"line_end":72,"column_start":62,"column_end":78},"alias_span":null,"name":"ScalarArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1066},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1818,"byte_end":1827,"line_start":73,"line_end":73,"column_start":21,"column_end":30},"alias_span":null,"name":"PublicKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1856,"byte_end":1869,"line_start":74,"line_end":74,"column_start":28,"column_end":41},"alias_span":null,"name":"NonZeroScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1871,"byte_end":1877,"line_start":74,"line_end":74,"column_start":43,"column_end":49},"alias_span":null,"name":"Scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":39},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1895,"byte_end":1900,"line_start":76,"line_end":76,"column_start":9,"column_end":14},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":28,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1906,"byte_end":1911,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"alias_span":null,"name":"group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":28,"index":176},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1920,"byte_end":1925,"line_start":77,"line_end":77,"column_start":19,"column_end":24},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":29,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2099,"byte_end":2104,"line_start":87,"line_end":87,"column_start":9,"column_end":14},"alias_span":null,"name":"pkcs8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1075},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2155,"byte_end":2164,"line_start":90,"line_end":90,"column_start":21,"column_end":30},"alias_span":null,"name":"SecretKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2202,"byte_end":2209,"line_start":92,"line_end":92,"column_start":9,"column_end":16},"alias_span":null,"name":"zeroize","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":0,"byte_end":5271,"line_start":1,"line_end":173,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":36},{"krate":0,"index":189},{"krate":0,"index":211},{"krate":0,"index":226},{"krate":0,"index":460},{"krate":0,"index":484},{"krate":0,"index":642},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":863},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938}],"decl_id":null,"docs":" General purpose Elliptic Curve Cryptography (ECC) support, including types\n and traits for representing various elliptic curve forms, scalars, points,\n and public/secret keys composed thereof.","sig":null,"attributes":[{"value":"/ General purpose Elliptic Curve Cryptography (ECC) support, including types","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":0,"byte_end":78,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"/ and traits for representing various elliptic curve forms, scalars, points,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":79,"byte_end":157,"line_start":2,"line_end":2,"column_start":1,"column_end":79}},{"value":"/ and public/secret keys composed thereof.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":158,"byte_end":202,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":203,"byte_end":206,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":207,"byte_end":244,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":245,"byte_end":248,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Rust **1.51** or higher.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":249,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":278,"byte_end":281,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Minimum supported Rust version can be changed in the future, but it will be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":282,"byte_end":361,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ done with a minor version bump.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":362,"byte_end":397,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"no_std","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":399,"byte_end":409,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code, clippy :: unwrap_used)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":449,"byte_end":493,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":494,"byte_end":557,"line_start":15,"line_end":15,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32}],"decl_id":null,"docs":" Traits for arithmetic operations on elliptic curve field elements.\n","sig":null,"attributes":[{"value":"/ Traits for arithmetic operations on elliptic curve field elements.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5273,"byte_end":5343,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":29},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5522,"byte_end":5528,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Invert","qualname":"::ops::Invert","value":"Invert","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" Perform an inversion on a field element (i.e. base field element or scalar)\n","sig":null,"attributes":[{"value":"/ Perform an inversion on a field element (i.e. base field element or scalar)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5432,"byte_end":5511,"line_start":7,"line_end":7,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5567,"byte_end":5573,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Invert::Output","value":"type Output;","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Field element type\n","sig":null,"attributes":[{"value":"/ Field element type","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5535,"byte_end":5557,"line_start":9,"line_end":9,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5615,"byte_end":5621,"line_start":13,"line_end":13,"column_start":8,"column_end":14},"name":"invert","qualname":"::ops::Invert::invert","value":"pub fn invert(&Self) -> CtOption<Self::Output>","parent":{"krate":0,"index":29},"children":[],"decl_id":null,"docs":" Invert a field element.\n","sig":null,"attributes":[{"value":"/ Invert a field element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5580,"byte_end":5607,"line_start":12,"line_end":12,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sec1","qualname":"::sec1","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":941},{"krate":0,"index":964},{"krate":0,"index":961},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":947},{"krate":0,"index":944},{"krate":0,"index":121},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":967},{"krate":0,"index":1003},{"krate":0,"index":999},{"krate":0,"index":995},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":162},{"krate":0,"index":1006},{"krate":0,"index":1032},{"krate":0,"index":1030},{"krate":0,"index":1028},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":166},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":186}],"decl_id":null,"docs":" SEC1 encoding support.","sig":null,"attributes":[{"value":"/ SEC1 encoding support.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":5825,"byte_end":5851,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":5852,"byte_end":5855,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Support for the `Elliptic-Curve-Point-to-Octet-String` encoding described","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":5856,"byte_end":5933,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ in SEC1: Elliptic Curve Cryptography (Version 2.0) section 2.3.3 (p.10):","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":5934,"byte_end":6010,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6011,"byte_end":6014,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ <https://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6015,"byte_end":6053,"line_start":6,"line_end":6,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":115},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6873,"byte_end":6892,"line_start":34,"line_end":34,"column_start":10,"column_end":29},"name":"CompressedPointSize","qualname":"::sec1::CompressedPointSize","value":"<FieldSize<C> as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of a compressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x02` or `0x03` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of a compressed point for the given elliptic curve when encoded","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6672,"byte_end":6744,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6745,"byte_end":6812,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x02` or `0x03` tag byte).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6813,"byte_end":6863,"line_start":33,"line_end":33,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":117},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7128,"byte_end":7149,"line_start":39,"line_end":39,"column_start":10,"column_end":31},"name":"UncompressedPointSize","qualname":"::sec1::UncompressedPointSize","value":"<UntaggedPointSize<C> as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an uncompressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x04` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of an uncompressed point for the given elliptic curve when encoded","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":6934,"byte_end":7009,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7010,"byte_end":7077,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x04` tag byte).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7078,"byte_end":7118,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":119},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7264,"byte_end":7281,"line_start":42,"line_end":42,"column_start":10,"column_end":27},"name":"UntaggedPointSize","qualname":"::sec1::UntaggedPointSize","value":"<FieldSize<C> as Add>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an untagged point for given elliptic curve.\n","sig":null,"attributes":[{"value":"/ Size of an untagged point for given elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7199,"byte_end":7254,"line_start":41,"line_end":41,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7598,"byte_end":7610,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"EncodedPoint","qualname":"::sec1::EncodedPoint","value":"EncodedPoint {  }","parent":null,"children":[{"krate":0,"index":943}],"decl_id":null,"docs":" SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ SEC1 encoded curve point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7319,"byte_end":7348,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7349,"byte_end":7352,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This type is an enum over the compressed and uncompressed encodings,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7353,"byte_end":7425,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ useful for cases where either encoding can be supported, or conversions","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7426,"byte_end":7501,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ between the two forms.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7502,"byte_end":7528,"line_start":48,"line_end":48,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8273,"byte_end":8283,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<EncodedPoint<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode elliptic curve point (compressed or uncompressed) from the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7983,"byte_end":8052,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8057,"byte_end":8121,"line_start":67,"line_end":67,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8126,"byte_end":8186,"line_start":68,"line_end":68,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8191,"byte_end":8211,"line_start":69,"line_end":69,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8216,"byte_end":8219,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8224,"byte_end":8261,"line_start":71,"line_end":71,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9023,"byte_end":9042,"line_start":93,"line_end":93,"column_start":12,"column_end":31},"name":"from_untagged_bytes","qualname":"<EncodedPoint<C>>::from_untagged_bytes","value":"pub fn from_untagged_bytes(&GenericArray<u8, UntaggedPointSize<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point from raw uncompressed coordinates, i.e.\n encoded as the concatenated `x || y` coordinates with no leading SEC1\n tag byte (which would otherwise be `0x04` for an uncompressed point).\n","sig":null,"attributes":[{"value":"/ Decode elliptic curve point from raw uncompressed coordinates, i.e.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8784,"byte_end":8855,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"/ encoded as the concatenated `x || y` coordinates with no leading SEC1","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8860,"byte_end":8933,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/ tag byte (which would otherwise be `0x04` for an uncompressed point).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":8938,"byte_end":9011,"line_start":92,"line_end":92,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9361,"byte_end":9384,"line_start":100,"line_end":100,"column_start":12,"column_end":35},"name":"from_affine_coordinates","qualname":"<EncodedPoint<C>>::from_affine_coordinates","value":"pub fn from_affine_coordinates(&FieldBytes<C>, &FieldBytes<C>, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode an elliptic curve point from big endian serialized coordinates\n (with optional point compression)\n","sig":null,"attributes":[{"value":"/ Encode an elliptic curve point from big endian serialized coordinates","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9234,"byte_end":9307,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ (with optional point compression)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9312,"byte_end":9349,"line_start":99,"line_end":99,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10206,"byte_end":10221,"line_start":125,"line_end":125,"column_start":12,"column_end":27},"name":"from_secret_key","qualname":"<EncodedPoint<C>>::from_secret_key","value":"pub fn from_secret_key(&SecretKey<C>, bool) -> Self where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: ToEncodedPoint<C>, Scalar<C>: Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Compute [`EncodedPoint`] representing the public key for the provided\n [`SecretKey`].","sig":null,"attributes":[{"value":"/ Compute [`EncodedPoint`] representing the public key for the provided","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9860,"byte_end":9933,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/ [`SecretKey`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9938,"byte_end":9956,"line_start":119,"line_end":119,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9961,"byte_end":9964,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The `compress` flag requests point compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":9969,"byte_end":10020,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"cfg(all(feature = \"arithmetic\", feature = \"zeroize\"))","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10025,"byte_end":10081,"line_start":122,"line_end":122,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10669,"byte_end":10677,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"identity","qualname":"<EncodedPoint<C>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return [`EncodedPoint`] representing the additive identity\n (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Return [`EncodedPoint`] representing the additive identity","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10560,"byte_end":10622,"line_start":136,"line_end":136,"column_start":5,"column_end":67}},{"value":"/ (a.k.a. point at infinity)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10627,"byte_end":10657,"line_start":137,"line_end":137,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10785,"byte_end":10788,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"len","qualname":"<EncodedPoint<C>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded point in bytes\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded point in bytes","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10725,"byte_end":10773,"line_start":142,"line_end":142,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10943,"byte_end":10951,"line_start":148,"line_end":148,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<EncodedPoint<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get byte slice containing the serialized [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get byte slice containing the serialized [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":10869,"byte_end":10931,"line_start":147,"line_end":147,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11177,"byte_end":11185,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<EncodedPoint<C>>::to_bytes","value":"pub fn to_bytes(&Self) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Get boxed byte slice containing the serialized [`EncodedPoint`]\n","sig":null,"attributes":[{"value":"/ Get boxed byte slice containing the serialized [`EncodedPoint`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11015,"byte_end":11082,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11087,"byte_end":11112,"line_start":153,"line_end":153,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11508,"byte_end":11525,"line_start":163,"line_end":163,"column_start":12,"column_end":29},"name":"to_untagged_bytes","qualname":"<EncodedPoint<C>>::to_untagged_bytes","value":"pub fn to_untagged_bytes(&Self)\n-> Option<GenericArray<u8, UntaggedPointSize<C>>> where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: DecompressPoint<C> + ToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Serialize point as raw uncompressed coordinates without tag byte, i.e.\n encoded as the concatenated `x || y` coordinates.\n","sig":null,"attributes":[{"value":"/ Serialize point as raw uncompressed coordinates without tag byte, i.e.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11271,"byte_end":11345,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/ encoded as the concatenated `x || y` coordinates.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11350,"byte_end":11403,"line_start":160,"line_end":160,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11408,"byte_end":11438,"line_start":161,"line_end":161,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11973,"byte_end":11983,"line_start":176,"line_end":176,"column_start":12,"column_end":22},"name":"is_compact","qualname":"<EncodedPoint<C>>::is_compact","value":"pub fn is_compact(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] compact?\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] compact?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":11924,"byte_end":11961,"line_start":175,"line_end":175,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12096,"byte_end":12109,"line_start":181,"line_end":181,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<EncodedPoint<C>>::is_compressed","value":"pub fn is_compressed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] compressed?\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] compressed?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12044,"byte_end":12084,"line_start":180,"line_end":180,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12263,"byte_end":12274,"line_start":186,"line_end":186,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<EncodedPoint<C>>::is_identity","value":"pub fn is_identity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12173,"byte_end":12251,"line_start":185,"line_end":185,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12417,"byte_end":12425,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"compress","qualname":"<EncodedPoint<C>>::compress","value":"pub fn compress(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12336,"byte_end":12405,"line_start":190,"line_end":190,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12906,"byte_end":12916,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"decompress","qualname":"<EncodedPoint<C>>::decompress","value":"pub fn decompress(&Self) -> Option<Self> where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: DecompressPoint<C> + ToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12730,"byte_end":12801,"line_start":200,"line_end":200,"column_start":5,"column_end":76}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":12806,"byte_end":12836,"line_start":201,"line_end":201,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13555,"byte_end":13561,"line_start":220,"line_end":220,"column_start":12,"column_end":18},"name":"encode","qualname":"<EncodedPoint<C>>::encode","value":"pub fn encode<T>(T, bool) -> Self where T: ToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Encode an [`EncodedPoint`] from the desired type\n","sig":null,"attributes":[{"value":"/ Encode an [`EncodedPoint`] from the desired type","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13491,"byte_end":13543,"line_start":219,"line_end":219,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13771,"byte_end":13777,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"decode","qualname":"<EncodedPoint<C>>::decode","value":"pub fn decode<T>(&Self) -> Result<T> where T: FromEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decode this [`EncodedPoint`] into the desired type\n","sig":null,"attributes":[{"value":"/ Decode this [`EncodedPoint`] into the desired type","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13705,"byte_end":13759,"line_start":227,"line_end":227,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13967,"byte_end":13970,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"tag","qualname":"<EncodedPoint<C>>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the SEC1 tag for this [`EncodedPoint`]\n","sig":null,"attributes":[{"value":"/ Get the SEC1 tag for this [`EncodedPoint`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":13909,"byte_end":13955,"line_start":235,"line_end":235,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14187,"byte_end":14198,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"coordinates","qualname":"<EncodedPoint<C>>::coordinates","value":"pub fn coordinates(&Self) -> Coordinates<, C>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`Coordinates`] for this [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get the [`Coordinates`] for this [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14107,"byte_end":14161,"line_start":241,"line_end":241,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14166,"byte_end":14175,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14919,"byte_end":14920,"line_start":268,"line_end":268,"column_start":12,"column_end":13},"name":"x","qualname":"<EncodedPoint<C>>::x","value":"pub fn x(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the x-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the x-coordinate for this [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14788,"byte_end":14839,"line_start":265,"line_end":265,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14844,"byte_end":14847,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is the identity point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":14852,"byte_end":14907,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15369,"byte_end":15370,"line_start":280,"line_end":280,"column_start":12,"column_end":13},"name":"y","qualname":"<EncodedPoint<C>>::y","value":"pub fn y(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the y-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the y-coordinate for this [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15224,"byte_end":15275,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15280,"byte_end":15283,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is compressed or the identity point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15288,"byte_end":15357,"line_start":279,"line_end":279,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":970},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17457,"byte_end":17465,"line_start":356,"line_end":356,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Coordinates::Identity","value":"Coordinates::Identity","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" Identity point (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Identity point (a.k.a. point at infinity)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17407,"byte_end":17452,"line_start":355,"line_end":355,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":972},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17500,"byte_end":17507,"line_start":359,"line_end":359,"column_start":5,"column_end":12},"name":"Compact","qualname":"::sec1::Coordinates::Compact","value":"Coordinates::Compact { x }","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" Compact curve point\n","sig":null,"attributes":[{"value":"/ Compact curve point","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17472,"byte_end":17495,"line_start":358,"line_end":358,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":974},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17608,"byte_end":17618,"line_start":365,"line_end":365,"column_start":5,"column_end":15},"name":"Compressed","qualname":"::sec1::Coordinates::Compressed","value":"Coordinates::Compressed { x, y_is_odd }","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" Compressed curve point\n","sig":null,"attributes":[{"value":"/ Compressed curve point","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17577,"byte_end":17603,"line_start":364,"line_end":364,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":977},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17783,"byte_end":17795,"line_start":374,"line_end":374,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Coordinates::Uncompressed","value":"Coordinates::Uncompressed { x, y }","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" Uncompressed curve point\n","sig":null,"attributes":[{"value":"/ Uncompressed curve point","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17750,"byte_end":17778,"line_start":373,"line_end":373,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":967},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17375,"byte_end":17386,"line_start":354,"line_end":354,"column_start":10,"column_end":21},"name":"Coordinates","qualname":"::sec1::Coordinates","value":"pub enum Coordinates<'a, C: Curve> {\n    Identity,\n    Compact {\n        x: &'a FieldBytes<C>,\n    },\n    Compressed {\n        x: &'a FieldBytes<C>,\n        y_is_odd: bool,\n    },\n    Uncompressed {\n        x: &'a FieldBytes<C>,\n        y: &'a FieldBytes<C>,\n    },\n}","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":977}],"decl_id":null,"docs":" Enum representing the coordinates of either compressed or uncompressed\n SEC1-encoded elliptic curve points.\n","sig":null,"attributes":[{"value":"/ Enum representing the coordinates of either compressed or uncompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17206,"byte_end":17280,"line_start":351,"line_end":351,"column_start":1,"column_end":75}},{"value":"/ SEC1-encoded elliptic curve points.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17281,"byte_end":17320,"line_start":352,"line_end":352,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18041,"byte_end":18044,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"tag","qualname":"<Coordinates>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the tag octet needed to encode this set of [`Coordinates`]\n","sig":null,"attributes":[{"value":"/ Get the tag octet needed to encode this set of [`Coordinates`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17963,"byte_end":18029,"line_start":384,"line_end":384,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18686,"byte_end":18694,"line_start":406,"line_end":406,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Tag::Identity","value":"Tag::Identity","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":" Identity point (`0x00`)\n","sig":null,"attributes":[{"value":"/ Identity point (`0x00`)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18654,"byte_end":18681,"line_start":405,"line_end":405,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18762,"byte_end":18777,"line_start":409,"line_end":409,"column_start":5,"column_end":20},"name":"CompressedEvenY","qualname":"::sec1::Tag::CompressedEvenY","value":"Tag::CompressedEvenY","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":" Compressed point with even y-coordinate (`0x02`)\n","sig":null,"attributes":[{"value":"/ Compressed point with even y-coordinate (`0x02`)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18705,"byte_end":18757,"line_start":408,"line_end":408,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1013},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18844,"byte_end":18858,"line_start":412,"line_end":412,"column_start":5,"column_end":19},"name":"CompressedOddY","qualname":"::sec1::Tag::CompressedOddY","value":"Tag::CompressedOddY","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":" Compressed point with odd y-coordinate (`0x03`)\n","sig":null,"attributes":[{"value":"/ Compressed point with odd y-coordinate (`0x03`)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18788,"byte_end":18839,"line_start":411,"line_end":411,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1016},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18905,"byte_end":18917,"line_start":415,"line_end":415,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Tag::Uncompressed","value":"Tag::Uncompressed","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":" Uncompressed point (`0x04`)\n","sig":null,"attributes":[{"value":"/ Uncompressed point (`0x04`)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18869,"byte_end":18900,"line_start":414,"line_end":414,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1019},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18959,"byte_end":18966,"line_start":418,"line_end":418,"column_start":5,"column_end":12},"name":"Compact","qualname":"::sec1::Tag::Compact","value":"Tag::Compact","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":" Compact point (`0x05`)\n","sig":null,"attributes":[{"value":"/ Compact point (`0x05`)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18928,"byte_end":18954,"line_start":417,"line_end":417,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":1006},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18644,"byte_end":18647,"line_start":404,"line_end":404,"column_start":10,"column_end":13},"name":"Tag","qualname":"::sec1::Tag","value":"pub enum Tag {\n    Identity = ,\n    CompressedEvenY = ,\n    CompressedOddY = ,\n    Uncompressed = ,\n    Compact = ,\n}","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1019}],"decl_id":null,"docs":" Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.\n","sig":null,"attributes":[{"value":"/ Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18504,"byte_end":18577,"line_start":401,"line_end":401,"column_start":1,"column_end":74}},{"value":"repr(u8)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18623,"byte_end":18634,"line_start":403,"line_end":403,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19035,"byte_end":19042,"line_start":423,"line_end":423,"column_start":12,"column_end":19},"name":"from_u8","qualname":"<Tag>::from_u8","value":"pub fn from_u8(u8) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parse a tag value from a byte\n","sig":null,"attributes":[{"value":"/ Parse a tag value from a byte","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18990,"byte_end":19023,"line_start":422,"line_end":422,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19376,"byte_end":19386,"line_start":435,"line_end":435,"column_start":12,"column_end":22},"name":"is_compact","qualname":"<Tag>::is_compact","value":"pub fn is_compact(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point compact?\n","sig":null,"attributes":[{"value":"/ Is this point compact?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19338,"byte_end":19364,"line_start":434,"line_end":434,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19492,"byte_end":19505,"line_start":440,"line_end":440,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<Tag>::is_compressed","value":"pub fn is_compressed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point compressed?\n","sig":null,"attributes":[{"value":"/ Is this point compressed?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19451,"byte_end":19480,"line_start":439,"line_end":439,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19649,"byte_end":19660,"line_start":445,"line_end":445,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Tag>::is_identity","value":"pub fn is_identity(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point the identity point?\n","sig":null,"attributes":[{"value":"/ Is this point the identity point?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19600,"byte_end":19637,"line_start":444,"line_end":444,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19927,"byte_end":19938,"line_start":452,"line_end":452,"column_start":12,"column_end":23},"name":"message_len","qualname":"<Tag>::message_len","value":"pub fn message_len(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the expected total message length for a message prefixed\n with this tag (including the tag byte), given the field element size\n (in bytes) for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Compute the expected total message length for a message prefixed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19718,"byte_end":19786,"line_start":449,"line_end":449,"column_start":5,"column_end":73}},{"value":"/ with this tag (including the tag byte), given the field element size","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19791,"byte_end":19863,"line_start":450,"line_end":450,"column_start":5,"column_end":77}},{"value":"/ (in bytes) for a particular elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":19868,"byte_end":19915,"line_start":451,"line_end":451,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":20848,"byte_end":20864,"line_start":481,"line_end":481,"column_start":11,"column_end":27},"name":"FromEncodedPoint","qualname":"::sec1::FromEncodedPoint","value":"FromEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" Trait for deserializing a value from a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for deserializing a value from a SEC1 encoded curve point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":20680,"byte_end":20748,"line_start":478,"line_end":478,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":20749,"byte_end":20752,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":20753,"byte_end":20837,"line_start":480,"line_end":480,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21178,"byte_end":21196,"line_start":493,"line_end":493,"column_start":8,"column_end":26},"name":"from_encoded_point","qualname":"::sec1::FromEncodedPoint::from_encoded_point","value":"pub fn from_encoded_point(&EncodedPoint<C>) -> Option<Self>","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21011,"byte_end":21085,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21090,"byte_end":21093,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21098,"byte_end":21111,"line_start":490,"line_end":490,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21116,"byte_end":21119,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ `None` if the [`EncodedPoint`] is invalid.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21124,"byte_end":21170,"line_start":492,"line_end":492,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":178},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21411,"byte_end":21425,"line_start":499,"line_end":499,"column_start":11,"column_end":25},"name":"ToEncodedPoint","qualname":"::sec1::ToEncodedPoint","value":"ToEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21247,"byte_end":21311,"line_start":496,"line_end":496,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21312,"byte_end":21315,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21316,"byte_end":21400,"line_start":498,"line_end":498,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21662,"byte_end":21678,"line_start":507,"line_end":507,"column_start":8,"column_end":24},"name":"to_encoded_point","qualname":"::sec1::ToEncodedPoint::to_encoded_point","value":"pub fn to_encoded_point(&Self, bool) -> EncodedPoint<C>","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21555,"byte_end":21627,"line_start":505,"line_end":505,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21632,"byte_end":21654,"line_start":506,"line_end":506,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":181},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21905,"byte_end":21926,"line_start":513,"line_end":513,"column_start":11,"column_end":32},"name":"ToCompactEncodedPoint","qualname":"::sec1::ToCompactEncodedPoint","value":"ToCompactEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":183}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point with compaction.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point with compaction.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21725,"byte_end":21805,"line_start":510,"line_end":510,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21806,"byte_end":21809,"line_start":511,"line_end":511,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":21810,"byte_end":21894,"line_start":512,"line_end":512,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22163,"byte_end":22187,"line_start":521,"line_end":521,"column_start":8,"column_end":32},"name":"to_compact_encoded_point","qualname":"::sec1::ToCompactEncodedPoint::to_compact_encoded_point","value":"pub fn to_compact_encoded_point(&Self) -> Option<EncodedPoint<C>>","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22056,"byte_end":22128,"line_start":519,"line_end":519,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22133,"byte_end":22155,"line_start":520,"line_end":520,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":184},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22551,"byte_end":22568,"line_start":531,"line_end":531,"column_start":11,"column_end":28},"name":"ValidatePublicKey","qualname":"::sec1::ValidatePublicKey","value":"ValidatePublicKey","parent":null,"children":[{"krate":0,"index":185}],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] represents the encoded public key\n value of the given secret.","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] represents the encoded public key","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22226,"byte_end":22304,"line_start":524,"line_end":524,"column_start":1,"column_end":79}},{"value":"/ value of the given secret.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22305,"byte_end":22335,"line_start":525,"line_end":525,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22336,"byte_end":22339,"line_start":526,"line_end":526,"column_start":1,"column_end":4}},{"value":"/ Curve implementations which also impl [`ProjectiveArithmetic`] will receive","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22340,"byte_end":22419,"line_start":527,"line_end":527,"column_start":1,"column_end":80}},{"value":"/ a blanket default impl of this trait.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22420,"byte_end":22461,"line_start":528,"line_end":528,"column_start":1,"column_end":42}},{"value":"cfg(feature = \"zeroize\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22462,"byte_end":22489,"line_start":529,"line_end":529,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22848,"byte_end":22867,"line_start":540,"line_end":540,"column_start":8,"column_end":27},"name":"validate_public_key","qualname":"::sec1::ValidatePublicKey::validate_public_key","value":"pub fn validate_public_key(&SecretKey<Self>, &EncodedPoint<Self>)\n-> Result<()>","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] is a valid public key for the\n provided secret value.\n","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] is a valid public key for the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22704,"byte_end":22778,"line_start":537,"line_end":537,"column_start":5,"column_end":79}},{"value":"/ provided secret value.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22783,"byte_end":22809,"line_start":538,"line_end":538,"column_start":5,"column_end":31}},{"value":"allow(unused_variables)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":22814,"byte_end":22840,"line_start":539,"line_end":539,"column_start":5,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":189},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weierstrass","qualname":"::weierstrass","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":208}],"decl_id":null,"docs":" Elliptic curves in short Weierstrass form.\n","sig":null,"attributes":[{"value":"/ Elliptic curves in short Weierstrass form.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31566,"byte_end":31612,"line_start":1,"line_end":1,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31744,"byte_end":31749,"line_start":7,"line_end":7,"column_start":11,"column_end":16},"name":"Curve","qualname":"::weierstrass::Curve","value":"Curve: super::Curve","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for elliptic curves in short Weierstrass form.\n","sig":null,"attributes":[{"value":"/ Marker trait for elliptic curves in short Weierstrass form.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31670,"byte_end":31733,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":201},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31810,"byte_end":31826,"line_start":10,"line_end":10,"column_start":11,"column_end":27},"name":"PointCompression","qualname":"::weierstrass::PointCompression","value":"PointCompression","parent":null,"children":[{"krate":0,"index":202}],"decl_id":null,"docs":" Point compression settings.\n","sig":null,"attributes":[{"value":"/ Point compression settings.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31768,"byte_end":31799,"line_start":9,"line_end":9,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31895,"byte_end":31910,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"COMPRESS_POINTS","qualname":"::weierstrass::PointCompression::COMPRESS_POINTS","value":"bool","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Should point compression be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compression be applied by default?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31833,"byte_end":31884,"line_start":11,"line_end":11,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31961,"byte_end":31976,"line_start":16,"line_end":16,"column_start":11,"column_end":26},"name":"PointCompaction","qualname":"::weierstrass::PointCompaction","value":"PointCompaction","parent":null,"children":[{"krate":0,"index":204}],"decl_id":null,"docs":" Point compaction settings\n","sig":null,"attributes":[{"value":"/ Point compaction settings","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31921,"byte_end":31950,"line_start":15,"line_end":15,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":204},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32044,"byte_end":32058,"line_start":18,"line_end":18,"column_start":11,"column_end":25},"name":"COMPACT_POINTS","qualname":"::weierstrass::PointCompaction::COMPACT_POINTS","value":"bool","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Should point compaction be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compaction be applied by default?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31983,"byte_end":32033,"line_start":17,"line_end":17,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":205},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32225,"byte_end":32240,"line_start":23,"line_end":23,"column_start":11,"column_end":26},"name":"DecompressPoint","qualname":"::weierstrass::DecompressPoint","value":"DecompressPoint<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":207}],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point from its x-coordinate and\n a boolean flag indicating whether or not the y-coordinate is odd.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point from its x-coordinate and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32069,"byte_end":32144,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ a boolean flag indicating whether or not the y-coordinate is odd.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32145,"byte_end":32214,"line_start":22,"line_end":22,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32322,"byte_end":32332,"line_start":25,"line_end":25,"column_start":8,"column_end":18},"name":"decompress","qualname":"::weierstrass::DecompressPoint::decompress","value":"pub fn decompress(&FieldBytes<C>, Choice) -> CtOption<Self>","parent":{"krate":0,"index":205},"children":[],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32264,"byte_end":32314,"line_start":24,"line_end":24,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":208},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32472,"byte_end":32486,"line_start":29,"line_end":29,"column_start":11,"column_end":25},"name":"DecompactPoint","qualname":"::weierstrass::DecompactPoint","value":"DecompactPoint<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":210}],"decl_id":null,"docs":" Attempt to decompact an elliptic curve point from an x-coordinate\n","sig":null,"attributes":[{"value":"/ Attempt to decompact an elliptic curve point from an x-coordinate","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32392,"byte_end":32461,"line_start":28,"line_end":28,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32566,"byte_end":32575,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"decompact","qualname":"::weierstrass::DecompactPoint::decompact","value":"pub fn decompact(&FieldBytes<C>) -> CtOption<Self>","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":" Attempt to decompact an elliptic curve point\n","sig":null,"attributes":[{"value":"/ Attempt to decompact an elliptic curve point","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32510,"byte_end":32558,"line_start":30,"line_end":30,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":219},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32693,"byte_end":32699,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type.\n","sig":null,"attributes":[{"value":"/ Result type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32667,"byte_end":32683,"line_start":5,"line_end":5,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1033},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32821,"byte_end":32826,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Elliptic curve errors.\n","sig":null,"attributes":[{"value":"/ Elliptic curve errors.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32738,"byte_end":32764,"line_start":8,"line_end":8,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1046},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34402,"byte_end":34413,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"ScalarBytes","qualname":"::scalar::bytes::ScalarBytes","value":"ScalarBytes {  }","parent":null,"children":[{"krate":0,"index":1048}],"decl_id":null,"docs":" Scalar bytes: wrapper for [`FieldBytes`] which guarantees that the the\n inner byte value is within range of the [`Curve::ORDER`].","sig":null,"attributes":[{"value":"/ Scalar bytes: wrapper for [`FieldBytes`] which guarantees that the the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34171,"byte_end":34245,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ inner byte value is within range of the [`Curve::ORDER`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34246,"byte_end":34307,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34308,"byte_end":34311,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Does not require an arithmetic implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34312,"byte_end":34362,"line_start":20,"line_end":20,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34700,"byte_end":34703,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<ScalarBytes<C>>::new","value":"pub fn new(FieldBytes<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`ScalarBytes`], checking that the given input is within\n range of the [`Curve::ORDER`].\n","sig":null,"attributes":[{"value":"/ Create new [`ScalarBytes`], checking that the given input is within","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34578,"byte_end":34649,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ range of the [`Curve::ORDER`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34654,"byte_end":34688,"line_start":32,"line_end":32,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34885,"byte_end":34894,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"from_uint","qualname":"<ScalarBytes<C>>::from_uint","value":"pub fn from_uint(&C::UInt) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create [`ScalarBytes`] from the provided `C::UInt`.\n","sig":null,"attributes":[{"value":"/ Create [`ScalarBytes`] from the provided `C::UInt`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34818,"byte_end":34873,"line_start":37,"line_end":37,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35236,"byte_end":35247,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"from_scalar","qualname":"<ScalarBytes<C>>::from_scalar","value":"pub fn from_scalar(&Scalar<C>) -> Self where C: ProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Convert from a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert from a [`Scalar`] type for this curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35081,"byte_end":35131,"line_start":44,"line_end":44,"column_start":5,"column_end":55}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35136,"byte_end":35166,"line_start":45,"line_end":45,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35551,"byte_end":35560,"line_start":59,"line_end":59,"column_start":12,"column_end":21},"name":"to_scalar","qualname":"<ScalarBytes<C>>::to_scalar","value":"pub fn to_scalar(&Self) -> Scalar<C> where C: ProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Convert to a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert to a [`Scalar`] type for this curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35398,"byte_end":35446,"line_start":56,"line_end":56,"column_start":5,"column_end":53}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35451,"byte_end":35481,"line_start":57,"line_end":57,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35831,"byte_end":35842,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"into_scalar","qualname":"<ScalarBytes<C>>::into_scalar","value":"pub fn into_scalar(Self) -> Scalar<C> where C: ProjectiveArithmetic","parent":null,"children":[],"decl_id":null,"docs":" Convert into a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert into a [`Scalar`] type for this curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35676,"byte_end":35726,"line_start":66,"line_end":66,"column_start":5,"column_end":55}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":35731,"byte_end":35761,"line_start":67,"line_end":67,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36059,"byte_end":36067,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<ScalarBytes<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`FieldBytes`]\n","sig":null,"attributes":[{"value":"/ Borrow the inner [`FieldBytes`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36012,"byte_end":36047,"line_start":76,"line_end":76,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36169,"byte_end":36179,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<ScalarBytes<C>>::into_bytes","value":"pub fn into_bytes(Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert into [`FieldBytes`]\n","sig":null,"attributes":[{"value":"/ Convert into [`FieldBytes`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36126,"byte_end":36157,"line_start":81,"line_end":81,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36303,"byte_end":36307,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"zero","qualname":"<ScalarBytes<C>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create [`ScalarBytes`] representing a value of zero.\n","sig":null,"attributes":[{"value":"/ Create [`ScalarBytes`] representing a value of zero.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36235,"byte_end":36291,"line_start":86,"line_end":86,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36452,"byte_end":36459,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<ScalarBytes<C>>::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Is this [`ScalarBytes`] value all zeroes?\n","sig":null,"attributes":[{"value":"/ Is this [`ScalarBytes`] value all zeroes?","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36395,"byte_end":36440,"line_start":93,"line_end":93,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41444,"byte_end":41457,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"NonZeroScalar","qualname":"::scalar::non_zero::NonZeroScalar","value":"NonZeroScalar {  }","parent":null,"children":[{"krate":0,"index":1062}],"decl_id":null,"docs":" Non-zero scalar type.","sig":null,"attributes":[{"value":"/ Non-zero scalar type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":40988,"byte_end":41013,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41014,"byte_end":41017,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This type ensures that its value is not zero, ala `core::num::NonZero*`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41018,"byte_end":41094,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ To do this, the generic `S` type must impl both `Default` and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41095,"byte_end":41160,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/ `ConstantTimeEq`, with the requirement that `S::default()` returns 0.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41161,"byte_end":41234,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41235,"byte_end":41238,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ In the context of ECC, it's useful for ensuring that scalar multiplication","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41239,"byte_end":41317,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ cannot result in the point at infinity.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41318,"byte_end":41361,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41655,"byte_end":41661,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"random","qualname":"<NonZeroScalar<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a random `NonZeroScalar`\n","sig":null,"attributes":[{"value":"/ Generate a random `NonZeroScalar`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41606,"byte_end":41643,"line_start":39,"line_end":39,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41991,"byte_end":42000,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"from_repr","qualname":"<NonZeroScalar<C>>::from_repr","value":"pub fn from_repr(FieldBytes<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode a [`NonZeroScalar`] from a serialized field element\n","sig":null,"attributes":[{"value":"/ Decode a [`NonZeroScalar`] from a serialized field element","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41917,"byte_end":41979,"line_start":49,"line_end":49,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42213,"byte_end":42216,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZeroScalar<C>>::new","value":"pub fn new(Scalar<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`NonZeroScalar`] from a scalar.\n","sig":null,"attributes":[{"value":"/ Create a [`NonZeroScalar`] from a scalar.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42108,"byte_end":42153,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar.rs","byte_start":33460,"byte_end":33466,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::scalar::Scalar","value":"<C as ScalarArithmetic>::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Scalar field element for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Scalar field element for a particular elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar.rs","byte_start":33308,"byte_end":33365,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar.rs","byte_start":33366,"byte_end":33396,"line_start":12,"line_end":12,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":478},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45322,"byte_end":45338,"line_start":9,"line_end":9,"column_start":11,"column_end":27},"name":"AffineArithmetic","qualname":"::arithmetic::AffineArithmetic","value":"AffineArithmetic: Curve + ScalarArithmetic","parent":null,"children":[{"krate":0,"index":479}],"decl_id":null,"docs":" Elliptic curve with affine arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with affine arithmetic implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45200,"byte_end":45257,"line_start":7,"line_end":7,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":479},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45428,"byte_end":45439,"line_start":11,"line_end":11,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::arithmetic::AffineArithmetic::AffinePoint","value":"type AffinePoint: Copy\n        + Clone\n        + ConditionallySelectable\n        + ConstantTimeEq\n        + Debug\n        + Default\n        + Sized\n        + Send\n        + Sync\n        + 'static;","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Elliptic curve point in affine coordinates.\n","sig":null,"attributes":[{"value":"/ Elliptic curve point in affine coordinates.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45371,"byte_end":45418,"line_start":10,"line_end":10,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45749,"byte_end":45769,"line_start":25,"line_end":25,"column_start":11,"column_end":31},"name":"ProjectiveArithmetic","qualname":"::arithmetic::ProjectiveArithmetic","value":"ProjectiveArithmetic: Curve + AffineArithmetic","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":" Elliptic curve with projective arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with projective arithmetic implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45623,"byte_end":45684,"line_start":23,"line_end":23,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":481},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46060,"byte_end":46075,"line_start":36,"line_end":36,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::arithmetic::ProjectiveArithmetic::ProjectivePoint","value":"type ProjectivePoint: ConditionallySelectable\n        + ConstantTimeEq\n        + Default\n        + From<Self::AffinePoint>\n        + Into<Self::AffinePoint>\n        + group::Curve<AffineRepr = Self::AffinePoint>\n        + group::Group<Scalar = Self::Scalar>;","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Elliptic curve point in projective coordinates.","sig":null,"attributes":[{"value":"/ Elliptic curve point in projective coordinates.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45802,"byte_end":45853,"line_start":26,"line_end":26,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45858,"byte_end":45861,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Note: the following bounds are enforced by [`group::Group`]:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45866,"byte_end":45930,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ - `Copy`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45935,"byte_end":45947,"line_start":29,"line_end":29,"column_start":5,"column_end":17}},{"value":"/ - `Clone`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45952,"byte_end":45965,"line_start":30,"line_end":30,"column_start":5,"column_end":18}},{"value":"/ - `Debug`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45970,"byte_end":45983,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ - `Eq`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45988,"byte_end":45998,"line_start":32,"line_end":32,"column_start":5,"column_end":15}},{"value":"/ - `Sized`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46003,"byte_end":46016,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/ - `Send`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46021,"byte_end":46033,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/ - `Sync`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46038,"byte_end":46050,"line_start":35,"line_end":35,"column_start":5,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":482},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46435,"byte_end":46451,"line_start":48,"line_end":48,"column_start":11,"column_end":27},"name":"ScalarArithmetic","qualname":"::arithmetic::ScalarArithmetic","value":"ScalarArithmetic: Curve","parent":null,"children":[{"krate":0,"index":483}],"decl_id":null,"docs":" Scalar arithmetic.\n","sig":null,"attributes":[{"value":"/ Scalar arithmetic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46317,"byte_end":46339,"line_start":45,"line_end":45,"column_start":1,"column_end":23}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46340,"byte_end":46370,"line_start":46,"line_end":46,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":483},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46714,"byte_end":46720,"line_start":59,"line_end":59,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::arithmetic::ScalarArithmetic::Scalar","value":"type Scalar: ConstantTimeEq + ff::Field + ff::PrimeField<Repr = FieldBytes<Self>>;","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":" Scalar field type.","sig":null,"attributes":[{"value":"/ Scalar field type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46465,"byte_end":46487,"line_start":49,"line_end":49,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46492,"byte_end":46495,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Note: the following bounds are enforced by [`ff::Field`]:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46500,"byte_end":46561,"line_start":51,"line_end":51,"column_start":5,"column_end":66}},{"value":"/ - `Copy`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46566,"byte_end":46578,"line_start":52,"line_end":52,"column_start":5,"column_end":17}},{"value":"/ - `Clone`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46583,"byte_end":46596,"line_start":53,"line_end":53,"column_start":5,"column_end":18}},{"value":"/ - `ConditionallySelectable`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46601,"byte_end":46632,"line_start":54,"line_end":54,"column_start":5,"column_end":36}},{"value":"/ - `Debug`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46637,"byte_end":46650,"line_start":55,"line_end":55,"column_start":5,"column_end":18}},{"value":"/ - `Default`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46655,"byte_end":46670,"line_start":56,"line_end":56,"column_start":5,"column_end":20}},{"value":"/ - `Send`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46675,"byte_end":46687,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/ - `Sync`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46692,"byte_end":46704,"line_start":58,"line_end":58,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1066},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48711,"byte_end":48720,"line_start":63,"line_end":63,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::public_key::PublicKey","value":"PublicKey {  }","parent":null,"children":[{"krate":0,"index":1068}],"decl_id":null,"docs":" Elliptic curve public keys.","sig":null,"attributes":[{"value":"/ Elliptic curve public keys.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47600,"byte_end":47631,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47632,"byte_end":47635,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This is a wrapper type for [`AffinePoint`] which ensures an inner","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47636,"byte_end":47705,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ non-identity point and provides a common place to handle encoding/decoding.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47706,"byte_end":47785,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47786,"byte_end":47789,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Parsing \"SPKI\" Keys","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47790,"byte_end":47815,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47816,"byte_end":47819,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ X.509 `SubjectPublicKeyInfo` (SPKI) is a commonly used format for encoding","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47820,"byte_end":47898,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ public keys, notably public keys corresponding to PKCS#8 private keys.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47899,"byte_end":47973,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ (especially ones generated by OpenSSL).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":47974,"byte_end":48017,"line_start":44,"line_end":44,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48018,"byte_end":48021,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Keys in SPKI format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48022,"byte_end":48095,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48096,"byte_end":48137,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48138,"byte_end":48141,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48142,"byte_end":48153,"line_start":49,"line_end":49,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PUBLIC KEY-----","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48154,"byte_end":48184,"line_start":50,"line_end":50,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48185,"byte_end":48192,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48193,"byte_end":48196,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve public key from SPKI, enable the `pkcs8`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48197,"byte_end":48269,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48270,"byte_end":48344,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48345,"byte_end":48382,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPublicKey`][`pkcs8::FromPublicKey`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48383,"byte_end":48451,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ trait to parse it.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48452,"byte_end":48474,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48475,"byte_end":48478,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48479,"byte_end":48554,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48555,"byte_end":48621,"line_start":60,"line_end":60,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48932,"byte_end":48943,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"from_affine","qualname":"<PublicKey<C>>::from_affine","value":"pub fn from_affine(AffinePoint<C>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Convert an [`AffinePoint`] into a [`PublicKey`]\n","sig":null,"attributes":[{"value":"/ Convert an [`AffinePoint`] into a [`PublicKey`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48869,"byte_end":48920,"line_start":74,"line_end":74,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49284,"byte_end":49302,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"from_secret_scalar","qualname":"<PublicKey<C>>::from_secret_scalar","value":"pub fn from_secret_scalar(&NonZeroScalar<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value\n (i.e. a secret key represented as a raw scalar value)\n","sig":null,"attributes":[{"value":"/ Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49145,"byte_end":49210,"line_start":83,"line_end":83,"column_start":5,"column_end":70}},{"value":"/ (i.e. a secret key represented as a raw scalar value)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49215,"byte_end":49272,"line_start":84,"line_end":84,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49818,"byte_end":49833,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"from_sec1_bytes","qualname":"<PublicKey<C>>::from_sec1_bytes","value":"pub fn from_sec1_bytes(&[u8]) -> Result<Self> where\nSelf: TryFrom<EncodedPoint<C>, Error = Error>, UntaggedPointSize<C>: Add<U1> +\nArrayLength<u8>, UncompressedPointSize<C>: ArrayLength<u8>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`PublicKey`] (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode [`PublicKey`] (compressed or uncompressed) from the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49535,"byte_end":49597,"line_start":92,"line_end":92,"column_start":5,"column_end":67}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49602,"byte_end":49666,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49671,"byte_end":49731,"line_start":94,"line_end":94,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49736,"byte_end":49756,"line_start":95,"line_end":95,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49761,"byte_end":49764,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":49769,"byte_end":49806,"line_start":97,"line_end":97,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50303,"byte_end":50312,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"as_affine","qualname":"<PublicKey<C>>::as_affine","value":"pub fn as_affine(&Self) -> &AffinePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`AffinePoint`] from this [`PublicKey`].","sig":null,"attributes":[{"value":"/ Borrow the inner [`AffinePoint`] from this [`PublicKey`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50167,"byte_end":50228,"line_start":109,"line_end":109,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50233,"byte_end":50236,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ In ECC, public keys are elliptic curve points.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50241,"byte_end":50291,"line_start":111,"line_end":111,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50459,"byte_end":50472,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<PublicKey<C>>::to_projective","value":"pub fn to_projective(&Self) -> ProjectivePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve\n","sig":null,"attributes":[{"value":"/ Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":50372,"byte_end":50447,"line_start":116,"line_end":116,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1075},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61741,"byte_end":61750,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::secret_key::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":1077}],"decl_id":null,"docs":" Elliptic curve secret keys.","sig":null,"attributes":[{"value":"/ Elliptic curve secret keys.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60680,"byte_end":60711,"line_start":46,"line_end":46,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60712,"byte_end":60715,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This type wraps a secret scalar value, helping to prevent accidental","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60716,"byte_end":60788,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/ exposure and securely erasing the value from memory when dropped","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60789,"byte_end":60857,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ (when the `zeroize` feature of this crate is enabled).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60858,"byte_end":60916,"line_start":50,"line_end":50,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60917,"byte_end":60920,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Parsing PKCS#8 Keys","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60921,"byte_end":60946,"line_start":52,"line_end":52,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60947,"byte_end":60950,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ PKCS#8 is a commonly used format for encoding secret keys (especially ones","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":60951,"byte_end":61029,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ generated by OpenSSL).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61030,"byte_end":61056,"line_start":55,"line_end":55,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61057,"byte_end":61060,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Keys in PKCS#8 format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61061,"byte_end":61136,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61137,"byte_end":61178,"line_start":58,"line_end":58,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61179,"byte_end":61182,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61183,"byte_end":61194,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PRIVATE KEY-----","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61195,"byte_end":61226,"line_start":61,"line_end":61,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61227,"byte_end":61234,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61235,"byte_end":61238,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve private key from PKCS#8, enable the `pkcs8`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61239,"byte_end":61314,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61315,"byte_end":61389,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61390,"byte_end":61427,"line_start":66,"line_end":66,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPrivateKey`][`FromPrivateKey`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61428,"byte_end":61491,"line_start":67,"line_end":67,"column_start":1,"column_end":64}},{"value":"/ trait to parse it.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61492,"byte_end":61514,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61515,"byte_end":61518,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61519,"byte_end":61594,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61595,"byte_end":61661,"line_start":71,"line_end":71,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62012,"byte_end":62018,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"random","qualname":"<SecretKey<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self where\nC: ProjectiveArithmetic, Scalar<C>: Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Generate a random [`SecretKey`]\n","sig":null,"attributes":[{"value":"/ Generate a random [`SecretKey`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61872,"byte_end":61907,"line_start":83,"line_end":83,"column_start":5,"column_end":40}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61912,"byte_end":61942,"line_start":84,"line_end":84,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62300,"byte_end":62303,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<SecretKey<C>>::new","value":"pub fn new(ScalarBytes<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new secret key from a serialized scalar value\n","sig":null,"attributes":[{"value":"/ Create a new secret key from a serialized scalar value","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62230,"byte_end":62288,"line_start":96,"line_end":96,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62450,"byte_end":62460,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<SecretKey<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize raw private scalar as a big endian integer\n","sig":null,"attributes":[{"value":"/ Deserialize raw private scalar as a big endian integer","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62380,"byte_end":62438,"line_start":101,"line_end":101,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62774,"byte_end":62782,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<SecretKey<C>>::to_bytes","value":"pub fn to_bytes(&Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Expose the byte serialization of the value this [`SecretKey`] wraps\n","sig":null,"attributes":[{"value":"/ Expose the byte serialization of the value this [`SecretKey`] wraps","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62691,"byte_end":62762,"line_start":112,"line_end":112,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63045,"byte_end":63060,"line_start":124,"line_end":124,"column_start":12,"column_end":27},"name":"as_scalar_bytes","qualname":"<SecretKey<C>>::as_scalar_bytes","value":"pub fn as_scalar_bytes(&Self) -> &ScalarBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner secret [`ScalarBytes`] value.","sig":null,"attributes":[{"value":"/ Borrow the inner secret [`ScalarBytes`] value.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62854,"byte_end":62904,"line_start":117,"line_end":117,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62909,"byte_end":62912,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62917,"byte_end":62930,"line_start":119,"line_end":119,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62935,"byte_end":62938,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ This value is key material.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62943,"byte_end":62974,"line_start":121,"line_end":121,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62979,"byte_end":62982,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Please treat it with the care it deserves!","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":62987,"byte_end":63033,"line_start":123,"line_end":123,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63271,"byte_end":63287,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"to_secret_scalar","qualname":"<SecretKey<C>>::to_secret_scalar","value":"pub fn to_secret_scalar(&Self) -> NonZeroScalar<C> where C: Curve +\nProjectiveArithmetic, Scalar<C>: Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Get the secret scalar value for this key..\n","sig":null,"attributes":[{"value":"/ Get the secret scalar value for this key..","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63120,"byte_end":63166,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63171,"byte_end":63201,"line_start":129,"line_end":129,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63598,"byte_end":63608,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey<C>>::public_key","value":"pub fn public_key(&Self) -> PublicKey<C> where C: weierstrass::Curve +\nProjectiveArithmetic, Scalar<C>: Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Get the [`PublicKey`] which corresponds to this secret key\n","sig":null,"attributes":[{"value":"/ Get the [`PublicKey`] which corresponds to this secret key","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63431,"byte_end":63493,"line_start":139,"line_end":139,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":63498,"byte_end":63528,"line_start":140,"line_end":140,"column_start":5,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":926},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2584,"byte_end":2597,"line_start":104,"line_end":104,"column_start":11,"column_end":24},"name":"ALGORITHM_OID","qualname":"::ALGORITHM_OID","value":"pkcs8::ObjectIdentifier","parent":null,"children":[],"decl_id":null,"docs":" Algorithm [`ObjectIdentifier`][`pkcs8::ObjectIdentifier`] for elliptic\n curve public key cryptography.","sig":null,"attributes":[{"value":"/ Algorithm [`ObjectIdentifier`][`pkcs8::ObjectIdentifier`] for elliptic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2337,"byte_end":2411,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ curve public key cryptography.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2412,"byte_end":2446,"line_start":99,"line_end":99,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2447,"byte_end":2450,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ <http://oid-info.com/get/1.2.840.10045.2.1>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2451,"byte_end":2498,"line_start":101,"line_end":101,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"pkcs8\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2499,"byte_end":2524,"line_start":102,"line_end":102,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":927},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3007,"byte_end":3012,"line_start":115,"line_end":115,"column_start":11,"column_end":16},"name":"Curve","qualname":"::Curve","value":"Curve: Clone + Debug + Default + Eq + Ord + Send + Sync","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929}],"decl_id":null,"docs":" Elliptic curve.","sig":null,"attributes":[{"value":"/ Elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2681,"byte_end":2700,"line_start":107,"line_end":107,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2701,"byte_end":2704,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ This trait is intended to be impl'd by a ZST which represents a concrete","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2705,"byte_end":2781,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/ elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2782,"byte_end":2801,"line_start":110,"line_end":110,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2802,"byte_end":2805,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Other traits in this crate which are bounded by [`Curve`] are intended to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2806,"byte_end":2883,"line_start":112,"line_end":112,"column_start":1,"column_end":78}},{"value":"/ be impl'd by these ZSTs, facilitating types which are generic over elliptic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2884,"byte_end":2963,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"/ curves (e.g. [`SecretKey`]).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":2964,"byte_end":2996,"line_start":114,"line_end":114,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":928},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3302,"byte_end":3306,"line_start":119,"line_end":119,"column_start":10,"column_end":14},"name":"UInt","qualname":"::Curve::UInt","value":"type UInt: AsRef<[bigint::Limb]>\n        + bigint::ArrayEncoding\n        + bigint::Encoding\n        + Copy\n        + Debug\n        + Default\n        + ConstantTimeEq\n        + ConstantTimeGreater\n        + ConstantTimeLess;","parent":{"krate":0,"index":927},"children":[],"decl_id":null,"docs":" Integer type used to represent field elements of this elliptic curve.\n","sig":null,"attributes":[{"value":"/ Integer type used to represent field elements of this elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3069,"byte_end":3142,"line_start":116,"line_end":116,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":929},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3713,"byte_end":3718,"line_start":133,"line_end":133,"column_start":11,"column_end":16},"name":"ORDER","qualname":"::Curve::ORDER","value":"Self::UInt","parent":{"krate":0,"index":927},"children":[],"decl_id":null,"docs":" Order constant.","sig":null,"attributes":[{"value":"/ Order constant.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3526,"byte_end":3545,"line_start":129,"line_end":129,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3550,"byte_end":3553,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Subdivided into either 32-bit or 64-bit \"limbs\" (depending on the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3558,"byte_end":3627,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/ target CPU's word size), specified from least to most significant.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3632,"byte_end":3702,"line_start":132,"line_end":132,"column_start":5,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":930},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3795,"byte_end":3804,"line_start":137,"line_end":137,"column_start":10,"column_end":19},"name":"FieldSize","qualname":"::FieldSize","value":"<<C as Curve>::UInt as bigint::ArrayEncoding>::ByteSize","parent":null,"children":[],"decl_id":null,"docs":" Size of field elements of this elliptic curve.\n","sig":null,"attributes":[{"value":"/ Size of field elements of this elliptic curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3735,"byte_end":3785,"line_start":136,"line_end":136,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":932},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3950,"byte_end":3960,"line_start":140,"line_end":140,"column_start":10,"column_end":20},"name":"FieldBytes","qualname":"::FieldBytes","value":"GenericArray<u8, FieldSize<C>>","parent":null,"children":[],"decl_id":null,"docs":" Byte representation of a base/scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Byte representation of a base/scalar field element of a given curve.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3868,"byte_end":3940,"line_start":139,"line_end":139,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":934},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4185,"byte_end":4196,"line_start":146,"line_end":146,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::AffinePoint","value":"<C as AffineArithmetic>::AffinePoint","parent":null,"children":[],"decl_id":null,"docs":" Affine point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Affine point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3999,"byte_end":4070,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4071,"byte_end":4090,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4145,"byte_end":4175,"line_start":145,"line_end":145,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":936},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4431,"byte_end":4446,"line_start":152,"line_end":152,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::ProjectivePoint","value":"<C as ProjectiveArithmetic>::ProjectivePoint","parent":null,"children":[],"decl_id":null,"docs":" Projective point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Projective point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4241,"byte_end":4316,"line_start":148,"line_end":148,"column_start":1,"column_end":76}},{"value":"/ implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4317,"byte_end":4336,"line_start":149,"line_end":149,"column_start":1,"column_end":20}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4337,"byte_end":4367,"line_start":150,"line_end":150,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":938},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4884,"byte_end":4903,"line_start":162,"line_end":162,"column_start":11,"column_end":30},"name":"AlgorithmParameters","qualname":"::AlgorithmParameters","value":"AlgorithmParameters: Curve","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940}],"decl_id":null,"docs":" Associate an [`ObjectIdentifier`][`pkcs8::ObjectIdentifier`] (OID) with an\n elliptic curve algorithm implementation.","sig":null,"attributes":[{"value":"/ Associate an [`ObjectIdentifier`][`pkcs8::ObjectIdentifier`] (OID) with an","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4499,"byte_end":4577,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/ elliptic curve algorithm implementation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4578,"byte_end":4622,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4623,"byte_end":4626,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ This is used as as the `parameters` of an `AlgorithmIdentifier` as","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4627,"byte_end":4697,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/ described in RFC 5280 Section 4.1.1.2:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4698,"byte_end":4740,"line_start":158,"line_end":158,"column_start":1,"column_end":43}},{"value":"/ <https://tools.ietf.org/html/rfc5280#section-4.1.1.2>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4741,"byte_end":4798,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"cfg(feature = \"pkcs8\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4799,"byte_end":4824,"line_start":160,"line_end":160,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":939},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4970,"byte_end":4973,"line_start":164,"line_end":164,"column_start":11,"column_end":14},"name":"OID","qualname":"::AlgorithmParameters::OID","value":"pkcs8::ObjectIdentifier","parent":{"krate":0,"index":938},"children":[],"decl_id":null,"docs":" Object Identifier (OID) for this curve\n","sig":null,"attributes":[{"value":"/ Object Identifier (OID) for this curve","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4917,"byte_end":4959,"line_start":163,"line_end":163,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":5070,"byte_end":5090,"line_start":167,"line_end":167,"column_start":8,"column_end":28},"name":"algorithm_identifier","qualname":"::AlgorithmParameters::algorithm_identifier","value":"pub fn algorithm_identifier() -> pkcs8::AlgorithmIdentifier","parent":{"krate":0,"index":938},"children":[],"decl_id":null,"docs":" Get the [`pkcs8::AlgorithmIdentifier`] for this curve\n","sig":null,"attributes":[{"value":"/ Get the [`pkcs8::AlgorithmIdentifier`] for this curve","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":5005,"byte_end":5062,"line_start":166,"line_end":166,"column_start":5,"column_end":62}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5720,"byte_end":5721,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7841,"byte_end":7853,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15669,"byte_end":15681,"line_start":289,"line_end":289,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15922,"byte_end":15934,"line_start":301,"line_end":301,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":16444,"byte_end":16456,"line_start":319,"line_end":319,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":16671,"byte_end":16683,"line_start":328,"line_end":328,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17002,"byte_end":17014,"line_start":340,"line_end":340,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17938,"byte_end":17949,"line_start":383,"line_end":383,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18980,"byte_end":18983,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":23438,"byte_end":23439,"line_start":556,"line_end":556,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32846,"byte_end":32851,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":33016,"byte_end":33021,"line_start":19,"line_end":19,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":33138,"byte_end":33143,"line_start":26,"line_end":26,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34537,"byte_end":34548,"line_start":27,"line_end":27,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36555,"byte_end":36566,"line_start":99,"line_end":99,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36686,"byte_end":36697,"line_start":108,"line_end":108,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36830,"byte_end":36841,"line_start":117,"line_end":117,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37234,"byte_end":37245,"line_start":133,"line_end":133,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37488,"byte_end":37499,"line_start":145,"line_end":145,"column_start":18,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37573,"byte_end":37584,"line_start":152,"line_end":152,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37700,"byte_end":37710,"line_start":161,"line_end":161,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37867,"byte_end":37877,"line_start":170,"line_end":170,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38075,"byte_end":38086,"line_start":180,"line_end":180,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38297,"byte_end":38308,"line_start":190,"line_end":190,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38558,"byte_end":38571,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38809,"byte_end":38820,"line_start":213,"line_end":213,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38956,"byte_end":38967,"line_start":222,"line_end":222,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":39315,"byte_end":39326,"line_start":238,"line_end":238,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41540,"byte_end":41553,"line_start":35,"line_end":35,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42400,"byte_end":42413,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42565,"byte_end":42578,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42843,"byte_end":42856,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43018,"byte_end":43031,"line_start":94,"line_end":94,"column_start":18,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43095,"byte_end":43108,"line_start":96,"line_end":96,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43288,"byte_end":43298,"line_start":107,"line_end":107,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43477,"byte_end":43487,"line_start":116,"line_end":116,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43745,"byte_end":43758,"line_start":127,"line_end":127,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44003,"byte_end":44016,"line_start":138,"line_end":138,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44267,"byte_end":44280,"line_start":149,"line_end":149,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44519,"byte_end":44532,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44897,"byte_end":44910,"line_start":177,"line_end":177,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48807,"byte_end":48816,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52394,"byte_end":52403,"line_start":174,"line_end":174,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52545,"byte_end":52554,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52637,"byte_end":52646,"line_start":185,"line_end":185,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53025,"byte_end":53034,"line_start":199,"line_end":199,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53407,"byte_end":53419,"line_start":213,"line_end":213,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53793,"byte_end":53805,"line_start":225,"line_end":225,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":54191,"byte_end":54200,"line_start":237,"line_end":237,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":54710,"byte_end":54719,"line_start":251,"line_end":251,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55178,"byte_end":55187,"line_start":265,"line_end":265,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55422,"byte_end":55431,"line_start":274,"line_end":274,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55757,"byte_end":55766,"line_start":286,"line_end":286,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":56093,"byte_end":56102,"line_start":298,"line_end":298,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":56690,"byte_end":56699,"line_start":315,"line_end":315,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":57623,"byte_end":57632,"line_start":343,"line_end":343,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":58280,"byte_end":58289,"line_start":363,"line_end":363,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":58734,"byte_end":58743,"line_start":379,"line_end":379,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":68163,"byte_end":68172,"line_start":48,"line_end":48,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":69927,"byte_end":69936,"line_start":95,"line_end":95,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":71411,"byte_end":71420,"line_start":131,"line_end":131,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61833,"byte_end":61842,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":65927,"byte_end":65936,"line_start":207,"line_end":207,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66204,"byte_end":66213,"line_start":218,"line_end":218,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66419,"byte_end":66428,"line_start":229,"line_end":229,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66586,"byte_end":66595,"line_start":240,"line_end":240,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66856,"byte_end":66865,"line_start":250,"line_end":250,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1056,"byte_end":1059,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1069,"byte_end":1073,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":1083,"byte_end":1094,"line_start":36,"line_end":36,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":189}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/ops.rs","byte_start":5720,"byte_end":5721,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":7841,"byte_end":7853,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15669,"byte_end":15681,"line_start":289,"line_end":289,"column_start":25,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":15922,"byte_end":15934,"line_start":301,"line_end":301,"column_start":37,"column_end":49},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":941},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":16444,"byte_end":16456,"line_start":319,"line_end":319,"column_start":18,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":16671,"byte_end":16683,"line_start":328,"line_end":328,"column_start":19,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":8701}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17002,"byte_end":17014,"line_start":340,"line_end":340,"column_start":21,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":941},"to":{"krate":21,"index":41}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":17938,"byte_end":17949,"line_start":383,"line_end":383,"column_start":20,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":18980,"byte_end":18983,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/sec1.rs","byte_start":23438,"byte_end":23439,"line_start":556,"line_end":556,"column_start":31,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":187},"to":{"krate":0,"index":184}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":31758,"byte_end":31763,"line_start":7,"line_end":7,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":927},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32252,"byte_end":32257,"line_start":23,"line_end":23,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":205}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/weierstrass.rs","byte_start":32498,"byte_end":32503,"line_start":29,"line_end":29,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":208}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":32846,"byte_end":32851,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":8708}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":33016,"byte_end":33021,"line_start":19,"line_end":19,"column_start":29,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1033},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/error.rs","byte_start":33138,"byte_end":33143,"line_start":26,"line_end":26,"column_start":28,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1033},"to":{"krate":5,"index":2324}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":34537,"byte_end":34548,"line_start":27,"line_end":27,"column_start":9,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36555,"byte_end":36566,"line_start":99,"line_end":99,"column_start":34,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36686,"byte_end":36697,"line_start":108,"line_end":108,"column_start":25,"column_end":36},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":36830,"byte_end":36841,"line_start":117,"line_end":117,"column_start":37,"column_end":48},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1046},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37234,"byte_end":37245,"line_start":133,"line_end":133,"column_start":28,"column_end":39},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1046},"to":{"krate":18,"index":57}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37488,"byte_end":37499,"line_start":145,"line_end":145,"column_start":18,"column_end":29},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37573,"byte_end":37584,"line_start":152,"line_end":152,"column_start":21,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2800}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37700,"byte_end":37710,"line_start":161,"line_end":161,"column_start":34,"column_end":44},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":37867,"byte_end":37877,"line_start":170,"line_end":170,"column_start":35,"column_end":45},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38075,"byte_end":38086,"line_start":180,"line_end":180,"column_start":36,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38297,"byte_end":38308,"line_start":190,"line_end":190,"column_start":37,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38558,"byte_end":38571,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38809,"byte_end":38820,"line_start":213,"line_end":213,"column_start":23,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2477}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":38956,"byte_end":38967,"line_start":222,"line_end":222,"column_start":28,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/bytes.rs","byte_start":39315,"byte_end":39326,"line_start":238,"line_end":238,"column_start":21,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1046},"to":{"krate":21,"index":41}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":41540,"byte_end":41553,"line_start":35,"line_end":35,"column_start":9,"column_end":22},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42400,"byte_end":42413,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42565,"byte_end":42578,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1060},"to":{"krate":18,"index":65}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":42843,"byte_end":42856,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1060},"to":{"krate":18,"index":57}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43018,"byte_end":43031,"line_start":94,"line_end":94,"column_start":18,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43095,"byte_end":43108,"line_start":96,"line_end":96,"column_start":19,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":3026}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43288,"byte_end":43298,"line_start":107,"line_end":107,"column_start":36,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43477,"byte_end":43487,"line_start":116,"line_end":116,"column_start":37,"column_end":47},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":43745,"byte_end":43758,"line_start":127,"line_end":127,"column_start":32,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44003,"byte_end":44016,"line_start":138,"line_end":138,"column_start":33,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44267,"byte_end":44280,"line_start":149,"line_end":149,"column_start":20,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":29}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44519,"byte_end":44532,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/scalar/non_zero.rs","byte_start":44897,"byte_end":44910,"line_start":177,"line_end":177,"column_start":21,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1060},"to":{"krate":21,"index":41}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45340,"byte_end":45345,"line_start":9,"line_end":9,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":927},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45348,"byte_end":45364,"line_start":9,"line_end":9,"column_start":37,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":482},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45771,"byte_end":45776,"line_start":25,"line_end":25,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":927},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":45779,"byte_end":45795,"line_start":25,"line_end":25,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":478},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/arithmetic.rs","byte_start":46453,"byte_end":46458,"line_start":48,"line_end":48,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":927},"to":{"krate":0,"index":482}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":48807,"byte_end":48816,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52394,"byte_end":52403,"line_start":174,"line_end":174,"column_start":35,"column_end":44},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52545,"byte_end":52554,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":52637,"byte_end":52646,"line_start":185,"line_end":185,"column_start":38,"column_end":47},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53025,"byte_end":53034,"line_start":199,"line_end":199,"column_start":39,"column_end":48},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53407,"byte_end":53419,"line_start":213,"line_end":213,"column_start":32,"column_end":44},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":53793,"byte_end":53805,"line_start":225,"line_end":225,"column_start":33,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":941},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":54191,"byte_end":54200,"line_start":237,"line_end":237,"column_start":33,"column_end":42},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1066},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":54710,"byte_end":54719,"line_start":251,"line_end":251,"column_start":31,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1066},"to":{"krate":0,"index":178}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55178,"byte_end":55187,"line_start":265,"line_end":265,"column_start":16,"column_end":25},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2482}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55422,"byte_end":55431,"line_start":274,"line_end":274,"column_start":23,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2477}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":55757,"byte_end":55766,"line_start":286,"line_end":286,"column_start":24,"column_end":33},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2520}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":56093,"byte_end":56102,"line_start":298,"line_end":298,"column_start":17,"column_end":26},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":56690,"byte_end":56699,"line_start":315,"line_end":315,"column_start":27,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1066},"to":{"krate":29,"index":186}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":57623,"byte_end":57632,"line_start":343,"line_end":343,"column_start":25,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1066},"to":{"krate":29,"index":205}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":58280,"byte_end":58289,"line_start":363,"line_end":363,"column_start":21,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1066},"to":{"krate":1,"index":11108}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/public_key.rs","byte_start":58734,"byte_end":58743,"line_start":379,"line_end":379,"column_start":22,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1066},"to":{"krate":4,"index":5390}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":68163,"byte_end":68172,"line_start":48,"line_end":48,"column_start":28,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1075},"to":{"krate":29,"index":174}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":69927,"byte_end":69936,"line_start":95,"line_end":95,"column_start":26,"column_end":35},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1075},"to":{"krate":29,"index":198}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key/pkcs8.rs","byte_start":71411,"byte_end":71420,"line_start":131,"line_end":131,"column_start":21,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":11108}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":61833,"byte_end":61842,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":65927,"byte_end":65936,"line_start":207,"line_end":207,"column_start":36,"column_end":45},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66204,"byte_end":66213,"line_start":218,"line_end":218,"column_start":37,"column_end":46},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66419,"byte_end":66428,"line_start":229,"line_end":229,"column_start":28,"column_end":37},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66586,"byte_end":66595,"line_start":240,"line_end":240,"column_start":19,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":8701}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/secret_key.rs","byte_start":66856,"byte_end":66865,"line_start":250,"line_end":250,"column_start":18,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1075},"to":{"krate":1,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3014,"byte_end":3019,"line_start":115,"line_end":115,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2447},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3022,"byte_end":3027,"line_start":115,"line_end":115,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":8701},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3030,"byte_end":3037,"line_start":115,"line_end":115,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2800},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3040,"byte_end":3042,"line_start":115,"line_end":115,"column_start":44,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2482},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3045,"byte_end":3048,"line_start":115,"line_end":115,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":2509},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3051,"byte_end":3055,"line_start":115,"line_end":115,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":1,"index":2822},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":3058,"byte_end":3062,"line_start":115,"line_end":115,"column_start":62,"column_end":66},"kind":"SuperTrait","from":{"krate":1,"index":2834},"to":{"krate":0,"index":927}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.10.4/src/lib.rs","byte_start":4905,"byte_end":4910,"line_start":162,"line_end":162,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":927},"to":{"krate":0,"index":938}}]}