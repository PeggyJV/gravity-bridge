{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","flate2","--edition=2018","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz_oxide\"","--cfg","feature=\"rust_backend\"","-C","metadata=063c4a2530e46828","-C","extra-filename=-063c4a2530e46828","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--extern","cfg_if=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libcfg_if-68f23d93b02d6980.rmeta","--extern","crc32fast=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libcrc32fast-cb602550df9cf8d0.rmeta","--extern","libc=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/liblibc-79a05afd6422acd8.rmeta","--extern","miniz_oxide=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libminiz_oxide-19ef28155866f760.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libflate2-063c4a2530e46828.rmeta"},"prelude":{"crate_id":{"name":"flate2","disambiguator":[4430140126989336663,7916209040307332595]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","num":18,"id":{"name":"crc32fast","disambiguator":[14672585450649481464,15804386962776369144]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/mod.rs","num":19,"id":{"name":"cfg_if","disambiguator":[1132953217716025813,4978080957525979457]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","num":20,"id":{"name":"miniz_oxide","disambiguator":[10086408649910624925,10676613401894858764]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","num":21,"id":{"name":"adler","disambiguator":[12692030983018795859,4618252679970114107]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":0,"byte_end":8536,"line_start":1,"line_end":234,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1020},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4596,"byte_end":4599,"line_start":110,"line_end":110,"column_start":22,"column_end":25},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4601,"byte_end":4610,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1032},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4612,"byte_end":4621,"line_start":110,"line_end":110,"column_start":38,"column_end":47},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1223},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4643,"byte_end":4652,"line_start":111,"line_end":111,"column_start":20,"column_end":29},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1207},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4673,"byte_end":4681,"line_start":112,"line_end":112,"column_start":20,"column_end":28},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1231},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4704,"byte_end":4712,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1302},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4714,"byte_end":4727,"line_start":113,"line_end":113,"column_start":32,"column_end":45},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1303},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4714,"byte_end":4727,"line_start":113,"line_end":113,"column_start":32,"column_end":45},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1235},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4729,"byte_end":4739,"line_start":113,"line_end":113,"column_start":47,"column_end":57},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1297},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4741,"byte_end":4756,"line_start":113,"line_end":113,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4741,"byte_end":4756,"line_start":113,"line_end":113,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4758,"byte_end":4764,"line_start":113,"line_end":113,"column_start":76,"column_end":82},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1239},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4788,"byte_end":4801,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1268},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4803,"byte_end":4818,"line_start":114,"line_end":114,"column_start":37,"column_end":52},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1059},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5120,"byte_end":5134,"line_start":130,"line_end":130,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1053},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5170,"byte_end":5184,"line_start":131,"line_end":131,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1177},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5215,"byte_end":5224,"line_start":132,"line_end":132,"column_start":30,"column_end":39},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5255,"byte_end":5264,"line_start":133,"line_end":133,"column_start":30,"column_end":39},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1183},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5295,"byte_end":5309,"line_start":134,"line_end":134,"column_start":30,"column_end":44},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1355},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5342,"byte_end":5353,"line_start":135,"line_end":135,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1349},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5386,"byte_end":5397,"line_start":136,"line_end":136,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":946}},{"kind":"Use","ref_id":{"krate":0,"index":1071},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5622,"byte_end":5636,"line_start":144,"line_end":144,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1065},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5673,"byte_end":5687,"line_start":145,"line_end":145,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1198},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5719,"byte_end":5728,"line_start":146,"line_end":146,"column_start":31,"column_end":40},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1189},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5760,"byte_end":5769,"line_start":147,"line_end":147,"column_start":31,"column_end":40},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1367},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5803,"byte_end":5814,"line_start":148,"line_end":148,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1361},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5848,"byte_end":5859,"line_start":149,"line_end":149,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":968}},{"kind":"Use","ref_id":{"krate":0,"index":1046},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6094,"byte_end":6108,"line_start":157,"line_end":157,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1039},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6147,"byte_end":6161,"line_start":158,"line_end":158,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1137},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6195,"byte_end":6204,"line_start":159,"line_end":159,"column_start":33,"column_end":42},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1128},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6238,"byte_end":6247,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1164},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6281,"byte_end":6295,"line_start":161,"line_end":161,"column_start":33,"column_end":47},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6331,"byte_end":6342,"line_start":162,"line_end":162,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":987}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6378,"byte_end":6389,"line_start":163,"line_end":163,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":987}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":0,"byte_end":8536,"line_start":1,"line_end":234,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":79},{"krate":0,"index":125},{"krate":0,"index":283},{"krate":0,"index":314},{"krate":0,"index":644},{"krate":0,"index":707},{"krate":0,"index":789},{"krate":0,"index":946},{"krate":0,"index":968},{"krate":0,"index":987},{"krate":0,"index":1009},{"krate":0,"index":1373},{"krate":0,"index":1387},{"krate":0,"index":1385},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1376},{"krate":0,"index":1012},{"krate":0,"index":1018}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"/ A DEFLATE-based stream compression/decompression library","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":0,"byte_end":60,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":61,"byte_end":64,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library provides support for compression and decompression of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":65,"byte_end":135,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ DEFLATE-based streams:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":136,"byte_end":162,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":163,"byte_end":166,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ * the DEFLATE format itself","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":167,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"/ * the zlib format","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":199,"byte_end":220,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/ * gzip","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":221,"byte_end":231,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":232,"byte_end":235,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ These three formats are all closely related and largely only differ in their","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":236,"byte_end":316,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ headers/footers. This crate has three types in each submodule for dealing","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":317,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ with these three formats.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":395,"byte_end":424,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":425,"byte_end":428,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":429,"byte_end":449,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":450,"byte_end":453,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In addition to supporting three formats, this crate supports three different","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":454,"byte_end":534,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ backends, controlled through this crate's features:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":535,"byte_end":590,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":591,"byte_end":594,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * `default`, or `rust_backend` - this implementation uses the `miniz_oxide`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":595,"byte_end":674,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/   crate which is a port of `miniz.c` (below) to Rust. This feature does not","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":675,"byte_end":754,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/   require a C compiler and only requires Rust code.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":755,"byte_end":810,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":811,"byte_end":814,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ * `miniz-sys` - when enabled this feature will enable this crate to instead","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":815,"byte_end":894,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/   use `miniz.c`, distributed with `miniz-sys`, to implement","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":895,"byte_end":958,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/   compression/decompression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":959,"byte_end":991,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":992,"byte_end":995,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ * `zlib` - finally, this feature will enable linking against the `libz`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":996,"byte_end":1071,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/   library, typically found on most Linux systems by default. If the library","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1072,"byte_end":1151,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/   isn't found to already be on the system it will be compiled from source","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1152,"byte_end":1229,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/   (this is a C library).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1230,"byte_end":1258,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1259,"byte_end":1262,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ There's various tradeoffs associated with each implementation, but in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1263,"byte_end":1336,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ general you probably won't have to tweak the defaults. The default choice is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1337,"byte_end":1417,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ selected to avoid the need for a C compiler at build time. The `miniz-sys`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1418,"byte_end":1496,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ feature is largely a historical artifact at this point and is unlikely to be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1497,"byte_end":1577,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ needed, and `zlib` is often useful if you're already using `zlib` for other","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1578,"byte_end":1657,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ C dependencies. The compression ratios and performance of each of these","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1658,"byte_end":1733,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ feature should be roughly comparable, but you'll likely want to run your own","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1734,"byte_end":1814,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ tests if you're curious about the performance.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1815,"byte_end":1865,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1866,"byte_end":1869,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Organization","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1870,"byte_end":1888,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1889,"byte_end":1892,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This crate consists mainly of three modules, [`read`], [`write`], and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1893,"byte_end":1966,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ [`bufread`]. Each module contains a number of types used to encode and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":1967,"byte_end":2041,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ decode various streams of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2042,"byte_end":2077,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2078,"byte_end":2081,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ All types in the [`write`] module work on instances of [`Write`][write],","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2082,"byte_end":2158,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ whereas all types in the [`read`] module work on instances of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2159,"byte_end":2224,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ [`Read`][read] and [`bufread`] works with [`BufRead`][bufread]. If you","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2225,"byte_end":2299,"line_start":49,"line_end":49,"column_start":1,"column_end":75}},{"value":"/ are decoding directly from a `&[u8]`, use the [`bufread`] types.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2300,"byte_end":2368,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2369,"byte_end":2372,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2373,"byte_end":2380,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2381,"byte_end":2414,"line_start":53,"line_end":53,"column_start":1,"column_end":34}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2415,"byte_end":2443,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2444,"byte_end":2460,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2461,"byte_end":2489,"line_start":56,"line_end":56,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2490,"byte_end":2493,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # fn main() { let _ = run(); }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2494,"byte_end":2528,"line_start":58,"line_end":58,"column_start":1,"column_end":35}},{"value":"/ # fn run() -> io::Result<()> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2529,"byte_end":2563,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let mut encoder = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2564,"byte_end":2637,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/ encoder.write_all(b\"Example\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2638,"byte_end":2673,"line_start":61,"line_end":61,"column_start":1,"column_end":36}},{"value":"/ # Ok(())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2674,"byte_end":2686,"line_start":62,"line_end":62,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2687,"byte_end":2694,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2695,"byte_end":2702,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2707,"byte_end":2710,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Other various types are provided at the top-level of the crate for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2711,"byte_end":2781,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"/ management and dealing with encoders/decoders. Also note that types which","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2782,"byte_end":2859,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ operate over a specific trait often implement the mirroring trait as well.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2860,"byte_end":2938,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ For example a `flate2::read::DeflateDecoder<T>` *also* implements the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":2939,"byte_end":3012,"line_start":70,"line_end":70,"column_start":1,"column_end":74}},{"value":"/ `Write` trait if `T: Write`. That is, the \"dual trait\" is forwarded directly","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3013,"byte_end":3093,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/ to the underlying object if available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3094,"byte_end":3136,"line_start":72,"line_end":72,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3137,"byte_end":3140,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ [`read`]: read/index.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3141,"byte_end":3170,"line_start":74,"line_end":74,"column_start":1,"column_end":30}},{"value":"/ [`bufread`]: bufread/index.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3171,"byte_end":3206,"line_start":75,"line_end":75,"column_start":1,"column_end":36}},{"value":"/ [`write`]: write/index.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3207,"byte_end":3238,"line_start":76,"line_end":76,"column_start":1,"column_end":32}},{"value":"/ [read]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3239,"byte_end":3299,"line_start":77,"line_end":77,"column_start":1,"column_end":61}},{"value":"/ [write]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3300,"byte_end":3362,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/ [bufread]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3363,"byte_end":3429,"line_start":79,"line_end":79,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3430,"byte_end":3433,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Async I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3434,"byte_end":3449,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3450,"byte_end":3453,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This crate optionally can support async I/O streams with the [Tokio stack] via","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3454,"byte_end":3536,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"/ the `tokio` feature of this crate:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3537,"byte_end":3575,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3576,"byte_end":3579,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ [Tokio stack]: https://tokio.rs/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3580,"byte_end":3616,"line_start":86,"line_end":86,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3617,"byte_end":3620,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3621,"byte_end":3632,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"/ flate2 = { version = \"0.2\", features = [\"tokio\"] }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3633,"byte_end":3687,"line_start":89,"line_end":89,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3688,"byte_end":3695,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3696,"byte_end":3699,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ All methods are internally capable of working with streams that may return","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3700,"byte_end":3778,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/ [`ErrorKind::WouldBlock`] when they're not ready to perform the particular","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3779,"byte_end":3857,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3858,"byte_end":3872,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3873,"byte_end":3876,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ [`ErrorKind::WouldBlock`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3877,"byte_end":3960,"line_start":96,"line_end":96,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3961,"byte_end":3964,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Note that care needs to be taken when using these objects, however. The","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":3965,"byte_end":4040,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ Tokio runtime, in particular, requires that data is fully flushed before","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4041,"byte_end":4117,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"/ dropping streams. For compatibility with blocking streams all streams are","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4118,"byte_end":4195,"line_start":100,"line_end":100,"column_start":1,"column_end":78}},{"value":"/ flushed/written when they are dropped, and this is not always a suitable","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4196,"byte_end":4272,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ time to perform I/O. If I/O streams are flushed before drop, however, then","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4273,"byte_end":4351,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"/ these operations will be a noop.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4352,"byte_end":4388,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"deny(missing_docs)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4443,"byte_end":4465,"line_start":105,"line_end":105,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4466,"byte_end":4505,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4506,"byte_end":4538,"line_start":107,"line_end":107,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1020},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11555,"byte_end":11558,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[{"value":"/ The CRC calculated by a [`CrcReader`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11439,"byte_end":11481,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11482,"byte_end":11485,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`CrcReader`]: struct.CrcReader.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11486,"byte_end":11526,"line_start":10,"line_end":10,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1025},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11750,"byte_end":11759,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1028}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Read`] that calculates the CRC.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11598,"byte_end":11654,"line_start":17,"line_end":17,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11655,"byte_end":11658,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11659,"byte_end":11721,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11844,"byte_end":11847,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"pub fn new() -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[{"value":"/ Create a new CRC.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11811,"byte_end":11832,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12000,"byte_end":12003,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"pub fn sum(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[{"value":"/ Returns the current crc32 checksum.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11949,"byte_end":11988,"line_start":35,"line_end":35,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12227,"byte_end":12233,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"pub fn amount(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[{"value":"/ The number of bytes that have been used to calculate the CRC.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12070,"byte_end":12135,"line_start":40,"line_end":40,"column_start":5,"column_end":70}},{"value":"/ This value is only accurate if the amount is lower than 2<sup>32</sup>.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12140,"byte_end":12215,"line_start":41,"line_end":41,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12334,"byte_end":12340,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"pub fn update(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[{"value":"/ Update the CRC with the bytes in `data`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12278,"byte_end":12322,"line_start":46,"line_end":46,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12503,"byte_end":12508,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[{"value":"/ Reset the CRC.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12473,"byte_end":12491,"line_start":52,"line_end":52,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12663,"byte_end":12670,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"pub fn combine(&mut Self, &Crc)","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[{"value":"/ Combine the CRC with the CRC for the subsequent block of bytes.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12584,"byte_end":12651,"line_start":58,"line_end":58,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12880,"byte_end":12883,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"pub fn new(R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[{"value":"/ Create a new CrcReader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12841,"byte_end":12868,"line_start":66,"line_end":66,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13072,"byte_end":13075,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"pub fn crc(&Self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcReader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13025,"byte_end":13060,"line_start":76,"line_end":76,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13187,"byte_end":13197,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13122,"byte_end":13175,"line_start":81,"line_end":81,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13319,"byte_end":13326,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader by reference.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13241,"byte_end":13307,"line_start":86,"line_end":86,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13461,"byte_end":13468,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the reader that is wrapped by this CrcReader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13373,"byte_end":13449,"line_start":91,"line_end":91,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13575,"byte_end":13580,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcReader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13527,"byte_end":13563,"line_start":96,"line_end":96,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14306,"byte_end":14315,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Write`] that calculates the CRC.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14151,"byte_end":14208,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14209,"byte_end":14212,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14213,"byte_end":14277,"line_start":124,"line_end":124,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14426,"byte_end":14429,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"pub fn crc(&Self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcWriter.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14379,"byte_end":14414,"line_start":132,"line_end":132,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14541,"byte_end":14551,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14476,"byte_end":14529,"line_start":137,"line_end":137,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14673,"byte_end":14680,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter by reference.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14595,"byte_end":14661,"line_start":142,"line_end":142,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14815,"byte_end":14822,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the writer that is wrapped by this CrcWriter.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14727,"byte_end":14803,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14929,"byte_end":14934,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcWriter.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14881,"byte_end":14917,"line_start":152,"line_end":152,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":15056,"byte_end":15059,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"pub fn new(W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[{"value":"/ Create a new CrcWriter.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":15017,"byte_end":15044,"line_start":159,"line_end":159,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1039},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22840,"byte_end":22854,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":21872,"byte_end":21909,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":21910,"byte_end":21913,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading uncompressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":21914,"byte_end":21992,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ from the underlying reader, and emitting compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":21993,"byte_end":22054,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22055,"byte_end":22058,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22059,"byte_end":22127,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22128,"byte_end":22131,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22132,"byte_end":22146,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22147,"byte_end":22150,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22151,"byte_end":22158,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22159,"byte_end":22187,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22188,"byte_end":22204,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22205,"byte_end":22233,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22234,"byte_end":22274,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22275,"byte_end":22297,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22298,"byte_end":22325,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22326,"byte_end":22329,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22330,"byte_end":22347,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", open_hello_world().unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22348,"byte_end":22403,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22404,"byte_end":22411,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22412,"byte_end":22417,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22418,"byte_end":22488,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22489,"byte_end":22539,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/    let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22540,"byte_end":22595,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/    let b = BufReader::new(f);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22596,"byte_end":22629,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/    let mut deflater = DeflateEncoder::new(b, Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22630,"byte_end":22700,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/    let mut buffer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22701,"byte_end":22736,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/    deflater.read_to_end(&mut buffer)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22737,"byte_end":22779,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/    Ok(buffer)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22780,"byte_end":22797,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22798,"byte_end":22803,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22804,"byte_end":22811,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23069,"byte_end":23072,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22936,"byte_end":23010,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23015,"byte_end":23057,"line_start":52,"line_end":52,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23738,"byte_end":23743,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23359,"byte_end":23428,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23433,"byte_end":23456,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23461,"byte_end":23464,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23469,"byte_end":23544,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23549,"byte_end":23621,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23626,"byte_end":23695,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23700,"byte_end":23726,"line_start":72,"line_end":72,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23913,"byte_end":23920,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23852,"byte_end":23901,"line_start":78,"line_end":78,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24165,"byte_end":24172,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23965,"byte_end":24022,"line_start":83,"line_end":83,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24027,"byte_end":24030,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24035,"byte_end":24107,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24112,"byte_end":24153,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24300,"byte_end":24310,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24229,"byte_end":24288,"line_start":91,"line_end":91,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24581,"byte_end":24589,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24352,"byte_end":24425,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24430,"byte_end":24433,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24438,"byte_end":24514,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24519,"byte_end":24569,"line_start":99,"line_end":99,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24823,"byte_end":24832,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24646,"byte_end":24711,"line_start":104,"line_end":104,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24716,"byte_end":24719,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24724,"byte_end":24793,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24798,"byte_end":24811,"line_start":107,"line_end":107,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1046},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26644,"byte_end":26658,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25575,"byte_end":25614,"line_start":139,"line_end":139,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25615,"byte_end":25618,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25619,"byte_end":25695,"line_start":141,"line_end":141,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25696,"byte_end":25759,"line_start":142,"line_end":142,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25760,"byte_end":25763,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25764,"byte_end":25832,"line_start":144,"line_end":144,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25833,"byte_end":25836,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25837,"byte_end":25851,"line_start":146,"line_end":146,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25852,"byte_end":25855,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25856,"byte_end":25863,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25864,"byte_end":25892,"line_start":149,"line_end":149,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25893,"byte_end":25909,"line_start":150,"line_end":150,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25910,"byte_end":25940,"line_start":151,"line_end":151,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25941,"byte_end":25981,"line_start":152,"line_end":152,"column_start":1,"column_end":41}},{"value":"/ use flate2::bufread::DeflateDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25982,"byte_end":26022,"line_start":153,"line_end":153,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26023,"byte_end":26026,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26027,"byte_end":26044,"line_start":155,"line_end":155,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26045,"byte_end":26122,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26123,"byte_end":26169,"line_start":157,"line_end":157,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26170,"byte_end":26211,"line_start":158,"line_end":158,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26212,"byte_end":26267,"line_start":159,"line_end":159,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26268,"byte_end":26275,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26276,"byte_end":26359,"line_start":161,"line_end":161,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26360,"byte_end":26393,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26394,"byte_end":26454,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26455,"byte_end":26513,"line_start":164,"line_end":164,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26514,"byte_end":26547,"line_start":165,"line_end":165,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26548,"byte_end":26588,"line_start":166,"line_end":166,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26589,"byte_end":26601,"line_start":167,"line_end":167,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26602,"byte_end":26607,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26608,"byte_end":26615,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26946,"byte_end":26949,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26846,"byte_end":26918,"line_start":181,"line_end":181,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26923,"byte_end":26934,"line_start":182,"line_end":182,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27489,"byte_end":27494,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27117,"byte_end":27186,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27191,"byte_end":27214,"line_start":193,"line_end":193,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27219,"byte_end":27222,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27227,"byte_end":27297,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27302,"byte_end":27370,"line_start":196,"line_end":196,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27375,"byte_end":27446,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27451,"byte_end":27477,"line_start":198,"line_end":198,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27781,"byte_end":27791,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"pub fn reset_data(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[{"value":"/ Resets the state of this decoder's data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27603,"byte_end":27646,"line_start":204,"line_end":204,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27651,"byte_end":27654,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder. It will continue","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27659,"byte_end":27731,"line_start":206,"line_end":206,"column_start":5,"column_end":77}},{"value":"/ reading from the same stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27736,"byte_end":27769,"line_start":207,"line_end":207,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27911,"byte_end":27918,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27850,"byte_end":27899,"line_start":212,"line_end":212,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28163,"byte_end":28170,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27963,"byte_end":28020,"line_start":217,"line_end":217,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28025,"byte_end":28028,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28033,"byte_end":28105,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28110,"byte_end":28151,"line_start":220,"line_end":220,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28298,"byte_end":28308,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28227,"byte_end":28286,"line_start":225,"line_end":225,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28577,"byte_end":28585,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28350,"byte_end":28417,"line_start":230,"line_end":230,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28422,"byte_end":28425,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28430,"byte_end":28498,"line_start":232,"line_end":232,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28503,"byte_end":28565,"line_start":233,"line_end":233,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28721,"byte_end":28730,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28642,"byte_end":28709,"line_start":238,"line_end":238,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1053},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30606,"byte_end":30620,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1055}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29679,"byte_end":29716,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29717,"byte_end":29720,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29721,"byte_end":29798,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29799,"byte_end":29871,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29872,"byte_end":29875,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29876,"byte_end":29938,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29939,"byte_end":29942,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29943,"byte_end":29957,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29958,"byte_end":29961,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29962,"byte_end":29969,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29970,"byte_end":29998,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":29999,"byte_end":30015,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30016,"byte_end":30044,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30045,"byte_end":30082,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30083,"byte_end":30086,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30087,"byte_end":30104,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", deflateencoder_read_hello_world().unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30105,"byte_end":30175,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30176,"byte_end":30183,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30184,"byte_end":30189,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ // Return a vector containing the Deflate compressed version of hello world","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30190,"byte_end":30269,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ fn deflateencoder_read_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30270,"byte_end":30335,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/    let mut ret_vec = [0;100];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30336,"byte_end":30369,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/    let c = b\"hello world\";","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30370,"byte_end":30400,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/    let mut deflater = DeflateEncoder::new(&c[..], Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30401,"byte_end":30476,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/    let count = deflater.read(&mut ret_vec)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30477,"byte_end":30525,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/    Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30526,"byte_end":30563,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30564,"byte_end":30569,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30570,"byte_end":30577,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30850,"byte_end":30853,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30717,"byte_end":30791,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30796,"byte_end":30838,"line_start":47,"line_end":47,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31590,"byte_end":31595,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31061,"byte_end":31130,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31135,"byte_end":31158,"line_start":57,"line_end":57,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31163,"byte_end":31166,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31171,"byte_end":31246,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31251,"byte_end":31323,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31328,"byte_end":31397,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31402,"byte_end":31428,"line_start":62,"line_end":62,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31433,"byte_end":31436,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31441,"byte_end":31513,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31518,"byte_end":31578,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31791,"byte_end":31798,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31730,"byte_end":31779,"line_start":71,"line_end":71,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32064,"byte_end":32071,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31864,"byte_end":31921,"line_start":76,"line_end":76,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31926,"byte_end":31929,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31934,"byte_end":32006,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32011,"byte_end":32052,"line_start":79,"line_end":79,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32412,"byte_end":32422,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32145,"byte_end":32204,"line_start":84,"line_end":84,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32209,"byte_end":32212,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32217,"byte_end":32292,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32297,"byte_end":32370,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32375,"byte_end":32400,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32721,"byte_end":32729,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32492,"byte_end":32565,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32570,"byte_end":32573,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32578,"byte_end":32654,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32659,"byte_end":32709,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32964,"byte_end":32973,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32787,"byte_end":32852,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32857,"byte_end":32860,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32865,"byte_end":32934,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":32939,"byte_end":32952,"line_start":104,"line_end":104,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1059},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34748,"byte_end":34762,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1061}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33678,"byte_end":33717,"line_start":136,"line_end":136,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33718,"byte_end":33721,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33722,"byte_end":33794,"line_start":138,"line_end":138,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33795,"byte_end":33872,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33873,"byte_end":33876,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33877,"byte_end":33939,"line_start":141,"line_end":141,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33940,"byte_end":33943,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33944,"byte_end":33958,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33959,"byte_end":33962,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33963,"byte_end":33970,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33971,"byte_end":33999,"line_start":146,"line_end":146,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34000,"byte_end":34016,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34017,"byte_end":34047,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34048,"byte_end":34088,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/ use flate2::read::DeflateDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34089,"byte_end":34126,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34127,"byte_end":34130,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34131,"byte_end":34148,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34149,"byte_end":34226,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34227,"byte_end":34273,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34274,"byte_end":34315,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34316,"byte_end":34371,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34372,"byte_end":34379,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34380,"byte_end":34463,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34464,"byte_end":34497,"line_start":159,"line_end":159,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34498,"byte_end":34558,"line_start":160,"line_end":160,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34559,"byte_end":34617,"line_start":161,"line_end":161,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34618,"byte_end":34651,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34652,"byte_end":34692,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34693,"byte_end":34705,"line_start":164,"line_end":164,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34706,"byte_end":34711,"line_start":165,"line_end":165,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34712,"byte_end":34719,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34959,"byte_end":34962,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"pub fn new(R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34859,"byte_end":34931,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34936,"byte_end":34947,"line_start":174,"line_end":174,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35280,"byte_end":35292,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35063,"byte_end":35132,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35137,"byte_end":35140,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of the intermediate buffer is never increased,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35145,"byte_end":35218,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/ and it is recommended for it to be large.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35223,"byte_end":35268,"line_start":182,"line_end":182,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36012,"byte_end":36017,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35490,"byte_end":35559,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35564,"byte_end":35587,"line_start":192,"line_end":192,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35592,"byte_end":35595,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35600,"byte_end":35670,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35675,"byte_end":35743,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35748,"byte_end":35819,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35824,"byte_end":35850,"line_start":197,"line_end":197,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35855,"byte_end":35858,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35863,"byte_end":35935,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35940,"byte_end":36000,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36213,"byte_end":36220,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36152,"byte_end":36201,"line_start":206,"line_end":206,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36486,"byte_end":36493,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36286,"byte_end":36343,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36348,"byte_end":36351,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36356,"byte_end":36428,"line_start":213,"line_end":213,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36433,"byte_end":36474,"line_start":214,"line_end":214,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36834,"byte_end":36844,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36567,"byte_end":36626,"line_start":219,"line_end":219,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36631,"byte_end":36634,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36639,"byte_end":36714,"line_start":221,"line_end":221,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36719,"byte_end":36792,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36797,"byte_end":36822,"line_start":223,"line_end":223,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37141,"byte_end":37149,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36914,"byte_end":36981,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36986,"byte_end":36989,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":36994,"byte_end":37062,"line_start":230,"line_end":230,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37067,"byte_end":37129,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37286,"byte_end":37295,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37207,"byte_end":37274,"line_start":236,"line_end":236,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1065},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38898,"byte_end":38912,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":1067}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38204,"byte_end":38241,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38242,"byte_end":38245,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38246,"byte_end":38319,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38320,"byte_end":38393,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38394,"byte_end":38397,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38398,"byte_end":38462,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38463,"byte_end":38466,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38467,"byte_end":38481,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38482,"byte_end":38485,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38486,"byte_end":38493,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38494,"byte_end":38522,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38523,"byte_end":38551,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38552,"byte_end":38590,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38591,"byte_end":38594,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38595,"byte_end":38673,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38674,"byte_end":38691,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38692,"byte_end":38695,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38696,"byte_end":38768,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38769,"byte_end":38810,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38811,"byte_end":38853,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38854,"byte_end":38861,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38862,"byte_end":38869,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39242,"byte_end":39245,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"pub fn new(W, crate::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39004,"byte_end":39076,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39081,"byte_end":39122,"line_start":41,"line_end":41,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39127,"byte_end":39130,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39135,"byte_end":39210,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39215,"byte_end":39230,"line_start":44,"line_end":44,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39479,"byte_end":39486,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39417,"byte_end":39467,"line_start":51,"line_end":51,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39763,"byte_end":39770,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39542,"byte_end":39600,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39605,"byte_end":39608,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39613,"byte_end":39689,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39694,"byte_end":39751,"line_start":59,"line_end":59,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40648,"byte_end":40653,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39834,"byte_end":39904,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39909,"byte_end":39932,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39937,"byte_end":39940,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":39945,"byte_end":40019,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams. If the stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40024,"byte_end":40099,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/ cannot be finished an error is returned.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40104,"byte_end":40148,"line_start":69,"line_end":69,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40153,"byte_end":40156,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40161,"byte_end":40237,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40242,"byte_end":40310,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40315,"byte_end":40389,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40394,"byte_end":40463,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40468,"byte_end":40471,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40476,"byte_end":40488,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40493,"byte_end":40496,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40501,"byte_end":40572,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40577,"byte_end":40636,"line_start":79,"line_end":79,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41413,"byte_end":41423,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40798,"byte_end":40873,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40878,"byte_end":40881,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40886,"byte_end":40959,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":40964,"byte_end":41040,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41045,"byte_end":41088,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41093,"byte_end":41096,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41101,"byte_end":41113,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41118,"byte_end":41121,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41126,"byte_end":41200,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41205,"byte_end":41228,"line_start":95,"line_end":95,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41233,"byte_end":41236,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41241,"byte_end":41253,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41258,"byte_end":41261,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41266,"byte_end":41337,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41342,"byte_end":41401,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42258,"byte_end":42264,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41494,"byte_end":41548,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41553,"byte_end":41556,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41561,"byte_end":41633,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41638,"byte_end":41697,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41702,"byte_end":41705,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41710,"byte_end":41786,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41791,"byte_end":41866,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41871,"byte_end":41941,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":41946,"byte_end":42019,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42024,"byte_end":42073,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42078,"byte_end":42081,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42086,"byte_end":42098,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42103,"byte_end":42106,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42111,"byte_end":42182,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42187,"byte_end":42246,"line_start":119,"line_end":119,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42949,"byte_end":42961,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42371,"byte_end":42425,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42430,"byte_end":42433,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42438,"byte_end":42514,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42519,"byte_end":42553,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42558,"byte_end":42622,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42627,"byte_end":42697,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42702,"byte_end":42764,"line_start":131,"line_end":131,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42769,"byte_end":42772,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42777,"byte_end":42789,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42794,"byte_end":42797,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42802,"byte_end":42873,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":42878,"byte_end":42937,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43287,"byte_end":43295,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43067,"byte_end":43140,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43145,"byte_end":43148,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43153,"byte_end":43225,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43230,"byte_end":43275,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43538,"byte_end":43547,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43358,"byte_end":43423,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43428,"byte_end":43431,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43436,"byte_end":43508,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43513,"byte_end":43526,"line_start":153,"line_end":153,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1071},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45479,"byte_end":45493,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":1073}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44297,"byte_end":44336,"line_start":186,"line_end":186,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44337,"byte_end":44340,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44341,"byte_end":44421,"line_start":188,"line_end":188,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44422,"byte_end":44468,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44469,"byte_end":44472,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44473,"byte_end":44536,"line_start":191,"line_end":191,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44537,"byte_end":44540,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44541,"byte_end":44555,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44556,"byte_end":44559,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44560,"byte_end":44567,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44568,"byte_end":44596,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44597,"byte_end":44613,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44614,"byte_end":44644,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44645,"byte_end":44685,"line_start":199,"line_end":199,"column_start":1,"column_end":41}},{"value":"/ use flate2::write::DeflateDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44686,"byte_end":44724,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44725,"byte_end":44728,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44729,"byte_end":44746,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44747,"byte_end":44824,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44825,"byte_end":44871,"line_start":204,"line_end":204,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44872,"byte_end":44913,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_writer(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44914,"byte_end":44969,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44970,"byte_end":44977,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44978,"byte_end":45061,"line_start":208,"line_end":208,"column_start":1,"column_end":84}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45062,"byte_end":45098,"line_start":209,"line_end":209,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45099,"byte_end":45159,"line_start":210,"line_end":210,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45160,"byte_end":45195,"line_start":211,"line_end":211,"column_start":1,"column_end":36}},{"value":"/    let mut deflater = DeflateDecoder::new(writer);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45196,"byte_end":45250,"line_start":212,"line_end":212,"column_start":1,"column_end":55}},{"value":"/    deflater.write_all(&bytes[..])?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45251,"byte_end":45290,"line_start":213,"line_end":213,"column_start":1,"column_end":40}},{"value":"/    writer = deflater.finish()?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45291,"byte_end":45326,"line_start":214,"line_end":214,"column_start":1,"column_end":36}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45327,"byte_end":45411,"line_start":215,"line_end":215,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45412,"byte_end":45436,"line_start":216,"line_end":216,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45437,"byte_end":45442,"line_start":217,"line_end":217,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45443,"byte_end":45450,"line_start":218,"line_end":218,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45782,"byte_end":45785,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"pub fn new(W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45587,"byte_end":45662,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45667,"byte_end":45670,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45675,"byte_end":45750,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45755,"byte_end":45770,"line_start":228,"line_end":228,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45987,"byte_end":45994,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45925,"byte_end":45975,"line_start":235,"line_end":235,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46271,"byte_end":46278,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46050,"byte_end":46108,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46113,"byte_end":46116,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46121,"byte_end":46197,"line_start":242,"line_end":242,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46202,"byte_end":46259,"line_start":243,"line_end":243,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47059,"byte_end":47064,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46342,"byte_end":46412,"line_start":248,"line_end":248,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46417,"byte_end":46440,"line_start":249,"line_end":249,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46445,"byte_end":46448,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46453,"byte_end":46527,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46532,"byte_end":46593,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46598,"byte_end":46601,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This will then reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46606,"byte_end":46681,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46686,"byte_end":46756,"line_start":255,"line_end":255,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46761,"byte_end":46834,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46839,"byte_end":46865,"line_start":257,"line_end":257,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46870,"byte_end":46873,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46878,"byte_end":46890,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46895,"byte_end":46898,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, and if that I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46903,"byte_end":46975,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ returns an error then that will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":46980,"byte_end":47047,"line_start":262,"line_end":262,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47805,"byte_end":47815,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47226,"byte_end":47301,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47306,"byte_end":47309,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47314,"byte_end":47387,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47392,"byte_end":47468,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47473,"byte_end":47516,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47521,"byte_end":47524,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47529,"byte_end":47541,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47546,"byte_end":47549,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47554,"byte_end":47628,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47633,"byte_end":47656,"line_start":278,"line_end":278,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47661,"byte_end":47664,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47669,"byte_end":47681,"line_start":280,"line_end":280,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47686,"byte_end":47689,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47694,"byte_end":47764,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47769,"byte_end":47793,"line_start":283,"line_end":283,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48629,"byte_end":48635,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47886,"byte_end":47940,"line_start":288,"line_end":288,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47945,"byte_end":47948,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":47953,"byte_end":48029,"line_start":290,"line_end":290,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48034,"byte_end":48068,"line_start":291,"line_end":291,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48073,"byte_end":48076,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48081,"byte_end":48157,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48162,"byte_end":48237,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48242,"byte_end":48312,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48317,"byte_end":48390,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48395,"byte_end":48444,"line_start":297,"line_end":297,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48449,"byte_end":48452,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48457,"byte_end":48469,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48474,"byte_end":48477,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48482,"byte_end":48553,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48558,"byte_end":48617,"line_start":302,"line_end":302,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48997,"byte_end":49005,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48742,"byte_end":48812,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48817,"byte_end":48835,"line_start":309,"line_end":309,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48840,"byte_end":48843,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48848,"byte_end":48914,"line_start":311,"line_end":311,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":48919,"byte_end":48985,"line_start":312,"line_end":312,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49175,"byte_end":49184,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49068,"byte_end":49140,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49145,"byte_end":49163,"line_start":318,"line_end":318,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1128},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66574,"byte_end":66583,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65612,"byte_end":65640,"line_start":120,"line_end":120,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65641,"byte_end":65644,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will read uncompressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65645,"byte_end":65728,"line_start":122,"line_end":122,"column_start":1,"column_end":84}},{"value":"/ from the underlying reader and expose the compressed version as a [`BufRead`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65729,"byte_end":65810,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/ interface.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65811,"byte_end":65825,"line_start":124,"line_end":124,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65826,"byte_end":65829,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65830,"byte_end":65898,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65899,"byte_end":65902,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65903,"byte_end":65917,"line_start":128,"line_end":128,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65918,"byte_end":65921,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65922,"byte_end":65929,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65930,"byte_end":65958,"line_start":131,"line_end":131,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65959,"byte_end":65975,"line_start":132,"line_end":132,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":65976,"byte_end":66004,"line_start":133,"line_end":133,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66005,"byte_end":66040,"line_start":134,"line_end":134,"column_start":1,"column_end":36}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66041,"byte_end":66063,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66064,"byte_end":66091,"line_start":136,"line_end":136,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66092,"byte_end":66095,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66096,"byte_end":66175,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ // File wrapped in a BufReader implements BufRead","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66176,"byte_end":66229,"line_start":139,"line_end":139,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66230,"byte_end":66233,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66234,"byte_end":66284,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/     let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66285,"byte_end":66341,"line_start":142,"line_end":142,"column_start":1,"column_end":57}},{"value":"/     let b = BufReader::new(f);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66342,"byte_end":66376,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/     let mut gz = GzEncoder::new(b, Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66377,"byte_end":66437,"line_start":144,"line_end":144,"column_start":1,"column_end":61}},{"value":"/     let mut buffer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66438,"byte_end":66474,"line_start":145,"line_end":145,"column_start":1,"column_end":37}},{"value":"/     gz.read_to_end(&mut buffer)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66475,"byte_end":66512,"line_start":146,"line_end":146,"column_start":1,"column_end":38}},{"value":"/     Ok(buffer)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66513,"byte_end":66531,"line_start":147,"line_end":147,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66532,"byte_end":66537,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66538,"byte_end":66545,"line_start":149,"line_end":149,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67351,"byte_end":67354,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67010,"byte_end":67079,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67084,"byte_end":67087,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67092,"byte_end":67163,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67168,"byte_end":67219,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67224,"byte_end":67227,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67232,"byte_end":67302,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":67307,"byte_end":67339,"line_start":175,"line_end":175,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68109,"byte_end":68116,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68047,"byte_end":68097,"line_start":200,"line_end":200,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68383,"byte_end":68390,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68182,"byte_end":68240,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68245,"byte_end":68248,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68253,"byte_end":68325,"line_start":207,"line_end":207,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68330,"byte_end":68371,"line_start":208,"line_end":208,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68533,"byte_end":68543,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68464,"byte_end":68521,"line_start":213,"line_end":213,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1137},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70907,"byte_end":70916,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69877,"byte_end":69905,"line_start":266,"line_end":266,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69906,"byte_end":69909,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69910,"byte_end":69986,"line_start":268,"line_end":268,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69987,"byte_end":70050,"line_start":269,"line_end":269,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70051,"byte_end":70054,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70055,"byte_end":70123,"line_start":271,"line_end":271,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70124,"byte_end":70127,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70128,"byte_end":70142,"line_start":273,"line_end":273,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70143,"byte_end":70146,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70147,"byte_end":70154,"line_start":275,"line_end":275,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70155,"byte_end":70183,"line_start":276,"line_end":276,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70184,"byte_end":70200,"line_start":277,"line_end":277,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70201,"byte_end":70231,"line_start":278,"line_end":278,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70232,"byte_end":70267,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::GzDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70268,"byte_end":70303,"line_start":280,"line_end":280,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70304,"byte_end":70307,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70308,"byte_end":70325,"line_start":282,"line_end":282,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70326,"byte_end":70397,"line_start":283,"line_end":283,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70398,"byte_end":70443,"line_start":284,"line_end":284,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70444,"byte_end":70484,"line_start":285,"line_end":285,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70485,"byte_end":70539,"line_start":286,"line_end":286,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70540,"byte_end":70547,"line_start":287,"line_end":287,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70548,"byte_end":70553,"line_start":288,"line_end":288,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70554,"byte_end":70632,"line_start":289,"line_end":289,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70633,"byte_end":70669,"line_start":290,"line_end":290,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70670,"byte_end":70673,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70674,"byte_end":70734,"line_start":292,"line_end":292,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70735,"byte_end":70782,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70783,"byte_end":70816,"line_start":294,"line_end":294,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70817,"byte_end":70851,"line_start":295,"line_end":295,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70852,"byte_end":70864,"line_start":296,"line_end":296,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70865,"byte_end":70870,"line_start":297,"line_end":297,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":70871,"byte_end":70878,"line_start":298,"line_end":298,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":72298,"byte_end":72301,"line_start":354,"line_end":354,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":72193,"byte_end":72265,"line_start":352,"line_end":352,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":72270,"byte_end":72286,"line_start":353,"line_end":353,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73251,"byte_end":73257,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73172,"byte_end":73239,"line_start":387,"line_end":387,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73390,"byte_end":73397,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73328,"byte_end":73378,"line_start":392,"line_end":392,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73665,"byte_end":73672,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73464,"byte_end":73522,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73527,"byte_end":73530,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73535,"byte_end":73607,"line_start":399,"line_end":399,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73612,"byte_end":73653,"line_start":400,"line_end":400,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73818,"byte_end":73828,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73747,"byte_end":73806,"line_start":405,"line_end":405,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1164},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79986,"byte_end":80000,"line_start":581,"line_end":581,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78448,"byte_end":78518,"line_start":540,"line_end":540,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78519,"byte_end":78522,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78523,"byte_end":78603,"line_start":542,"line_end":542,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78604,"byte_end":78685,"line_start":543,"line_end":543,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream. `MultiGzDecoder` will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78686,"byte_end":78757,"line_start":544,"line_end":544,"column_start":1,"column_end":72}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78758,"byte_end":78831,"line_start":545,"line_end":545,"column_start":1,"column_end":74}},{"value":"/ the first gzip member. The multistream format is commonly used in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78832,"byte_end":78901,"line_start":546,"line_end":546,"column_start":1,"column_end":70}},{"value":"/ bioinformatics, for example when using the BGZF compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78902,"byte_end":78970,"line_start":547,"line_end":547,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78971,"byte_end":78974,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will consume all gzip members","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78975,"byte_end":79060,"line_start":549,"line_end":549,"column_start":1,"column_end":86}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79061,"byte_end":79119,"line_start":550,"line_end":550,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79120,"byte_end":79123,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79124,"byte_end":79192,"line_start":552,"line_end":552,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79193,"byte_end":79196,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79197,"byte_end":79211,"line_start":554,"line_end":554,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79212,"byte_end":79215,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79216,"byte_end":79223,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79224,"byte_end":79252,"line_start":557,"line_end":557,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79253,"byte_end":79269,"line_start":558,"line_end":558,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79270,"byte_end":79300,"line_start":559,"line_end":559,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79301,"byte_end":79336,"line_start":560,"line_end":560,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::MultiGzDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79337,"byte_end":79377,"line_start":561,"line_end":561,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79378,"byte_end":79381,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79382,"byte_end":79399,"line_start":563,"line_end":563,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79400,"byte_end":79471,"line_start":564,"line_end":564,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79472,"byte_end":79517,"line_start":565,"line_end":565,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79518,"byte_end":79558,"line_start":566,"line_end":566,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79559,"byte_end":79613,"line_start":567,"line_end":567,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79614,"byte_end":79621,"line_start":568,"line_end":568,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79622,"byte_end":79627,"line_start":569,"line_end":569,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79628,"byte_end":79706,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79707,"byte_end":79743,"line_start":571,"line_end":571,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79744,"byte_end":79747,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79748,"byte_end":79808,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79809,"byte_end":79861,"line_start":574,"line_end":574,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79862,"byte_end":79895,"line_start":575,"line_end":575,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79896,"byte_end":79930,"line_start":576,"line_end":576,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79931,"byte_end":79943,"line_start":577,"line_end":577,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79944,"byte_end":79949,"line_start":578,"line_end":578,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":79950,"byte_end":79957,"line_start":579,"line_end":579,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80248,"byte_end":80251,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80061,"byte_end":80133,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80138,"byte_end":80216,"line_start":585,"line_end":585,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80221,"byte_end":80236,"line_start":586,"line_end":586,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80461,"byte_end":80467,"line_start":594,"line_end":594,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80376,"byte_end":80449,"line_start":593,"line_end":593,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80595,"byte_end":80602,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80533,"byte_end":80583,"line_start":598,"line_end":598,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80855,"byte_end":80862,"line_start":607,"line_end":607,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80654,"byte_end":80712,"line_start":603,"line_end":603,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80717,"byte_end":80720,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80725,"byte_end":80797,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80802,"byte_end":80843,"line_start":606,"line_end":606,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80993,"byte_end":81003,"line_start":612,"line_end":612,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80922,"byte_end":80981,"line_start":611,"line_end":611,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82804,"byte_end":82813,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1173}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":81976,"byte_end":82004,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82005,"byte_end":82008,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will read uncompressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82009,"byte_end":82089,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ from the underlying reader and expose the compressed version as a [`Read`]","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82090,"byte_end":82168,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ interface.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82169,"byte_end":82183,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82184,"byte_end":82187,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82188,"byte_end":82250,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82251,"byte_end":82254,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82255,"byte_end":82269,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82270,"byte_end":82273,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82274,"byte_end":82281,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82282,"byte_end":82310,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82311,"byte_end":82327,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82328,"byte_end":82356,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82357,"byte_end":82389,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82390,"byte_end":82393,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Return a vector containing the GZ compressed version of hello world","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82394,"byte_end":82468,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82469,"byte_end":82472,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ fn gzencode_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82473,"byte_end":82527,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/     let mut ret_vec = [0;100];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82528,"byte_end":82562,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     let bytestring = b\"hello world\";","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82563,"byte_end":82603,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/     let mut gz = GzEncoder::new(&bytestring[..], Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82604,"byte_end":82678,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/     let count = gz.read(&mut ret_vec)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82679,"byte_end":82722,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/     Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82723,"byte_end":82761,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82762,"byte_end":82767,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":82768,"byte_end":82775,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83361,"byte_end":83364,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"pub fn new(R, Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83020,"byte_end":83089,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83094,"byte_end":83097,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83102,"byte_end":83173,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83178,"byte_end":83229,"line_start":53,"line_end":53,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83234,"byte_end":83237,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83242,"byte_end":83312,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83317,"byte_end":83349,"line_start":56,"line_end":56,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83547,"byte_end":83554,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83485,"byte_end":83535,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83821,"byte_end":83828,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83620,"byte_end":83678,"line_start":68,"line_end":68,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83683,"byte_end":83686,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83691,"byte_end":83763,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83768,"byte_end":83809,"line_start":71,"line_end":71,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83971,"byte_end":83981,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83902,"byte_end":83959,"line_start":76,"line_end":76,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1177},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85446,"byte_end":85455,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1179}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84420,"byte_end":84448,"line_start":98,"line_end":98,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84449,"byte_end":84452,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84453,"byte_end":84529,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84530,"byte_end":84593,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84594,"byte_end":84597,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84598,"byte_end":84660,"line_start":103,"line_end":103,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84661,"byte_end":84664,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84665,"byte_end":84679,"line_start":105,"line_end":105,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84680,"byte_end":84683,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84684,"byte_end":84691,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84692,"byte_end":84695,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84696,"byte_end":84724,"line_start":109,"line_end":109,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84725,"byte_end":84741,"line_start":110,"line_end":110,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84742,"byte_end":84772,"line_start":111,"line_end":111,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84773,"byte_end":84808,"line_start":112,"line_end":112,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::GzDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84809,"byte_end":84841,"line_start":113,"line_end":113,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84842,"byte_end":84845,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84846,"byte_end":84863,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84864,"byte_end":84936,"line_start":116,"line_end":116,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84937,"byte_end":84983,"line_start":117,"line_end":117,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84984,"byte_end":85025,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85026,"byte_end":85081,"line_start":119,"line_end":119,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85082,"byte_end":85089,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85090,"byte_end":85095,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85096,"byte_end":85174,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85175,"byte_end":85208,"line_start":123,"line_end":123,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85209,"byte_end":85212,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85213,"byte_end":85273,"line_start":125,"line_end":125,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85274,"byte_end":85321,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85322,"byte_end":85355,"line_start":127,"line_end":127,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85356,"byte_end":85390,"line_start":128,"line_end":128,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85391,"byte_end":85403,"line_start":129,"line_end":129,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85404,"byte_end":85409,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85410,"byte_end":85417,"line_start":131,"line_end":131,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85647,"byte_end":85650,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"pub fn new(R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85542,"byte_end":85614,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85619,"byte_end":85635,"line_start":139,"line_end":139,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85884,"byte_end":85890,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85804,"byte_end":85872,"line_start":148,"line_end":148,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86022,"byte_end":86029,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85960,"byte_end":86010,"line_start":153,"line_end":153,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86296,"byte_end":86303,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86095,"byte_end":86153,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86158,"byte_end":86161,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86166,"byte_end":86238,"line_start":160,"line_end":160,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86243,"byte_end":86284,"line_start":161,"line_end":161,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86448,"byte_end":86458,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86377,"byte_end":86436,"line_start":166,"line_end":166,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1183},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88684,"byte_end":88698,"line_start":239,"line_end":239,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":1185}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87156,"byte_end":87226,"line_start":198,"line_end":198,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87227,"byte_end":87230,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87231,"byte_end":87311,"line_start":200,"line_end":200,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87312,"byte_end":87393,"line_start":201,"line_end":201,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream.  `MultiGzDecoder` will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87394,"byte_end":87466,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87467,"byte_end":87544,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/ first gzip member. The multistream format is commonly used in bioinformatics,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87545,"byte_end":87626,"line_start":204,"line_end":204,"column_start":1,"column_end":82}},{"value":"/ for example when using the BGZF compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87627,"byte_end":87679,"line_start":205,"line_end":205,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87680,"byte_end":87683,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume all gzip members","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87684,"byte_end":87766,"line_start":207,"line_end":207,"column_start":1,"column_end":83}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87767,"byte_end":87825,"line_start":208,"line_end":208,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87826,"byte_end":87829,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87830,"byte_end":87892,"line_start":210,"line_end":210,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87893,"byte_end":87896,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87897,"byte_end":87911,"line_start":212,"line_end":212,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87912,"byte_end":87915,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87916,"byte_end":87923,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87924,"byte_end":87952,"line_start":215,"line_end":215,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87953,"byte_end":87969,"line_start":216,"line_end":216,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":87970,"byte_end":88000,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88001,"byte_end":88036,"line_start":218,"line_end":218,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::MultiGzDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88037,"byte_end":88074,"line_start":219,"line_end":219,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88075,"byte_end":88078,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88079,"byte_end":88096,"line_start":221,"line_end":221,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88097,"byte_end":88169,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88170,"byte_end":88216,"line_start":223,"line_end":223,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88217,"byte_end":88258,"line_start":224,"line_end":224,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88259,"byte_end":88314,"line_start":225,"line_end":225,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88315,"byte_end":88322,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88323,"byte_end":88328,"line_start":227,"line_end":227,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88329,"byte_end":88407,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88408,"byte_end":88441,"line_start":229,"line_end":229,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88442,"byte_end":88445,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88446,"byte_end":88506,"line_start":231,"line_end":231,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88507,"byte_end":88559,"line_start":232,"line_end":232,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88560,"byte_end":88593,"line_start":233,"line_end":233,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88594,"byte_end":88628,"line_start":234,"line_end":234,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88629,"byte_end":88641,"line_start":235,"line_end":235,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88642,"byte_end":88647,"line_start":236,"line_end":236,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88648,"byte_end":88655,"line_start":237,"line_end":237,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88982,"byte_end":88985,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"pub fn new(R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88795,"byte_end":88867,"line_start":244,"line_end":244,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88872,"byte_end":88950,"line_start":245,"line_end":245,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88955,"byte_end":88970,"line_start":246,"line_end":246,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89245,"byte_end":89251,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89159,"byte_end":89233,"line_start":255,"line_end":255,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89383,"byte_end":89390,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89321,"byte_end":89371,"line_start":260,"line_end":260,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89657,"byte_end":89664,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89456,"byte_end":89514,"line_start":265,"line_end":265,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89519,"byte_end":89522,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89527,"byte_end":89599,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89604,"byte_end":89645,"line_start":268,"line_end":268,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89809,"byte_end":89819,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89738,"byte_end":89797,"line_start":273,"line_end":273,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1189},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91530,"byte_end":91539,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":90889,"byte_end":90917,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":90918,"byte_end":90921,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":90922,"byte_end":91001,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91002,"byte_end":91035,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91036,"byte_end":91039,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91040,"byte_end":91104,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91105,"byte_end":91108,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91109,"byte_end":91123,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91124,"byte_end":91127,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91128,"byte_end":91135,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91136,"byte_end":91164,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91165,"byte_end":91193,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91194,"byte_end":91227,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91228,"byte_end":91231,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91232,"byte_end":91310,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91311,"byte_end":91328,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91329,"byte_end":91332,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91333,"byte_end":91400,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91401,"byte_end":91442,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91443,"byte_end":91485,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91486,"byte_end":91493,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91494,"byte_end":91501,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92286,"byte_end":92289,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"pub fn new(W, Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91945,"byte_end":92014,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92019,"byte_end":92022,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92027,"byte_end":92098,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92103,"byte_end":92154,"line_start":59,"line_end":59,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92159,"byte_end":92162,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92167,"byte_end":92239,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ written to the stream `w`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92244,"byte_end":92274,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92448,"byte_end":92455,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92386,"byte_end":92436,"line_start":67,"line_end":67,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92712,"byte_end":92719,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92511,"byte_end":92569,"line_start":72,"line_end":72,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92574,"byte_end":92577,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92582,"byte_end":92654,"line_start":74,"line_end":74,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92659,"byte_end":92700,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93398,"byte_end":93408,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92783,"byte_end":92858,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92863,"byte_end":92866,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92871,"byte_end":92944,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":92949,"byte_end":93025,"line_start":83,"line_end":83,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93030,"byte_end":93073,"line_start":84,"line_end":84,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93078,"byte_end":93081,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93086,"byte_end":93098,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93103,"byte_end":93106,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93111,"byte_end":93185,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93190,"byte_end":93213,"line_start":89,"line_end":89,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93218,"byte_end":93221,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93226,"byte_end":93238,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93243,"byte_end":93246,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93251,"byte_end":93322,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":93327,"byte_end":93386,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94781,"byte_end":94787,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[{"value":"/ Finish encoding this stream, returning the underlying writer once the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94121,"byte_end":94194,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/ encoding is done.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94199,"byte_end":94220,"line_start":119,"line_end":119,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94225,"byte_end":94228,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94233,"byte_end":94309,"line_start":121,"line_end":121,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94314,"byte_end":94389,"line_start":122,"line_end":122,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94394,"byte_end":94464,"line_start":123,"line_end":123,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94469,"byte_end":94542,"line_start":124,"line_end":124,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94547,"byte_end":94596,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94601,"byte_end":94604,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94609,"byte_end":94621,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94626,"byte_end":94629,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94634,"byte_end":94705,"line_start":129,"line_end":129,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":94710,"byte_end":94769,"line_start":130,"line_end":130,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97251,"byte_end":97260,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96137,"byte_end":96165,"line_start":186,"line_end":186,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96166,"byte_end":96169,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96170,"byte_end":96249,"line_start":188,"line_end":188,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96250,"byte_end":96283,"line_start":189,"line_end":189,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96284,"byte_end":96287,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96288,"byte_end":96352,"line_start":191,"line_end":191,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96353,"byte_end":96356,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96357,"byte_end":96371,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96372,"byte_end":96375,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96376,"byte_end":96383,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96384,"byte_end":96412,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96413,"byte_end":96429,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96430,"byte_end":96458,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::{GzEncoder, GzDecoder};","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96459,"byte_end":96505,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96506,"byte_end":96509,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96510,"byte_end":96527,"line_start":201,"line_end":201,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96528,"byte_end":96600,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96601,"byte_end":96643,"line_start":203,"line_end":203,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96644,"byte_end":96685,"line_start":204,"line_end":204,"column_start":1,"column_end":42}},{"value":"/ #    assert_eq!(\"Hello World\", decode_writer(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96686,"byte_end":96752,"line_start":205,"line_end":205,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96753,"byte_end":96760,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a gzip encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96761,"byte_end":96841,"line_start":207,"line_end":207,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96842,"byte_end":96878,"line_start":208,"line_end":208,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96879,"byte_end":96939,"line_start":209,"line_end":209,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96940,"byte_end":96975,"line_start":210,"line_end":210,"column_start":1,"column_end":36}},{"value":"/    let mut decoder = GzDecoder::new(writer);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96976,"byte_end":97024,"line_start":211,"line_end":211,"column_start":1,"column_end":49}},{"value":"/    decoder.write_all(&bytes[..])?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97025,"byte_end":97063,"line_start":212,"line_end":212,"column_start":1,"column_end":39}},{"value":"/    writer = decoder.finish()?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97064,"byte_end":97098,"line_start":213,"line_end":213,"column_start":1,"column_end":35}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97099,"byte_end":97183,"line_start":214,"line_end":214,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97184,"byte_end":97208,"line_start":215,"line_end":215,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97209,"byte_end":97214,"line_start":216,"line_end":216,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97215,"byte_end":97222,"line_start":217,"line_end":217,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97667,"byte_end":97670,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"pub fn new(W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97472,"byte_end":97547,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97552,"byte_end":97555,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97560,"byte_end":97635,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97640,"byte_end":97655,"line_start":232,"line_end":232,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97999,"byte_end":98005,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"pub fn header(&Self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97936,"byte_end":97987,"line_start":242,"line_end":242,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98138,"byte_end":98145,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98076,"byte_end":98126,"line_start":247,"line_end":247,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98432,"byte_end":98439,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98211,"byte_end":98269,"line_start":252,"line_end":252,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98274,"byte_end":98277,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98282,"byte_end":98358,"line_start":254,"line_end":254,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98363,"byte_end":98420,"line_start":255,"line_end":255,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99092,"byte_end":99102,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98513,"byte_end":98588,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98593,"byte_end":98596,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98601,"byte_end":98674,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98679,"byte_end":98755,"line_start":263,"line_end":263,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98760,"byte_end":98803,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98808,"byte_end":98811,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98816,"byte_end":98828,"line_start":266,"line_end":266,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98833,"byte_end":98836,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98841,"byte_end":98915,"line_start":268,"line_end":268,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98920,"byte_end":98943,"line_start":269,"line_end":269,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98948,"byte_end":98951,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98956,"byte_end":98968,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98973,"byte_end":98976,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":98981,"byte_end":99051,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99056,"byte_end":99080,"line_start":274,"line_end":274,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99941,"byte_end":99947,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this decoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99198,"byte_end":99252,"line_start":280,"line_end":280,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99257,"byte_end":99260,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99265,"byte_end":99341,"line_start":282,"line_end":282,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99346,"byte_end":99380,"line_start":283,"line_end":283,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99385,"byte_end":99388,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99393,"byte_end":99469,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99474,"byte_end":99549,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99554,"byte_end":99624,"line_start":287,"line_end":287,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99629,"byte_end":99702,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99707,"byte_end":99756,"line_start":289,"line_end":289,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99761,"byte_end":99764,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99769,"byte_end":99781,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99786,"byte_end":99789,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99794,"byte_end":99865,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":99870,"byte_end":99929,"line_start":294,"line_end":294,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1207},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51729,"byte_end":51737,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[{"value":"/ A structure representing the header of a gzip stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51524,"byte_end":51581,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51582,"byte_end":51585,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The header can contain metadata about the file that was compressed, if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51586,"byte_end":51660,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ present.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51661,"byte_end":51673,"line_start":20,"line_end":20,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51980,"byte_end":51988,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"pub fn filename(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `filename` field of this gzip stream's header, if present.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51894,"byte_end":51968,"line_start":31,"line_end":31,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52156,"byte_end":52161,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"pub fn extra(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `extra` field of this gzip stream's header, if present.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52073,"byte_end":52144,"line_start":36,"line_end":36,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52328,"byte_end":52335,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"pub fn comment(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `comment` field of this gzip stream's header, if present.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52243,"byte_end":52316,"line_start":41,"line_end":41,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52621,"byte_end":52637,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"pub fn operating_system(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[{"value":"/ Returns the `operating_system` field of this gzip stream's header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52419,"byte_end":52489,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52494,"byte_end":52497,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ There are predefined values for various operating systems.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52502,"byte_end":52564,"line_start":48,"line_end":48,"column_start":5,"column_end":67}},{"value":"/ 255 means that the value is unknown.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52569,"byte_end":52609,"line_start":49,"line_end":49,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53259,"byte_end":53264,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"pub fn mtime(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[{"value":"/ This gives the most recent modification time of the original file being compressed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52694,"byte_end":52781,"line_start":54,"line_end":54,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52786,"byte_end":52789,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The time is in Unix format, i.e., seconds since 00:00:00 GMT, Jan. 1, 1970.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52794,"byte_end":52873,"line_start":56,"line_end":56,"column_start":5,"column_end":84}},{"value":"/ (Note that this may cause problems for MS-DOS and other systems that use local","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52878,"byte_end":52960,"line_start":57,"line_end":57,"column_start":5,"column_end":87}},{"value":"/ rather than Universal time.) If the compressed data did not come from a file,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":52965,"byte_end":53046,"line_start":58,"line_end":58,"column_start":5,"column_end":86}},{"value":"/ `mtime` is set to the time at which compression started.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53051,"byte_end":53111,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ `mtime` = 0 means no time stamp is available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53116,"byte_end":53165,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53170,"byte_end":53173,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The usage of `mtime` is discouraged because of Year 2038 problem.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53178,"byte_end":53247,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53659,"byte_end":53676,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"pub fn mtime_as_datetime(&Self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[{"value":"/ Returns the most recent modification time represented by a date-time type.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53311,"byte_end":53389,"line_start":67,"line_end":67,"column_start":5,"column_end":83}},{"value":"/ Returns `None` if the value of the underlying counter is 0,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53394,"byte_end":53457,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/ indicating no time stamp is available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53462,"byte_end":53504,"line_start":69,"line_end":69,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53509,"byte_end":53512,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53517,"byte_end":53520,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The time is measured as seconds since 00:00:00 GMT, Jan. 1 1970.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53525,"byte_end":53593,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ See [`mtime`](#method.mtime) for more detail.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53598,"byte_end":53647,"line_start":73,"line_end":73,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1223},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54749,"byte_end":54758,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[{"value":"/ A builder structure to create a new gzip Encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":53953,"byte_end":54006,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54007,"byte_end":54010,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This structure controls header configuration options such as the filename.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54011,"byte_end":54089,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54090,"byte_end":54093,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54094,"byte_end":54108,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54109,"byte_end":54112,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54113,"byte_end":54120,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54121,"byte_end":54149,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ # use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54150,"byte_end":54168,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54169,"byte_end":54191,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/ use flate2::GzBuilder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54192,"byte_end":54218,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54219,"byte_end":54247,"line_start":96,"line_end":96,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54248,"byte_end":54251,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // GzBuilder opens a file and writes a sample string using GzBuilder pattern","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54252,"byte_end":54332,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54333,"byte_end":54336,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ # fn sample_builder() -> Result<(), io::Error> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54337,"byte_end":54389,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"/ let f = File::create(\"examples/hello_world.gz\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54390,"byte_end":54443,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/ let mut gz = GzBuilder::new()","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54444,"byte_end":54477,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/                 .filename(\"hello_world.txt\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54478,"byte_end":54526,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/                 .comment(\"test file, please delete\")","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54527,"byte_end":54583,"line_start":104,"line_end":104,"column_start":1,"column_end":57}},{"value":"/                 .write(f, Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54584,"byte_end":54638,"line_start":105,"line_end":105,"column_start":1,"column_end":55}},{"value":"/ gz.write_all(b\"hello world\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54639,"byte_end":54673,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ gz.finish()?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54674,"byte_end":54691,"line_start":107,"line_end":107,"column_start":1,"column_end":18}},{"value":"/ # Ok(())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54692,"byte_end":54704,"line_start":108,"line_end":108,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54705,"byte_end":54712,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54713,"byte_end":54720,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54993,"byte_end":54996,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"pub fn new() -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[{"value":"/ Create a new blank builder with no header by default.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54924,"byte_end":54981,"line_start":121,"line_end":121,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55256,"byte_end":55261,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"pub fn mtime(Self, u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `mtime` field in the gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55193,"byte_end":55244,"line_start":132,"line_end":132,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55425,"byte_end":55441,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"pub fn operating_system(Self, u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `operating_system` field in the gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55351,"byte_end":55413,"line_start":138,"line_end":138,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55604,"byte_end":55609,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"pub fn extra<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `extra` field in the gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55541,"byte_end":55592,"line_start":144,"line_end":144,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55883,"byte_end":55891,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"pub fn filename<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `filename` field in the gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55728,"byte_end":55782,"line_start":150,"line_end":150,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55787,"byte_end":55790,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55795,"byte_end":55807,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55812,"byte_end":55815,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Panics if the `filename` slice contains a zero.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":55820,"byte_end":55871,"line_start":154,"line_end":154,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56195,"byte_end":56202,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"pub fn comment<T: Into<Vec<u8>>>(Self, T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `comment` field in the gzip header.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56042,"byte_end":56095,"line_start":160,"line_end":160,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56100,"byte_end":56103,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56108,"byte_end":56120,"line_start":162,"line_end":162,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56125,"byte_end":56128,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Panics if the `comment` slice contains a zero.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56133,"byte_end":56183,"line_start":164,"line_end":164,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56565,"byte_end":56570,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"pub fn write<W: Write>(Self, W, Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a writer encoder in the process.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56350,"byte_end":56417,"line_start":170,"line_end":170,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56422,"byte_end":56425,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56430,"byte_end":56502,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"/ written out to the supplied parameter `w`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56507,"byte_end":56553,"line_start":173,"line_end":173,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56914,"byte_end":56918,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"pub fn read<R: Read>(Self, R, Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56704,"byte_end":56771,"line_start":178,"line_end":178,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56776,"byte_end":56779,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56784,"byte_end":56857,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":56862,"byte_end":56902,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":57267,"byte_end":57275,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"pub fn buf_read<R>(Self, R, Compression) -> bufread::GzEncoder<R> where\nR: BufRead","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":57057,"byte_end":57124,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":57129,"byte_end":57132,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":57137,"byte_end":57210,"line_start":188,"line_end":188,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":57215,"byte_end":57255,"line_start":189,"line_end":189,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1231},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107035,"byte_end":107043,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":1232}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory compression stream for blocks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106430,"byte_end":106486,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106487,"byte_end":106490,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106491,"byte_end":106566,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106567,"byte_end":106644,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106645,"byte_end":106721,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106722,"byte_end":106772,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106773,"byte_end":106776,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106777,"byte_end":106855,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106856,"byte_end":106874,"line_start":17,"line_end":17,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106875,"byte_end":106878,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106879,"byte_end":106941,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":106942,"byte_end":107006,"line_start":20,"line_end":20,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1235},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107676,"byte_end":107686,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":1236}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory decompression stream for blocks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107069,"byte_end":107127,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107128,"byte_end":107131,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107132,"byte_end":107207,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107208,"byte_end":107285,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107286,"byte_end":107362,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107363,"byte_end":107413,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107414,"byte_end":107417,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107418,"byte_end":107496,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107497,"byte_end":107515,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107516,"byte_end":107519,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107520,"byte_end":107582,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107583,"byte_end":107647,"line_start":37,"line_end":37,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1240},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108115,"byte_end":108119,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107881,"byte_end":107956,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107961,"byte_end":108033,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108038,"byte_end":108110,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108570,"byte_end":108574,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108154,"byte_end":108226,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108231,"byte_end":108304,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108309,"byte_end":108335,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108340,"byte_end":108343,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108348,"byte_end":108423,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108428,"byte_end":108501,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108506,"byte_end":108565,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1246},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109107,"byte_end":109114,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer, but the output is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108611,"byte_end":108684,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ not aligned to a byte boundary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108689,"byte_end":108724,"line_start":62,"line_end":62,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108729,"byte_end":108732,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ All of the input data so far will be available to the decompressor (as","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108737,"byte_end":108811,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/ with `Flush::Sync`. This completes the current deflate block and follows","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108816,"byte_end":108892,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/ it with an empty fixed codes block that is 10 bites long, and it assures","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108897,"byte_end":108973,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ that enough bytes are output in order for the decompessor to finish the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":108978,"byte_end":109053,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ block before the empty fixed code block.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109058,"byte_end":109102,"line_start":68,"line_end":68,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109458,"byte_end":109462,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[{"value":"/ All output is flushed as with `Flush::Sync` and the compression state is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109154,"byte_end":109230,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ reset so decompression can restart from this point if previous","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109235,"byte_end":109301,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ compressed data has been damaged or if random access is desired.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109306,"byte_end":109374,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109379,"byte_end":109382,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Using this option too often can seriously degrade compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109387,"byte_end":109453,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1252},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109690,"byte_end":109696,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109499,"byte_end":109560,"line_start":78,"line_end":78,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109565,"byte_end":109568,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109573,"byte_end":109647,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109652,"byte_end":109685,"line_start":81,"line_end":81,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109748,"byte_end":109762,"line_start":85,"line_end":85,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1239},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107861,"byte_end":107874,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"pub enum FlushCompress {\n    None = ,\n    Sync = ,\n    Partial = ,\n    Full = ,\n    Finish = ,\n    _Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1240},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1255}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when compressing","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107757,"byte_end":107831,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ in-memory data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":107832,"byte_end":107851,"line_start":45,"line_end":45,"column_start":1,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110174,"byte_end":110178,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109940,"byte_end":110015,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110020,"byte_end":110092,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110097,"byte_end":110169,"line_start":94,"line_end":94,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1272},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110629,"byte_end":110633,"line_start":104,"line_end":104,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110213,"byte_end":110285,"line_start":97,"line_end":97,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110290,"byte_end":110363,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110368,"byte_end":110394,"line_start":99,"line_end":99,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110399,"byte_end":110402,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110407,"byte_end":110482,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110487,"byte_end":110560,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110565,"byte_end":110624,"line_start":103,"line_end":103,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110861,"byte_end":110867,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110670,"byte_end":110731,"line_start":106,"line_end":106,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110736,"byte_end":110739,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110744,"byte_end":110818,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110823,"byte_end":110856,"line_start":109,"line_end":109,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1278},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":110919,"byte_end":110933,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1268},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109918,"byte_end":109933,"line_start":91,"line_end":91,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"pub enum FlushDecompress { None = , Sync = , Finish = , _Nonexhaustive, }","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109812,"byte_end":109874,"line_start":89,"line_end":89,"column_start":1,"column_end":63}},{"value":"/ decompressing in-memory data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":109875,"byte_end":109908,"line_start":90,"line_end":90,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1297},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111261,"byte_end":111276,"line_start":125,"line_end":125,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[{"value":"/ Error returned when a decompression object finds that the input stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111106,"byte_end":111183,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ bytes was not a valid input stream of bytes.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111184,"byte_end":111232,"line_start":123,"line_end":123,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111523,"byte_end":111539,"line_start":132,"line_end":132,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"pub fn needs_dictionary(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[{"value":"/ Indicates whether decompression failed due to requiring a dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111339,"byte_end":111412,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111417,"byte_end":111420,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The resulting integer is the Adler-32 checksum of the dictionary","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111425,"byte_end":111493,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ required.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111498,"byte_end":111511,"line_start":131,"line_end":131,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1302},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112055,"byte_end":112068,"line_start":152,"line_end":152,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[{"value":"/ Error returned when a compression object is used incorrectly or otherwise","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111925,"byte_end":112002,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/ generates an error.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112003,"byte_end":112026,"line_start":150,"line_end":150,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1308},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112436,"byte_end":112438,"line_start":162,"line_end":162,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[{"value":"/ Indicates success.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112257,"byte_end":112279,"line_start":158,"line_end":158,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112284,"byte_end":112287,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Means that more input may be needed but isn't available","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112292,"byte_end":112351,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/ and/or there's more output to be written but the output buffer is full.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112356,"byte_end":112431,"line_start":161,"line_end":161,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1310},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112917,"byte_end":112925,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[{"value":"/ Indicates that forward progress is not possible due to input or output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112445,"byte_end":112519,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ buffers being empty.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112524,"byte_end":112548,"line_start":165,"line_end":165,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112553,"byte_end":112556,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ For compression it means the input buffer needs some more data or the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112561,"byte_end":112634,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ output buffer needs to be freed up before trying again.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112639,"byte_end":112698,"line_start":168,"line_end":168,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112703,"byte_end":112706,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ For decompression this means that more input is needed to continue or","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112711,"byte_end":112784,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ the output buffer isn't large enough to contain the result. The function","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112789,"byte_end":112865,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ can be called again after fixing both.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112870,"byte_end":112912,"line_start":172,"line_end":172,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1312},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113207,"byte_end":113216,"line_start":180,"line_end":180,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[{"value":"/ Indicates that all input has been consumed and all output bytes have","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112932,"byte_end":113004,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ been written. Decompression/compression should not be called again.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113009,"byte_end":113080,"line_start":176,"line_end":176,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113085,"byte_end":113088,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ For decompression with zlib streams the adler-32 of the decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113093,"byte_end":113165,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ data has also been verified.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113170,"byte_end":113202,"line_start":179,"line_end":179,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":1307},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112244,"byte_end":112250,"line_start":157,"line_end":157,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"pub enum Status { Ok, BufError, StreamEnd, }","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1312}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"/ Possible status results of compressing some data or successfully","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112086,"byte_end":112154,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/ decompressing a block of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":112155,"byte_end":112189,"line_start":155,"line_end":155,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113540,"byte_end":113543,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"pub fn new(Compression, bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for compressing data that it's given.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113241,"byte_end":113309,"line_start":184,"line_end":184,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113314,"byte_end":113317,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here indicates what level of compression is going","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113322,"byte_end":113396,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ to be performed, and the `zlib_header` argument indicates whether the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113401,"byte_end":113474,"line_start":187,"line_end":187,"column_start":5,"column_end":78}},{"value":"/ output data should have a zlib header or not.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113479,"byte_end":113528,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":115932,"byte_end":115940,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":115815,"byte_end":115887,"line_start":255,"line_end":255,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":115892,"byte_end":115920,"line_start":256,"line_end":256,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":116115,"byte_end":116124,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":115998,"byte_end":116070,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":116075,"byte_end":116103,"line_start":262,"line_end":262,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":117066,"byte_end":117071,"line_start":288,"line_end":288,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[{"value":"/ Quickly resets this compressor without having to reallocate anything.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":116893,"byte_end":116966,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":116971,"byte_end":116974,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to dropping this object and then creating a new one.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":116979,"byte_end":117054,"line_start":287,"line_end":287,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118556,"byte_end":118564,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"pub fn compress(&mut Self, &[u8], &mut [u8], FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the output, consuming only as much","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118155,"byte_end":118224,"line_start":316,"line_end":316,"column_start":5,"column_end":74}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118229,"byte_end":118288,"line_start":317,"line_end":317,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118293,"byte_end":118296,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushCompress` parameters.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118301,"byte_end":118377,"line_start":319,"line_end":319,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118382,"byte_end":118385,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118390,"byte_end":118466,"line_start":321,"line_end":321,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118471,"byte_end":118544,"line_start":322,"line_end":322,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119265,"byte_end":119277,"line_start":340,"line_end":340,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"pub fn compress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushCompress)\n-> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the extra space of the output, consuming","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118766,"byte_end":118841,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/ only as much input as needed and writing as much output as possible.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118846,"byte_end":118918,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118923,"byte_end":118926,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `compress`, except that the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":118931,"byte_end":119002,"line_start":335,"line_end":335,"column_start":5,"column_end":76}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119007,"byte_end":119080,"line_start":336,"line_end":336,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119085,"byte_end":119160,"line_start":337,"line_end":337,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119165,"byte_end":119235,"line_start":338,"line_end":338,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119240,"byte_end":119253,"line_start":339,"line_end":339,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":120121,"byte_end":120124,"line_start":367,"line_end":367,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"pub fn new(bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for decompressing data that it's given.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119913,"byte_end":119983,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119988,"byte_end":119991,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ The `zlib_header` argument indicates whether the input data is expected","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119996,"byte_end":120071,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ to have a zlib header or not.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":120076,"byte_end":120109,"line_start":366,"line_end":366,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122209,"byte_end":122217,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122090,"byte_end":122162,"line_start":424,"line_end":424,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122167,"byte_end":122197,"line_start":425,"line_end":425,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122394,"byte_end":122403,"line_start":432,"line_end":432,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122275,"byte_end":122347,"line_start":430,"line_end":430,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122352,"byte_end":122382,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123602,"byte_end":123612,"line_start":458,"line_end":458,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"pub fn decompress(&mut Self, &[u8], &mut [u8], FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the output, consuming only as much","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122462,"byte_end":122533,"line_start":436,"line_end":436,"column_start":5,"column_end":76}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122538,"byte_end":122597,"line_start":437,"line_end":437,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122602,"byte_end":122605,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushDecompress` parameters.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122610,"byte_end":122688,"line_start":439,"line_end":439,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122693,"byte_end":122696,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ If the first call passes `FlushDecompress::Finish` it is assumed that","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122701,"byte_end":122774,"line_start":441,"line_end":441,"column_start":5,"column_end":78}},{"value":"/ the input and output buffers are both sized large enough to decompress","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122779,"byte_end":122853,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ the entire stream in a single call.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122858,"byte_end":122897,"line_start":443,"line_end":443,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122902,"byte_end":122905,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ A flush value of `FlushDecompress::Finish` indicates that there are no","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122910,"byte_end":122984,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/ more source bytes available beside what's already in the input buffer,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":122989,"byte_end":123063,"line_start":446,"line_end":446,"column_start":5,"column_end":79}},{"value":"/ and the output buffer is large enough to hold the rest of the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123068,"byte_end":123133,"line_start":447,"line_end":447,"column_start":5,"column_end":70}},{"value":"/ decompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123138,"byte_end":123160,"line_start":448,"line_end":448,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123165,"byte_end":123168,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123173,"byte_end":123249,"line_start":450,"line_end":450,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123254,"byte_end":123327,"line_start":451,"line_end":451,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123332,"byte_end":123335,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123340,"byte_end":123352,"line_start":453,"line_end":453,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123357,"byte_end":123360,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123365,"byte_end":123434,"line_start":455,"line_end":455,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123439,"byte_end":123507,"line_start":456,"line_end":456,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123512,"byte_end":123590,"line_start":457,"line_end":457,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124536,"byte_end":124550,"line_start":481,"line_end":481,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"pub fn decompress_vec(&mut Self, &[u8], &mut Vec<u8>, FlushDecompress)\n-> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the extra space in the output vector","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123820,"byte_end":123893,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/ specified by `output`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123898,"byte_end":123924,"line_start":468,"line_end":468,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123929,"byte_end":123932,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `decompress`, except that the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":123937,"byte_end":124010,"line_start":470,"line_end":470,"column_start":5,"column_end":78}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124015,"byte_end":124088,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124093,"byte_end":124168,"line_start":472,"line_end":472,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124173,"byte_end":124243,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124248,"byte_end":124261,"line_start":474,"line_end":474,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124266,"byte_end":124269,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124274,"byte_end":124286,"line_start":476,"line_end":476,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124291,"byte_end":124294,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124299,"byte_end":124368,"line_start":478,"line_end":478,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124373,"byte_end":124441,"line_start":479,"line_end":479,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":124446,"byte_end":124524,"line_start":480,"line_end":480,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126374,"byte_end":126379,"line_start":529,"line_end":529,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"pub fn reset(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[{"value":"/ Performs the equivalent of replacing this decompression state with a","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":125994,"byte_end":126066,"line_start":521,"line_end":521,"column_start":5,"column_end":77}},{"value":"/ freshly allocated copy.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126071,"byte_end":126098,"line_start":522,"line_end":522,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126103,"byte_end":126106,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ This function may not allocate memory, though, and attempts to reuse any","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126111,"byte_end":126187,"line_start":524,"line_end":524,"column_start":5,"column_end":81}},{"value":"/ previously existing resources.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126192,"byte_end":126226,"line_start":525,"line_end":525,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126231,"byte_end":126234,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ The argument provided here indicates whether the reset state will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126239,"byte_end":126308,"line_start":527,"line_end":527,"column_start":5,"column_end":74}},{"value":"/ attempt to decode a zlib header first or not.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126313,"byte_end":126362,"line_start":528,"line_end":528,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":735},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":133610,"byte_end":133615,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":734},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147462,"byte_end":147473,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146633,"byte_end":146667,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146668,"byte_end":146671,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading uncompressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146672,"byte_end":146750,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ from the underlying reader, and emitting compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146751,"byte_end":146812,"line_start":16,"line_end":16,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146813,"byte_end":146816,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146817,"byte_end":146885,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146886,"byte_end":146889,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146890,"byte_end":146904,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146905,"byte_end":146908,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146909,"byte_end":146916,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146917,"byte_end":146945,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146946,"byte_end":146974,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":146975,"byte_end":147012,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147013,"byte_end":147035,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147036,"byte_end":147063,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147064,"byte_end":147067,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Use a buffered file to compress contents into a Vec<u8>","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147068,"byte_end":147130,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147131,"byte_end":147134,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147135,"byte_end":147192,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147193,"byte_end":147245,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/ let b = BufReader::new(f);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147246,"byte_end":147276,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let mut z = ZlibEncoder::new(b, Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147277,"byte_end":147334,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147335,"byte_end":147367,"line_start":35,"line_end":35,"column_start":1,"column_end":33}},{"value":"/ z.read_to_end(&mut buffer)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147368,"byte_end":147400,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ # Ok(buffer)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147401,"byte_end":147417,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147418,"byte_end":147425,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147426,"byte_end":147433,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147685,"byte_end":147688,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147552,"byte_end":147626,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147631,"byte_end":147673,"line_start":48,"line_end":48,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148340,"byte_end":148345,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147961,"byte_end":148030,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148035,"byte_end":148058,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148063,"byte_end":148066,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148071,"byte_end":148146,"line_start":65,"line_end":65,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148151,"byte_end":148223,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148228,"byte_end":148297,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148302,"byte_end":148328,"line_start":68,"line_end":68,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148515,"byte_end":148522,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148454,"byte_end":148503,"line_start":74,"line_end":74,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148767,"byte_end":148774,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148567,"byte_end":148624,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148629,"byte_end":148632,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148637,"byte_end":148709,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148714,"byte_end":148755,"line_start":82,"line_end":82,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148902,"byte_end":148912,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148831,"byte_end":148890,"line_start":87,"line_end":87,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149183,"byte_end":149191,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":148954,"byte_end":149027,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149032,"byte_end":149035,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149040,"byte_end":149116,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149121,"byte_end":149171,"line_start":95,"line_end":95,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149425,"byte_end":149434,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149248,"byte_end":149313,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149318,"byte_end":149321,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149326,"byte_end":149395,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149400,"byte_end":149413,"line_start":103,"line_end":103,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151213,"byte_end":151224,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150165,"byte_end":150201,"line_start":135,"line_end":135,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150202,"byte_end":150205,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This structure consumes a [`BufRead`] interface, reading compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150206,"byte_end":150282,"line_start":137,"line_end":137,"column_start":1,"column_end":77}},{"value":"/ from the underlying reader, and emitting uncompressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150283,"byte_end":150346,"line_start":138,"line_end":138,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150347,"byte_end":150350,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150351,"byte_end":150419,"line_start":140,"line_end":140,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150420,"byte_end":150423,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150424,"byte_end":150438,"line_start":142,"line_end":142,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150439,"byte_end":150442,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150443,"byte_end":150450,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150451,"byte_end":150479,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150480,"byte_end":150496,"line_start":146,"line_end":146,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150497,"byte_end":150527,"line_start":147,"line_end":147,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150528,"byte_end":150565,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/ use flate2::bufread::ZlibDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150566,"byte_end":150603,"line_start":149,"line_end":149,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150604,"byte_end":150607,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150608,"byte_end":150625,"line_start":151,"line_end":151,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150626,"byte_end":150697,"line_start":152,"line_end":152,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150698,"byte_end":150741,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150742,"byte_end":150780,"line_start":154,"line_end":154,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_bufreader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150781,"byte_end":150836,"line_start":155,"line_end":155,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150837,"byte_end":150844,"line_start":156,"line_end":156,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150845,"byte_end":150850,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150851,"byte_end":150931,"line_start":158,"line_end":158,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150932,"byte_end":150968,"line_start":159,"line_end":159,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150969,"byte_end":150972,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ fn decode_bufreader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":150973,"byte_end":151036,"line_start":161,"line_end":161,"column_start":1,"column_end":64}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151037,"byte_end":151086,"line_start":162,"line_end":162,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151087,"byte_end":151121,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151122,"byte_end":151156,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151157,"byte_end":151170,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151171,"byte_end":151176,"line_start":166,"line_end":166,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151177,"byte_end":151184,"line_start":167,"line_end":167,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151405,"byte_end":151408,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151305,"byte_end":151377,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151382,"byte_end":151393,"line_start":176,"line_end":176,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152038,"byte_end":152043,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151666,"byte_end":151735,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151740,"byte_end":151763,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151768,"byte_end":151771,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151776,"byte_end":151846,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151851,"byte_end":151919,"line_start":194,"line_end":194,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151924,"byte_end":151995,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152000,"byte_end":152026,"line_start":196,"line_end":196,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152213,"byte_end":152220,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152152,"byte_end":152201,"line_start":202,"line_end":202,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152465,"byte_end":152472,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152265,"byte_end":152322,"line_start":207,"line_end":207,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152327,"byte_end":152330,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152335,"byte_end":152407,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152412,"byte_end":152453,"line_start":210,"line_end":210,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152600,"byte_end":152610,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152529,"byte_end":152588,"line_start":215,"line_end":215,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152879,"byte_end":152887,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152652,"byte_end":152719,"line_start":220,"line_end":220,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152724,"byte_end":152727,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152732,"byte_end":152800,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152805,"byte_end":152867,"line_start":223,"line_end":223,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":153023,"byte_end":153032,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":152944,"byte_end":153011,"line_start":228,"line_end":228,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1349},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154779,"byte_end":154790,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1351}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":153969,"byte_end":154003,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154004,"byte_end":154007,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154008,"byte_end":154085,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154086,"byte_end":154158,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154159,"byte_end":154162,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154163,"byte_end":154225,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154226,"byte_end":154229,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154230,"byte_end":154244,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154245,"byte_end":154248,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154249,"byte_end":154256,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154257,"byte_end":154285,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154286,"byte_end":154314,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154315,"byte_end":154349,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154350,"byte_end":154372,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154373,"byte_end":154376,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Open example file and compress the contents using Read interface","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154377,"byte_end":154448,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154449,"byte_end":154452,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154453,"byte_end":154510,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154511,"byte_end":154563,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/ let mut z = ZlibEncoder::new(f, Compression::fast());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154564,"byte_end":154621,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = [0;50];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154622,"byte_end":154650,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ let byte_count = z.read(&mut buffer)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154651,"byte_end":154693,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ # Ok(buffer[0..byte_count].to_vec())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154694,"byte_end":154734,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154735,"byte_end":154742,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154743,"byte_end":154750,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155014,"byte_end":155017,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"pub fn new(R, crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154881,"byte_end":154955,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154960,"byte_end":155002,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155742,"byte_end":155747,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155213,"byte_end":155282,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155287,"byte_end":155310,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155315,"byte_end":155318,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155323,"byte_end":155398,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155403,"byte_end":155475,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155480,"byte_end":155549,"line_start":58,"line_end":58,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155554,"byte_end":155580,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155585,"byte_end":155588,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155593,"byte_end":155665,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155670,"byte_end":155730,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155943,"byte_end":155950,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155882,"byte_end":155931,"line_start":68,"line_end":68,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156216,"byte_end":156223,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156016,"byte_end":156073,"line_start":73,"line_end":73,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156078,"byte_end":156081,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156086,"byte_end":156158,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156163,"byte_end":156204,"line_start":76,"line_end":76,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156564,"byte_end":156574,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156297,"byte_end":156356,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156361,"byte_end":156364,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156369,"byte_end":156444,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156449,"byte_end":156522,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156527,"byte_end":156552,"line_start":85,"line_end":85,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156873,"byte_end":156881,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156644,"byte_end":156717,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156722,"byte_end":156725,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156730,"byte_end":156806,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156811,"byte_end":156861,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157116,"byte_end":157125,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":156939,"byte_end":157004,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157009,"byte_end":157012,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157017,"byte_end":157086,"line_start":100,"line_end":100,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157091,"byte_end":157104,"line_start":101,"line_end":101,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1355},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158858,"byte_end":158869,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1357}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157818,"byte_end":157854,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157855,"byte_end":157858,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157859,"byte_end":157931,"line_start":135,"line_end":135,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157932,"byte_end":158009,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158010,"byte_end":158013,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158014,"byte_end":158076,"line_start":138,"line_end":138,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158077,"byte_end":158080,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158081,"byte_end":158095,"line_start":140,"line_end":140,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158096,"byte_end":158099,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158100,"byte_end":158107,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158108,"byte_end":158136,"line_start":143,"line_end":143,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158137,"byte_end":158153,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158154,"byte_end":158184,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158185,"byte_end":158222,"line_start":146,"line_end":146,"column_start":1,"column_end":38}},{"value":"/ use flate2::read::ZlibDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158223,"byte_end":158257,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158258,"byte_end":158261,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158262,"byte_end":158279,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158280,"byte_end":158351,"line_start":150,"line_end":150,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158352,"byte_end":158395,"line_start":151,"line_end":151,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158396,"byte_end":158434,"line_start":152,"line_end":152,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158435,"byte_end":158487,"line_start":153,"line_end":153,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158488,"byte_end":158495,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158496,"byte_end":158501,"line_start":155,"line_end":155,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158502,"byte_end":158582,"line_start":156,"line_end":156,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158583,"byte_end":158616,"line_start":157,"line_end":157,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158617,"byte_end":158620,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158621,"byte_end":158681,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158682,"byte_end":158731,"line_start":160,"line_end":160,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158732,"byte_end":158766,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158767,"byte_end":158801,"line_start":162,"line_end":162,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158802,"byte_end":158815,"line_start":163,"line_end":163,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158816,"byte_end":158821,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158822,"byte_end":158829,"line_start":165,"line_end":165,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159060,"byte_end":159063,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"pub fn new(R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158960,"byte_end":159032,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159037,"byte_end":159048,"line_start":173,"line_end":173,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159390,"byte_end":159402,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"pub fn new_with_buf(R, Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159158,"byte_end":159227,"line_start":178,"line_end":178,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159232,"byte_end":159235,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Note that the specified buffer will only be used up to its current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159240,"byte_end":159310,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ length. The buffer's capacity will also not grow over time.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159315,"byte_end":159378,"line_start":181,"line_end":181,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160110,"byte_end":160115,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"pub fn reset(&mut Self, R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159588,"byte_end":159657,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159662,"byte_end":159685,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159690,"byte_end":159693,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159698,"byte_end":159768,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159773,"byte_end":159841,"line_start":194,"line_end":194,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159846,"byte_end":159917,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159922,"byte_end":159948,"line_start":196,"line_end":196,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159953,"byte_end":159956,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159961,"byte_end":160033,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160038,"byte_end":160098,"line_start":199,"line_end":199,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160311,"byte_end":160318,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160250,"byte_end":160299,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160584,"byte_end":160591,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160384,"byte_end":160441,"line_start":210,"line_end":210,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160446,"byte_end":160449,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160454,"byte_end":160526,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160531,"byte_end":160572,"line_start":213,"line_end":213,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160932,"byte_end":160942,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160665,"byte_end":160724,"line_start":218,"line_end":218,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160729,"byte_end":160732,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160737,"byte_end":160812,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160817,"byte_end":160890,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":160895,"byte_end":160920,"line_start":222,"line_end":222,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161239,"byte_end":161247,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161012,"byte_end":161079,"line_start":227,"line_end":227,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161084,"byte_end":161087,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161092,"byte_end":161160,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161165,"byte_end":161227,"line_start":230,"line_end":230,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161384,"byte_end":161393,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161305,"byte_end":161372,"line_start":235,"line_end":235,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1361},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163005,"byte_end":163016,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1363}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162290,"byte_end":162324,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162325,"byte_end":162328,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162329,"byte_end":162402,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162403,"byte_end":162476,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162477,"byte_end":162480,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162481,"byte_end":162545,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162546,"byte_end":162549,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162550,"byte_end":162564,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162565,"byte_end":162568,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162569,"byte_end":162576,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162577,"byte_end":162605,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162606,"byte_end":162634,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162635,"byte_end":162670,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162671,"byte_end":162674,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write, assigning the compressed bytes of sample string","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162675,"byte_end":162755,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162756,"byte_end":162759,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # fn zlib_encoding() -> std::io::Result<()> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162760,"byte_end":162809,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/ let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162810,"byte_end":162879,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ e.write_all(b\"Hello World\")?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162880,"byte_end":162913,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/ let compressed = e.finish()?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162914,"byte_end":162947,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ # Ok(())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162948,"byte_end":162960,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162961,"byte_end":162968,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":162969,"byte_end":162976,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163343,"byte_end":163346,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"pub fn new(W, crate::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163105,"byte_end":163177,"line_start":41,"line_end":41,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163182,"byte_end":163223,"line_start":42,"line_end":42,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163228,"byte_end":163231,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163236,"byte_end":163311,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163316,"byte_end":163331,"line_start":45,"line_end":45,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163573,"byte_end":163580,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163511,"byte_end":163561,"line_start":52,"line_end":52,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163857,"byte_end":163864,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163636,"byte_end":163694,"line_start":57,"line_end":57,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163699,"byte_end":163702,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163707,"byte_end":163783,"line_start":59,"line_end":59,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163788,"byte_end":163845,"line_start":60,"line_end":60,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164679,"byte_end":164684,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163928,"byte_end":163998,"line_start":65,"line_end":65,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164003,"byte_end":164026,"line_start":66,"line_end":66,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164031,"byte_end":164034,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164039,"byte_end":164113,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164118,"byte_end":164179,"line_start":69,"line_end":69,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164184,"byte_end":164187,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164192,"byte_end":164268,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164273,"byte_end":164341,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164346,"byte_end":164420,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164425,"byte_end":164494,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164499,"byte_end":164502,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164507,"byte_end":164519,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164524,"byte_end":164527,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164532,"byte_end":164603,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164608,"byte_end":164667,"line_start":79,"line_end":79,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165444,"byte_end":165454,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164829,"byte_end":164904,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164909,"byte_end":164912,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164917,"byte_end":164990,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":164995,"byte_end":165071,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165076,"byte_end":165119,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165124,"byte_end":165127,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165132,"byte_end":165144,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165149,"byte_end":165152,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165157,"byte_end":165231,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165236,"byte_end":165259,"line_start":95,"line_end":95,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165264,"byte_end":165267,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165272,"byte_end":165284,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165289,"byte_end":165292,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165297,"byte_end":165368,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165373,"byte_end":165432,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166289,"byte_end":166295,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165525,"byte_end":165579,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165584,"byte_end":165587,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165592,"byte_end":165664,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165669,"byte_end":165728,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165733,"byte_end":165736,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165741,"byte_end":165817,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165822,"byte_end":165897,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165902,"byte_end":165972,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":165977,"byte_end":166050,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166055,"byte_end":166104,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166109,"byte_end":166112,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166117,"byte_end":166129,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166134,"byte_end":166137,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166142,"byte_end":166213,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166218,"byte_end":166277,"line_start":119,"line_end":119,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166980,"byte_end":166992,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"pub fn flush_finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166402,"byte_end":166456,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166461,"byte_end":166464,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166469,"byte_end":166545,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166550,"byte_end":166584,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166589,"byte_end":166653,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166658,"byte_end":166728,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166733,"byte_end":166795,"line_start":131,"line_end":131,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166800,"byte_end":166803,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166808,"byte_end":166820,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166825,"byte_end":166828,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166833,"byte_end":166904,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":166909,"byte_end":166968,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167318,"byte_end":167326,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167098,"byte_end":167171,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167176,"byte_end":167179,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167184,"byte_end":167256,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167261,"byte_end":167306,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167569,"byte_end":167578,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167389,"byte_end":167454,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167459,"byte_end":167462,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167467,"byte_end":167539,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167544,"byte_end":167557,"line_start":153,"line_end":153,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1367},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169456,"byte_end":169467,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1369}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168302,"byte_end":168338,"line_start":186,"line_end":186,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168339,"byte_end":168342,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168343,"byte_end":168423,"line_start":188,"line_end":188,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168424,"byte_end":168470,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168471,"byte_end":168474,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168475,"byte_end":168539,"line_start":191,"line_end":191,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168540,"byte_end":168543,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168544,"byte_end":168558,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168559,"byte_end":168562,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168563,"byte_end":168570,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168571,"byte_end":168599,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168600,"byte_end":168616,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168617,"byte_end":168647,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168648,"byte_end":168685,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/ use flate2::write::ZlibDecoder;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168686,"byte_end":168721,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168722,"byte_end":168725,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168726,"byte_end":168743,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168744,"byte_end":168818,"line_start":203,"line_end":203,"column_start":1,"column_end":75}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168819,"byte_end":168865,"line_start":204,"line_end":204,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168866,"byte_end":168907,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168908,"byte_end":168963,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168964,"byte_end":168971,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168972,"byte_end":168977,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168978,"byte_end":169058,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169059,"byte_end":169095,"line_start":210,"line_end":210,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169096,"byte_end":169099,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169100,"byte_end":169160,"line_start":212,"line_end":212,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169161,"byte_end":169196,"line_start":213,"line_end":213,"column_start":1,"column_end":36}},{"value":"/    let mut z = ZlibDecoder::new(writer);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169197,"byte_end":169241,"line_start":214,"line_end":214,"column_start":1,"column_end":45}},{"value":"/    z.write_all(&bytes[..])?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169242,"byte_end":169274,"line_start":215,"line_end":215,"column_start":1,"column_end":33}},{"value":"/    writer = z.finish()?;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169275,"byte_end":169303,"line_start":216,"line_end":216,"column_start":1,"column_end":29}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169304,"byte_end":169388,"line_start":217,"line_end":217,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169389,"byte_end":169413,"line_start":218,"line_end":218,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169414,"byte_end":169419,"line_start":219,"line_end":219,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169420,"byte_end":169427,"line_start":220,"line_end":220,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169753,"byte_end":169756,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"pub fn new(W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169558,"byte_end":169633,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169638,"byte_end":169641,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ When this decoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169646,"byte_end":169721,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169726,"byte_end":169741,"line_start":230,"line_end":230,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169951,"byte_end":169958,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169889,"byte_end":169939,"line_start":237,"line_end":237,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170235,"byte_end":170242,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170014,"byte_end":170072,"line_start":242,"line_end":242,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170077,"byte_end":170080,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170085,"byte_end":170161,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170166,"byte_end":170223,"line_start":245,"line_end":245,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170856,"byte_end":170861,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"pub fn reset(&mut Self, W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170306,"byte_end":170376,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170381,"byte_end":170404,"line_start":251,"line_end":251,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170409,"byte_end":170412,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170417,"byte_end":170487,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170492,"byte_end":170562,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170567,"byte_end":170640,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170645,"byte_end":170671,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170676,"byte_end":170679,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170684,"byte_end":170696,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170701,"byte_end":170704,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170709,"byte_end":170780,"line_start":260,"line_end":260,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":170785,"byte_end":170844,"line_start":261,"line_end":261,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171637,"byte_end":171647,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"pub fn try_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171022,"byte_end":171097,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171102,"byte_end":171105,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171110,"byte_end":171183,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171188,"byte_end":171264,"line_start":271,"line_end":271,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171269,"byte_end":171312,"line_start":272,"line_end":272,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171317,"byte_end":171320,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171325,"byte_end":171337,"line_start":274,"line_end":274,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171342,"byte_end":171345,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171350,"byte_end":171424,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171429,"byte_end":171452,"line_start":277,"line_end":277,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171457,"byte_end":171460,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171465,"byte_end":171477,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171482,"byte_end":171485,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171490,"byte_end":171561,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171566,"byte_end":171625,"line_start":282,"line_end":282,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172461,"byte_end":172467,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171718,"byte_end":171772,"line_start":287,"line_end":287,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171777,"byte_end":171780,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171785,"byte_end":171861,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171866,"byte_end":171900,"line_start":290,"line_end":290,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171905,"byte_end":171908,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171913,"byte_end":171989,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":171994,"byte_end":172069,"line_start":293,"line_end":293,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172074,"byte_end":172144,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172149,"byte_end":172222,"line_start":295,"line_end":295,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172227,"byte_end":172276,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172281,"byte_end":172284,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172289,"byte_end":172301,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172306,"byte_end":172309,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172314,"byte_end":172385,"line_start":300,"line_end":300,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172390,"byte_end":172449,"line_start":301,"line_end":301,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172829,"byte_end":172837,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"pub fn total_in(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172574,"byte_end":172644,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172649,"byte_end":172667,"line_start":308,"line_end":308,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172672,"byte_end":172675,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172680,"byte_end":172746,"line_start":310,"line_end":310,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172751,"byte_end":172817,"line_start":311,"line_end":311,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":173007,"byte_end":173016,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"pub fn total_out(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172900,"byte_end":172972,"line_start":316,"line_end":316,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":172977,"byte_end":172995,"line_start":317,"line_end":317,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":946},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5079,"byte_end":5083,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Read`] streams, both encoders and decoders for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4905,"byte_end":4982,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ various formats.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":4983,"byte_end":5003,"line_start":126,"line_end":126,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5004,"byte_end":5007,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5008,"byte_end":5070,"line_start":128,"line_end":128,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":968},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5579,"byte_end":5584,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":975},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Write`] streams, both encoders and decoders for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5402,"byte_end":5480,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"/ various formats.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5481,"byte_end":5501,"line_start":140,"line_end":140,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5502,"byte_end":5505,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5506,"byte_end":5570,"line_start":142,"line_end":142,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":987},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":6047,"byte_end":6054,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`BufRead`] streams, both encoders and decoders for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5864,"byte_end":5944,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ various formats.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5945,"byte_end":5965,"line_start":153,"line_end":153,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5966,"byte_end":5969,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":5970,"byte_end":6038,"line_start":155,"line_end":155,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1373},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7334,"byte_end":7345,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"/ When compressing data, the compression level can be specified by a value in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7183,"byte_end":7262,"line_start":184,"line_end":184,"column_start":1,"column_end":80}},{"value":"/ this enum.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7263,"byte_end":7277,"line_start":185,"line_end":185,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7639,"byte_end":7642,"line_start":195,"line_end":195,"column_start":18,"column_end":21},"name":"new","qualname":"<Compression>::new","value":"pub const fn new(u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[{"value":"/ Creates a new description of the compression level with an explicitly","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7376,"byte_end":7449,"line_start":190,"line_end":190,"column_start":5,"column_end":78}},{"value":"/ specified integer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7454,"byte_end":7476,"line_start":191,"line_end":191,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7481,"byte_end":7484,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The integer here is typically on a scale of 0-9 where 0 means \"no","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7489,"byte_end":7558,"line_start":193,"line_end":193,"column_start":5,"column_end":74}},{"value":"/ compression\" and 9 means \"take as long as you'd like\".","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7563,"byte_end":7621,"line_start":194,"line_end":194,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7829,"byte_end":7833,"line_start":201,"line_end":201,"column_start":18,"column_end":22},"name":"none","qualname":"<Compression>::none","value":"pub const fn none() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[{"value":"/ No compression is to be performed, this may actually inflate data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7710,"byte_end":7779,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ slightly when encoding.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7784,"byte_end":7811,"line_start":200,"line_end":200,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7949,"byte_end":7953,"line_start":206,"line_end":206,"column_start":18,"column_end":22},"name":"fast","qualname":"<Compression>::fast","value":"pub const fn fast() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[{"value":"/ Optimize for the best speed of encoding.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7887,"byte_end":7931,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8073,"byte_end":8077,"line_start":211,"line_end":211,"column_start":18,"column_end":22},"name":"best","qualname":"<Compression>::best","value":"pub const fn best() -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[{"value":"/ Optimize for the size of data being encoded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8007,"byte_end":8055,"line_start":210,"line_end":210,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8237,"byte_end":8242,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"pub fn level(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[{"value":"/ Returns an integer representing the compression level, typically on a","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8131,"byte_end":8204,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ scale of 0-9","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8209,"byte_end":8225,"line_start":216,"line_end":216,"column_start":5,"column_end":21}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9197,"byte_end":9206,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9592,"byte_end":9601,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9928,"byte_end":9937,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":10304,"byte_end":10313,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":10854,"byte_end":10863,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11801,"byte_end":11804,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12822,"byte_end":12831,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13006,"byte_end":13015,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13652,"byte_end":13661,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13865,"byte_end":13874,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14360,"byte_end":14369,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14998,"byte_end":15007,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":15199,"byte_end":15208,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22912,"byte_end":22926,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23335,"byte_end":23349,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24914,"byte_end":24928,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25185,"byte_end":25199,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26822,"byte_end":26836,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27093,"byte_end":27107,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28812,"byte_end":28826,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":29085,"byte_end":29099,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30693,"byte_end":30707,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31037,"byte_end":31051,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33053,"byte_end":33067,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33286,"byte_end":33300,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34835,"byte_end":34849,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35466,"byte_end":35480,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37375,"byte_end":37389,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37610,"byte_end":37624,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38980,"byte_end":38994,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43634,"byte_end":43648,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44073,"byte_end":44087,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45563,"byte_end":45577,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49271,"byte_end":49285,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49710,"byte_end":49724,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10276557,"byte_end":10276564,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10276833,"byte_end":10276840,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278206,"byte_end":10278213,"line_start":88,"line_end":88,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278486,"byte_end":10278493,"line_start":106,"line_end":106,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278762,"byte_end":10278769,"line_start":116,"line_end":116,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10280229,"byte_end":10280236,"line_start":163,"line_end":163,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66991,"byte_end":67000,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68028,"byte_end":68037,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68984,"byte_end":68993,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69678,"byte_end":69687,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":71512,"byte_end":71518,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":71755,"byte_end":71761,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":72174,"byte_end":72183,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73153,"byte_end":73162,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73923,"byte_end":73932,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78068,"byte_end":78077,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80037,"byte_end":80051,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80352,"byte_end":80366,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":81080,"byte_end":81094,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":81324,"byte_end":81338,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83001,"byte_end":83010,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83466,"byte_end":83475,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84072,"byte_end":84081,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84221,"byte_end":84230,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85523,"byte_end":85532,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85785,"byte_end":85794,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86549,"byte_end":86558,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86774,"byte_end":86783,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88771,"byte_end":88785,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89135,"byte_end":89149,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89910,"byte_end":89924,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":90145,"byte_end":90159,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91926,"byte_end":91935,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":95135,"byte_end":95144,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":95770,"byte_end":95779,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96002,"byte_end":96011,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97453,"byte_end":97462,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":100956,"byte_end":100963,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":101147,"byte_end":101156,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":103065,"byte_end":103074,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51879,"byte_end":51887,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54908,"byte_end":54917,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111317,"byte_end":111332,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113226,"byte_end":113234,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119896,"byte_end":119906,"line_start":362,"line_end":362,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126475,"byte_end":126490,"line_start":534,"line_end":534,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126530,"byte_end":126535,"line_start":536,"line_end":536,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126670,"byte_end":126685,"line_start":542,"line_end":542,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126820,"byte_end":126833,"line_start":548,"line_end":548,"column_start":16,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126871,"byte_end":126876,"line_start":550,"line_end":550,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":127009,"byte_end":127022,"line_start":556,"line_end":556,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":134010,"byte_end":134018,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":134638,"byte_end":134648,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":135346,"byte_end":135359,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":135560,"byte_end":135575,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":137171,"byte_end":137177,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":140191,"byte_end":140197,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":782},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":141225,"byte_end":141231,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147531,"byte_end":147542,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147940,"byte_end":147951,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149516,"byte_end":149527,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149781,"byte_end":149792,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151284,"byte_end":151295,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151645,"byte_end":151656,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":153114,"byte_end":153125,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":153381,"byte_end":153392,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154860,"byte_end":154871,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155192,"byte_end":155203,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157205,"byte_end":157216,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157432,"byte_end":157443,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158939,"byte_end":158950,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159567,"byte_end":159578,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161473,"byte_end":161484,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161702,"byte_end":161713,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163084,"byte_end":163095,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167665,"byte_end":167676,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168090,"byte_end":168101,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169537,"byte_end":169548,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":173103,"byte_end":173114,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":173536,"byte_end":173547,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8300,"byte_end":8311,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9197,"byte_end":9206,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":53},"to":{"krate":2,"index":8701}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9592,"byte_end":9601,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":9928,"byte_end":9937,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":10304,"byte_end":10313,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":53},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/bufreader.rs","byte_start":10854,"byte_end":10863,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":53},"to":{"krate":1,"index":4334}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":11801,"byte_end":11804,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":12822,"byte_end":12831,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13006,"byte_end":13015,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13652,"byte_end":13661,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":13865,"byte_end":13874,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":4334}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14360,"byte_end":14369,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":14998,"byte_end":15007,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/crc.rs","byte_start":15199,"byte_end":15208,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1032},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":22912,"byte_end":22926,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":23335,"byte_end":23349,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1039},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":24914,"byte_end":24928,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1039},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":25185,"byte_end":25199,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1039},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":26822,"byte_end":26836,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":27093,"byte_end":27107,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":28812,"byte_end":28826,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/bufread.rs","byte_start":29085,"byte_end":29099,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1046},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":30693,"byte_end":30707,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":31037,"byte_end":31051,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33053,"byte_end":33067,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":33286,"byte_end":33300,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":34835,"byte_end":34849,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":35466,"byte_end":35480,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37375,"byte_end":37389,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1059},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/read.rs","byte_start":37610,"byte_end":37624,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1059},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":38980,"byte_end":38994,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":43634,"byte_end":43648,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1065},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":44073,"byte_end":44087,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1065},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":45563,"byte_end":45577,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49271,"byte_end":49285,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1071},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/deflate/write.rs","byte_start":49710,"byte_end":49724,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1071},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/mod.rs","byte_start":50266,"byte_end":50270,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2834},"to":{"krate":0,"index":303}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/mod.rs","byte_start":50273,"byte_end":50277,"line_start":10,"line_end":10,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2822},"to":{"krate":0,"index":303}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/mod.rs","byte_start":50372,"byte_end":50379,"line_start":15,"line_end":15,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":303},"to":{"krate":0,"index":306}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/mod.rs","byte_start":50673,"byte_end":50680,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":303},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10276557,"byte_end":10276564,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":8701}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10276833,"byte_end":10276840,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1101},"to":{"krate":0,"index":306}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278206,"byte_end":10278213,"line_start":88,"line_end":88,"column_start":18,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1101},"to":{"krate":0,"index":303}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278486,"byte_end":10278493,"line_start":106,"line_end":106,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1114},"to":{"krate":2,"index":8701}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10278762,"byte_end":10278769,"line_start":116,"line_end":116,"column_start":25,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1114},"to":{"krate":0,"index":310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/ffi/rust.rs","byte_start":10280229,"byte_end":10280236,"line_start":163,"line_end":163,"column_start":18,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1114},"to":{"krate":0,"index":303}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":66991,"byte_end":67000,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68028,"byte_end":68037,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":68984,"byte_end":68993,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":69678,"byte_end":69687,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":71512,"byte_end":71518,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":71755,"byte_end":71761,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":401},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":72174,"byte_end":72183,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73153,"byte_end":73162,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":73923,"byte_end":73932,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1137},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":78068,"byte_end":78077,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1137},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80037,"byte_end":80051,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":80352,"byte_end":80366,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":81080,"byte_end":81094,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1164},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/bufread.rs","byte_start":81324,"byte_end":81338,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1164},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83001,"byte_end":83010,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":83466,"byte_end":83475,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84072,"byte_end":84081,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1171},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":84221,"byte_end":84230,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1171},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85523,"byte_end":85532,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":85785,"byte_end":85794,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86549,"byte_end":86558,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1177},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":86774,"byte_end":86783,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1177},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":88771,"byte_end":88785,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89135,"byte_end":89149,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":89910,"byte_end":89924,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1183},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/read.rs","byte_start":90145,"byte_end":90159,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1183},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":91926,"byte_end":91935,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":95135,"byte_end":95144,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":95770,"byte_end":95779,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1189},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":96002,"byte_end":96011,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1189},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":97453,"byte_end":97462,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":100956,"byte_end":100963,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":101147,"byte_end":101156,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1198},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/write.rs","byte_start":103065,"byte_end":103074,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1198},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":51879,"byte_end":51887,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/gz/mod.rs","byte_start":54908,"byte_end":54917,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":111317,"byte_end":111332,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":113226,"byte_end":113234,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":119896,"byte_end":119906,"line_start":362,"line_end":362,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126475,"byte_end":126490,"line_start":534,"line_end":534,"column_start":16,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1297},"to":{"krate":1,"index":2324}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126530,"byte_end":126535,"line_start":536,"line_end":536,"column_start":36,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":3733},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126670,"byte_end":126685,"line_start":542,"line_end":542,"column_start":23,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1297},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126820,"byte_end":126833,"line_start":548,"line_end":548,"column_start":16,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1302},"to":{"krate":1,"index":2324}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":126871,"byte_end":126876,"line_start":550,"line_end":550,"column_start":34,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":3733},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/mem.rs","byte_start":127009,"byte_end":127022,"line_start":556,"line_end":556,"column_start":23,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1302},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":134010,"byte_end":134018,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1231},"to":{"krate":0,"index":734}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":134638,"byte_end":134648,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1235},"to":{"krate":0,"index":734}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":135346,"byte_end":135359,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1239},"to":{"krate":0,"index":752}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":135560,"byte_end":135575,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1268},"to":{"krate":0,"index":752}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":137171,"byte_end":137177,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":140191,"byte_end":140197,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1325},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zio.rs","byte_start":141225,"byte_end":141231,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1325},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147531,"byte_end":147542,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":147940,"byte_end":147951,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149516,"byte_end":149527,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1335},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":149781,"byte_end":149792,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1335},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151284,"byte_end":151295,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":151645,"byte_end":151656,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":153114,"byte_end":153125,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/bufread.rs","byte_start":153381,"byte_end":153392,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":154860,"byte_end":154871,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":155192,"byte_end":155203,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157205,"byte_end":157216,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":157432,"byte_end":157443,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1349},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":158939,"byte_end":158950,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":159567,"byte_end":159578,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161473,"byte_end":161484,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1355},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/read.rs","byte_start":161702,"byte_end":161713,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1355},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":163084,"byte_end":163095,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":167665,"byte_end":167676,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1361},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":168090,"byte_end":168101,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1361},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":169537,"byte_end":169548,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":173103,"byte_end":173114,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1367},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/zlib/write.rs","byte_start":173536,"byte_end":173547,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1367},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.20/src/lib.rs","byte_start":8300,"byte_end":8311,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1373},"to":{"krate":2,"index":2800}}]}