{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bech32","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=ab882b138ef2eee8","-C","extra-filename=-ab882b138ef2eee8","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libbech32-ab882b138ef2eee8.rmeta"},"prelude":{"crate_id":{"name":"bech32","disambiguator":[15427253885576595575,5547022775195385519]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1110,"byte_end":30577,"line_start":21,"line_end":954,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1110,"byte_end":30577,"line_start":21,"line_end":954,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":108},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":123},{"krate":0,"index":122},{"krate":0,"index":120},{"krate":0,"index":118},{"krate":0,"index":116},{"krate":0,"index":114},{"krate":0,"index":111},{"krate":0,"index":16},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":39},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":132},{"krate":0,"index":146},{"krate":0,"index":145},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":148},{"krate":0,"index":170},{"krate":0,"index":168},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":160},{"krate":0,"index":158},{"krate":0,"index":155},{"krate":0,"index":153},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":171},{"krate":0,"index":206},{"krate":0,"index":204},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":195},{"krate":0,"index":193},{"krate":0,"index":190},{"krate":0,"index":188},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106}],"decl_id":null,"docs":" Encoding and decoding of the Bech32 format","sig":null,"attributes":[{"value":"/ Encoding and decoding of the Bech32 format","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1110,"byte_end":1156,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1157,"byte_end":1160,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Bech32 is an encoding scheme that is easy to use for humans and efficient to encode in QR codes.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1161,"byte_end":1261,"line_start":23,"line_end":23,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1262,"byte_end":1265,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A Bech32 string consists of a human-readable part (HRP), a separator (the character `'1'`), and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1266,"byte_end":1365,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ a data part. A checksum at the end of the string provides error detection to prevent mistakes","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1366,"byte_end":1463,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ when the string is written off or read out loud.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1464,"byte_end":1516,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1517,"byte_end":1520,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The original description in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1521,"byte_end":1627,"line_start":29,"line_end":29,"column_start":1,"column_end":107}},{"value":"/ has more details.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1628,"byte_end":1649,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1650,"byte_end":1653,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1654,"byte_end":1668,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1669,"byte_end":1672,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1673,"byte_end":1680,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use bech32::{self, FromBase32, ToBase32, Variant};","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1681,"byte_end":1735,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1736,"byte_end":1739,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let encoded = bech32::encode(\"bech32\", vec![0x00, 0x01, 0x02].to_base32(), Variant::Bech32).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1740,"byte_end":1845,"line_start":37,"line_end":37,"column_start":1,"column_end":106}},{"value":"/ assert_eq!(encoded, \"bech321qqqsyrhqy2a\".to_string());","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1846,"byte_end":1904,"line_start":38,"line_end":38,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1905,"byte_end":1908,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let (hrp, data, variant) = bech32::decode(&encoded).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1909,"byte_end":1974,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(hrp, \"bech32\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":1975,"byte_end":2005,"line_start":41,"line_end":41,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(Vec::<u8>::from_base32(&data).unwrap(), vec![0x00, 0x01, 0x02]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2006,"byte_end":2085,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(variant, Variant::Bech32);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2086,"byte_end":2127,"line_start":43,"line_end":43,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2128,"byte_end":2135,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2136,"byte_end":2139,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2225,"byte_end":2249,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"allow(bare_trait_objects)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2250,"byte_end":2279,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2280,"byte_end":2302,"line_start":50,"line_end":50,"column_start":1,"column_end":23}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2303,"byte_end":2335,"line_start":51,"line_end":51,"column_start":1,"column_end":33}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2336,"byte_end":2366,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"deny(non_snake_case)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2367,"byte_end":2391,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"deny(unused_mut)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2392,"byte_end":2412,"line_start":54,"line_end":54,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2788,"byte_end":2790,"line_start":67,"line_end":67,"column_start":12,"column_end":14},"name":"u5","qualname":"::u5","value":"","parent":null,"children":[],"decl_id":null,"docs":" Integer in the range `0..32`\n","sig":null,"attributes":[{"value":"/ Integer in the range `0..32`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2636,"byte_end":2668,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2746,"byte_end":2776,"line_start":66,"line_end":66,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2887,"byte_end":2898,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"try_from_u8","qualname":"<u5>::try_from_u8","value":"pub fn try_from_u8(u8) -> Result<u5, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `u8` to `u5` if in range, return `Error` otherwise\n","sig":null,"attributes":[{"value":"/ Convert a `u8` to `u5` if in range, return `Error` otherwise","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2811,"byte_end":2875,"line_start":70,"line_end":70,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3123,"byte_end":3128,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<u5>::to_u8","value":"pub fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the underlying `u8` value\n","sig":null,"attributes":[{"value":"/ Returns a copy of the underlying `u8` value","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3064,"byte_end":3111,"line_start":79,"line_end":79,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3244,"byte_end":3251,"line_start":85,"line_end":85,"column_start":12,"column_end":19},"name":"to_char","qualname":"<u5>::to_char","value":"pub fn to_char(Self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Get char representing this 5 bit value as defined in BIP173\n","sig":null,"attributes":[{"value":"/ Get char representing this 5 bit value as defined in BIP173","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3169,"byte_end":3232,"line_start":84,"line_end":84,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3519,"byte_end":3530,"line_start":103,"line_end":103,"column_start":11,"column_end":22},"name":"WriteBase32","qualname":"::WriteBase32","value":"WriteBase32","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Interface to write `u5`s into a sink\n","sig":null,"attributes":[{"value":"/ Interface to write `u5`s into a sink","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3468,"byte_end":3508,"line_start":102,"line_end":102,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3562,"byte_end":3565,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::WriteBase32::Err","value":"type Err: fmt::Debug;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[{"value":"/ Write error","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3537,"byte_end":3552,"line_start":104,"line_end":104,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3614,"byte_end":3619,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"write","qualname":"::WriteBase32::write","value":"pub fn write(&mut Self, &[u5]) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write a `u5` slice\n","sig":null,"attributes":[{"value":"/ Write a `u5` slice","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3584,"byte_end":3606,"line_start":107,"line_end":107,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3794,"byte_end":3802,"line_start":116,"line_end":116,"column_start":8,"column_end":16},"name":"write_u5","qualname":"::WriteBase32::write_u5","value":"pub fn write_u5(&mut Self, u5) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write a single `u5`\n","sig":null,"attributes":[{"value":"/ Write a single `u5`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3763,"byte_end":3786,"line_start":115,"line_end":115,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3979,"byte_end":3991,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"Bech32Writer","qualname":"::Bech32Writer","value":"Bech32Writer {  }","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Allocationless Bech32 writer that accumulates the checksum data internally and writes them out\n in the end.\n","sig":null,"attributes":[{"value":"/ Allocationless Bech32 writer that accumulates the checksum data internally and writes them out","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3853,"byte_end":3951,"line_start":119,"line_end":119,"column_start":1,"column_end":99}},{"value":"/ in the end.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3952,"byte_end":3967,"line_start":120,"line_end":120,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4319,"byte_end":4322,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Bech32Writer>::new","value":"pub fn new(&str, Variant, &'a mut fmt::Write)\n-> Result<Bech32Writer, fmt::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new writer that can write a bech32 string without allocating itself.","sig":null,"attributes":[{"value":"/ Creates a new writer that can write a bech32 string without allocating itself.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4104,"byte_end":4186,"line_start":128,"line_end":128,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4191,"byte_end":4194,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This is a rather low-level API and doesn't check the HRP or data length for standard","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4199,"byte_end":4287,"line_start":130,"line_end":130,"column_start":5,"column_end":93}},{"value":"/ compliance.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4292,"byte_end":4307,"line_start":131,"line_end":131,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":5332,"byte_end":5340,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Bech32Writer>::finalize","value":"pub fn finalize(Self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write out the checksum at the end. If this method isn't called this will happen on drop.\n","sig":null,"attributes":[{"value":"/ Write out the checksum at the end. If this method isn't called this will happen on drop.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":5228,"byte_end":5320,"line_start":169,"line_end":169,"column_start":5,"column_end":97}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6365,"byte_end":6375,"line_start":211,"line_end":211,"column_start":11,"column_end":21},"name":"FromBase32","qualname":"::FromBase32","value":"FromBase32: Sized","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Parse/convert base32 slice to `Self`. It is the reciprocal of\n `ToBase32`.\n","sig":null,"attributes":[{"value":"/ Parse/convert base32 slice to `Self`. It is the reciprocal of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6273,"byte_end":6338,"line_start":209,"line_end":209,"column_start":1,"column_end":66}},{"value":"/ `ToBase32`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6339,"byte_end":6354,"line_start":210,"line_end":210,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6489,"byte_end":6492,"line_start":213,"line_end":213,"column_start":10,"column_end":13},"name":"Err","qualname":"::FromBase32::Err","value":"type Err;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing (e.g. because of bad padding).\n","sig":null,"attributes":[{"value":"/ The associated error which can be returned from parsing (e.g. because of bad padding).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6389,"byte_end":6479,"line_start":212,"line_end":212,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6544,"byte_end":6555,"line_start":216,"line_end":216,"column_start":8,"column_end":19},"name":"from_base32","qualname":"::FromBase32::from_base32","value":"pub fn from_base32(&[u5]) -> Result<Self, Self::Err>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Convert a base32 slice to `Self`.\n","sig":null,"attributes":[{"value":"/ Convert a base32 slice to `Self`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6499,"byte_end":6536,"line_start":215,"line_end":215,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":56},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7282,"byte_end":7290,"line_start":244,"line_end":244,"column_start":11,"column_end":19},"name":"ToBase32","qualname":"::ToBase32","value":"ToBase32","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":" A trait for converting a value to a type `T` that represents a `u5` slice.\n","sig":null,"attributes":[{"value":"/ A trait for converting a value to a type `T` that represents a `u5` slice.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7193,"byte_end":7271,"line_start":243,"line_end":243,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7340,"byte_end":7349,"line_start":246,"line_end":246,"column_start":8,"column_end":17},"name":"to_base32","qualname":"::ToBase32::to_base32","value":"pub fn to_base32(&Self) -> Vec<u5>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Convert `Self` to base32 vector\n","sig":null,"attributes":[{"value":"/ Convert `Self` to base32 vector","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7297,"byte_end":7332,"line_start":245,"line_end":245,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7581,"byte_end":7593,"line_start":254,"line_end":254,"column_start":8,"column_end":20},"name":"write_base32","qualname":"::ToBase32::write_base32","value":"pub fn write_base32<W: WriteBase32>(&Self, &mut W)\n-> Result<(), <W as WriteBase32>::Err>","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" Encode as base32 and write it to the supplied writer\n Implementations shouldn't allocate.\n","sig":null,"attributes":[{"value":"/ Encode as base32 and write it to the supplied writer","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7473,"byte_end":7529,"line_start":252,"line_end":252,"column_start":5,"column_end":61}},{"value":"/ Implementations shouldn't allocate.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7534,"byte_end":7573,"line_start":253,"line_end":253,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7781,"byte_end":7790,"line_start":258,"line_end":258,"column_start":11,"column_end":20},"name":"Base32Len","qualname":"::Base32Len","value":"Base32Len: ToBase32","parent":null,"children":[{"krate":0,"index":61}],"decl_id":null,"docs":" Interface to calculate the length of the base32 representation before actually serializing\n","sig":null,"attributes":[{"value":"/ Interface to calculate the length of the base32 representation before actually serializing","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7676,"byte_end":7770,"line_start":257,"line_end":257,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7857,"byte_end":7867,"line_start":260,"line_end":260,"column_start":8,"column_end":18},"name":"base32_len","qualname":"::Base32Len::base32_len","value":"pub fn base32_len(&Self) -> usize","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Calculate the base32 serialized length\n","sig":null,"attributes":[{"value":"/ Calculate the base32 serialized length","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7807,"byte_end":7849,"line_start":259,"line_end":259,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10036,"byte_end":10047,"line_start":320,"line_end":320,"column_start":11,"column_end":22},"name":"CheckBase32","qualname":"::CheckBase32","value":"CheckBase32<T: AsRef<[u5]>>","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,\n but checking that they are in range.\n","sig":null,"attributes":[{"value":"/ A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":9884,"byte_end":9984,"line_start":318,"line_end":318,"column_start":1,"column_end":101}},{"value":"/ but checking that they are in range.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":9985,"byte_end":10025,"line_start":319,"line_end":319,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":71},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10114,"byte_end":10117,"line_start":322,"line_end":322,"column_start":10,"column_end":13},"name":"Err","qualname":"::CheckBase32::Err","value":"type Err;","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Error type if conversion fails\n","sig":null,"attributes":[{"value":"/ Error type if conversion fails","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10070,"byte_end":10104,"line_start":321,"line_end":321,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10212,"byte_end":10224,"line_start":325,"line_end":325,"column_start":8,"column_end":20},"name":"check_base32","qualname":"::CheckBase32::check_base32","value":"pub fn check_base32(Self) -> Result<T, Self::Err>","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Check if all values are in range and return array-like struct of `u5` values\n","sig":null,"attributes":[{"value":"/ Check if all values are in range and return array-like struct of `u5` values","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10124,"byte_end":10204,"line_start":324,"line_end":324,"column_start":5,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12048,"byte_end":12061,"line_start":391,"line_end":391,"column_start":8,"column_end":21},"name":"encode_to_fmt","qualname":"::encode_to_fmt","value":"pub fn encode_to_fmt<T: AsRef<[u5]>>(&mut fmt::Write, &str, T, Variant)\n-> Result<fmt::Result, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to an [fmt::Write].\n This method is intended for implementing traits from [std::fmt].","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to an [fmt::Write].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11765,"byte_end":11812,"line_start":384,"line_end":384,"column_start":1,"column_end":48}},{"value":"/ This method is intended for implementing traits from [std::fmt].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11813,"byte_end":11881,"line_start":385,"line_end":385,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11882,"byte_end":11885,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11886,"byte_end":11898,"line_start":387,"line_end":387,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11899,"byte_end":11955,"line_start":388,"line_end":388,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11956,"byte_end":11986,"line_start":389,"line_end":389,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":11987,"byte_end":12040,"line_start":390,"line_end":390,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":149},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12945,"byte_end":12951,"line_start":417,"line_end":417,"column_start":5,"column_end":11},"name":"Bech32","qualname":"::Variant::Bech32","value":"Variant::Bech32","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" The original Bech32 described in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)\n","sig":null,"attributes":[{"value":"/ The original Bech32 described in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12829,"byte_end":12940,"line_start":416,"line_end":416,"column_start":5,"column_end":116}}]},{"kind":"TupleVariant","id":{"krate":0,"index":151},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13082,"byte_end":13089,"line_start":419,"line_end":419,"column_start":5,"column_end":12},"name":"Bech32m","qualname":"::Variant::Bech32m","value":"Variant::Bech32m","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" The improved Bech32m variant described in [BIP-0350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)\n","sig":null,"attributes":[{"value":"/ The improved Bech32m variant described in [BIP-0350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12957,"byte_end":13077,"line_start":418,"line_end":418,"column_start":5,"column_end":125}}]},{"kind":"Enum","id":{"krate":0,"index":148},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12815,"byte_end":12822,"line_start":415,"line_end":415,"column_start":10,"column_end":17},"name":"Variant","qualname":"::Variant","value":"pub enum Variant { Bech32, Bech32m, }","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151}],"decl_id":null,"docs":" Used for encode/decode operations for the two variants of Bech32\n","sig":null,"attributes":[{"value":"/ Used for encode/decode operations for the two variants of Bech32","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":12669,"byte_end":12737,"line_start":413,"line_end":413,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13831,"byte_end":13837,"line_start":449,"line_end":449,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u5]>>(&str, T, Variant) -> Result<String, Error>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to string.","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to string.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13626,"byte_end":13664,"line_start":443,"line_end":443,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13665,"byte_end":13668,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13669,"byte_end":13681,"line_start":445,"line_end":445,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13682,"byte_end":13738,"line_start":446,"line_end":446,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13739,"byte_end":13769,"line_start":447,"line_end":447,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13770,"byte_end":13823,"line_start":448,"line_end":448,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":14136,"byte_end":14142,"line_start":458,"line_end":458,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode(&str) -> Result<(String, Vec<u5>, Variant), Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a bech32 string into the raw HRP and the data bytes.","sig":null,"attributes":[{"value":"/ Decode a bech32 string into the raw HRP and the data bytes.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":14026,"byte_end":14089,"line_start":455,"line_end":455,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":14090,"byte_end":14093,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ Returns the HRP in lowercase..","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":14094,"byte_end":14128,"line_start":457,"line_end":457,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":172},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18733,"byte_end":18749,"line_start":600,"line_end":600,"column_start":5,"column_end":21},"name":"MissingSeparator","qualname":"::Error::MissingSeparator","value":"Error::MissingSeparator","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" String does not contain the separator character\n","sig":null,"attributes":[{"value":"/ String does not contain the separator character","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18677,"byte_end":18728,"line_start":599,"line_end":599,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":174},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18812,"byte_end":18827,"line_start":602,"line_end":602,"column_start":5,"column_end":20},"name":"InvalidChecksum","qualname":"::Error::InvalidChecksum","value":"Error::InvalidChecksum","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" The checksum does not match the rest of the data\n","sig":null,"attributes":[{"value":"/ The checksum does not match the rest of the data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18755,"byte_end":18807,"line_start":601,"line_end":601,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":176},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18898,"byte_end":18911,"line_start":604,"line_end":604,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" The data or human-readable part is too long or too short\n","sig":null,"attributes":[{"value":"/ The data or human-readable part is too long or too short","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18833,"byte_end":18893,"line_start":603,"line_end":603,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":178},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18979,"byte_end":18990,"line_start":606,"line_end":606,"column_start":5,"column_end":16},"name":"InvalidChar","qualname":"::Error::InvalidChar","value":"Error::InvalidChar(char)","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Some part of the string contains an invalid character\n","sig":null,"attributes":[{"value":"/ Some part of the string contains an invalid character","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18917,"byte_end":18974,"line_start":605,"line_end":605,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":181},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19053,"byte_end":19064,"line_start":608,"line_end":608,"column_start":5,"column_end":16},"name":"InvalidData","qualname":"::Error::InvalidData","value":"Error::InvalidData(u8)","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Some part of the data has an invalid value\n","sig":null,"attributes":[{"value":"/ Some part of the data has an invalid value","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19002,"byte_end":19048,"line_start":607,"line_end":607,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":184},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19131,"byte_end":19145,"line_start":610,"line_end":610,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::Error::InvalidPadding","value":"Error::InvalidPadding","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" The bit conversion failed due to a padding issue\n","sig":null,"attributes":[{"value":"/ The bit conversion failed due to a padding issue","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19074,"byte_end":19126,"line_start":609,"line_end":609,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":186},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19196,"byte_end":19205,"line_start":612,"line_end":612,"column_start":5,"column_end":14},"name":"MixedCase","qualname":"::Error::MixedCase","value":"Error::MixedCase","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" The whole string must be of one case\n","sig":null,"attributes":[{"value":"/ The whole string must be of one case","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19151,"byte_end":19191,"line_start":611,"line_end":611,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18665,"byte_end":18670,"line_start":598,"line_end":598,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    MissingSeparator,\n    InvalidChecksum,\n    InvalidLength,\n    InvalidChar(char),\n    InvalidData(u8),\n    InvalidPadding,\n    MixedCase,\n}","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":186}],"decl_id":null,"docs":" Error types for Bech32 encoding / decoding\n","sig":null,"attributes":[{"value":"/ Error types for Bech32 encoding / decoding","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":18541,"byte_end":18587,"line_start":596,"line_end":596,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20916,"byte_end":20928,"line_start":660,"line_end":660,"column_start":8,"column_end":20},"name":"convert_bits","qualname":"::convert_bits","value":"pub fn convert_bits<T>(&[T], u32, u32, bool) -> Result<Vec<u8>, Error> where\nT: Into<u8> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Convert between bit sizes","sig":null,"attributes":[{"value":"/ Convert between bit sizes","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20410,"byte_end":20439,"line_start":643,"line_end":643,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20440,"byte_end":20443,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20444,"byte_end":20456,"line_start":645,"line_end":645,"column_start":1,"column_end":13}},{"value":"/ * `Error::InvalidData` if any element of `data` is out of range","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20457,"byte_end":20524,"line_start":646,"line_end":646,"column_start":1,"column_end":68}},{"value":"/ * `Error::InvalidPadding` if `pad == false` and the padding bits are not `0`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20525,"byte_end":20605,"line_start":647,"line_end":647,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20606,"byte_end":20609,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20610,"byte_end":20622,"line_start":649,"line_end":649,"column_start":1,"column_end":13}},{"value":"/ Function will panic if attempting to convert `from` or `to` a bit size that","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20623,"byte_end":20702,"line_start":650,"line_end":650,"column_start":1,"column_end":80}},{"value":"/ is 0 or larger than 8 bits.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20703,"byte_end":20734,"line_start":651,"line_end":651,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20735,"byte_end":20738,"line_start":652,"line_end":652,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20739,"byte_end":20753,"line_start":653,"line_end":653,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20754,"byte_end":20757,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20758,"byte_end":20769,"line_start":655,"line_end":655,"column_start":1,"column_end":12}},{"value":"/ use bech32::convert_bits;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20770,"byte_end":20799,"line_start":656,"line_end":656,"column_start":1,"column_end":30}},{"value":"/ let base5 = convert_bits(&[0xff], 8, 5, true);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20800,"byte_end":20850,"line_start":657,"line_end":657,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(base5.unwrap(), vec![0x1f, 0x1c]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20851,"byte_end":20900,"line_start":658,"line_end":658,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":20901,"byte_end":20908,"line_start":659,"line_end":659,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2802,"byte_end":2804,"line_start":69,"line_end":69,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3334,"byte_end":3336,"line_start":90,"line_end":90,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3408,"byte_end":3410,"line_start":96,"line_end":96,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4081,"byte_end":4093,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":5857,"byte_end":5869,"line_start":192,"line_end":192,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6121,"byte_end":6133,"line_start":202,"line_end":202,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6620,"byte_end":6623,"line_start":219,"line_end":219,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6907,"byte_end":6910,"line_start":233,"line_end":233,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7922,"byte_end":7923,"line_start":263,"line_end":263,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":9691,"byte_end":9692,"line_start":307,"line_end":307,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10309,"byte_end":10310,"line_start":328,"line_end":328,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13168,"byte_end":13175,"line_start":425,"line_end":425,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19232,"byte_end":19237,"line_start":615,"line_end":615,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19899,"byte_end":19904,"line_start":629,"line_end":629,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":2802,"byte_end":2804,"line_start":69,"line_end":69,"column_start":6,"column_end":8},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3334,"byte_end":3336,"line_start":90,"line_end":90,"column_start":19,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":2725}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":3408,"byte_end":3410,"line_start":96,"line_end":96,"column_start":20,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":108},"to":{"krate":2,"index":2719}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":4081,"byte_end":4093,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":5857,"byte_end":5869,"line_start":192,"line_end":192,"column_start":26,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":24}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6121,"byte_end":6133,"line_start":202,"line_end":202,"column_start":19,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6377,"byte_end":6382,"line_start":211,"line_end":211,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2827},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6620,"byte_end":6623,"line_start":219,"line_end":219,"column_start":22,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":6703},"to":{"krate":0,"index":24}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":6907,"byte_end":6910,"line_start":233,"line_end":233,"column_start":21,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":6703},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7792,"byte_end":7800,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":56},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":7922,"byte_end":7923,"line_start":263,"line_end":263,"column_start":35,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":63},"to":{"krate":0,"index":56}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":9691,"byte_end":9692,"line_start":307,"line_end":307,"column_start":36,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":67},"to":{"krate":0,"index":60}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":10309,"byte_end":10310,"line_start":328,"line_end":328,"column_start":51,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":75},"to":{"krate":0,"index":69}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":13168,"byte_end":13175,"line_start":425,"line_end":425,"column_start":6,"column_end":13},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19232,"byte_end":19237,"line_start":615,"line_end":615,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.8.0/src/lib.rs","byte_start":19899,"byte_end":19904,"line_start":629,"line_end":629,"column_start":23,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":2324}}]}