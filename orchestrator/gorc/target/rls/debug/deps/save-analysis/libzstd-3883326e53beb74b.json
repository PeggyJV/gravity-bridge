{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zstd","--edition=2018","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","-C","metadata=3883326e53beb74b","-C","extra-filename=-3883326e53beb74b","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--extern","zstd_safe=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libzstd_safe-bf61ebd862737917.rmeta","--cap-lints","allow","-L","native=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/build/zstd-sys-9021cd69ae04a424/out","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libzstd-3883326e53beb74b.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[10379827015169854783,15611115410962040640]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","num":18,"id":{"name":"zstd_safe","disambiguator":[6327004118590156839,8839594554992066483]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","num":19,"id":{"name":"libc","disambiguator":[6097756368536057402,9635002418138546655]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","num":20,"id":{"name":"zstd_sys","disambiguator":[14563112892918915473,6261065513758285336]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":0,"byte_end":1933,"line_start":1,"line_end":76,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":522},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2195,"byte_end":2205,"line_start":10,"line_end":10,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2235,"byte_end":2247,"line_start":11,"line_end":11,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":18,"index":144},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9090,"byte_end":9095,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":18,"index":163},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9097,"byte_end":9102,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":53}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/mod.rs","byte_start":36623,"byte_end":36629,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":304}},{"kind":"Use","ref_id":{"krate":0,"index":367},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/mod.rs","byte_start":36653,"byte_end":36659,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":304}},{"kind":"Use","ref_id":{"krate":18,"index":317},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51297,"byte_end":51307,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":404}},{"kind":"Use","ref_id":{"krate":18,"index":278},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51309,"byte_end":51319,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":404}},{"kind":"Use","ref_id":{"krate":18,"index":287},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51321,"byte_end":51329,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":404}},{"kind":"Use","ref_id":{"krate":18,"index":294},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51331,"byte_end":51340,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":404}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14813,"byte_end":14824,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":301},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14826,"byte_end":14837,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14839,"byte_end":14849,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14851,"byte_end":14861,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14884,"byte_end":14891,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14915,"byte_end":14932,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14934,"byte_end":14941,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":18,"index":41},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":770,"byte_end":784,"line_start":34,"line_end":34,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":1056,"byte_end":1066,"line_start":43,"line_end":43,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":1068,"byte_end":1078,"line_start":43,"line_end":43,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":1080,"byte_end":1087,"line_start":43,"line_end":43,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":1089,"byte_end":1096,"line_start":43,"line_end":43,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":0,"byte_end":1933,"line_start":1,"line_end":76,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":53},{"krate":0,"index":101},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ extern crate zstd;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":394,"byte_end":416,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":417,"byte_end":420,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ use std::io;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":421,"byte_end":437,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":438,"byte_end":441,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":442,"byte_end":457,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/ \t// Uncompress input and print the result.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":458,"byte_end":504,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ \tzstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":505,"byte_end":572,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":573,"byte_end":578,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":579,"byte_end":586,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":587,"byte_end":590,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":591,"byte_end":635,"line_start":24,"line_end":24,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":636,"byte_end":658,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":22},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" Compress and decompress individual blocks.","sig":null,"attributes":[{"value":"/ Compress and decompress individual blocks.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":1935,"byte_end":1981,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":1982,"byte_end":1985,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":1986,"byte_end":2039,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2040,"byte_end":2098,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2099,"byte_end":2132,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":522},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4377,"byte_end":4387,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::block::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524}],"decl_id":null,"docs":" Allows to compress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple blocks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4144,"byte_end":4205,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4206,"byte_end":4209,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `compress` multiple times.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4210,"byte_end":4286,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ The compressed blocks are still completely independent.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4287,"byte_end":4346,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4518,"byte_end":4521,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4473,"byte_end":4506,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4661,"byte_end":4670,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Compressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4587,"byte_end":4649,"line_start":22,"line_end":22,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5102,"byte_end":5120,"line_start":36,"line_end":36,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"pub fn compress_to_buffer(&mut Self, &[u8], &mut [u8], i32)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4803,"byte_end":4871,"line_start":30,"line_end":30,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4876,"byte_end":4879,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4884,"byte_end":4958,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4963,"byte_end":5022,"line_start":33,"line_end":33,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5027,"byte_end":5030,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5035,"byte_end":5090,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5607,"byte_end":5615,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"pub fn compress(&mut Self, &[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5462,"byte_end":5527,"line_start":52,"line_end":52,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5532,"byte_end":5535,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":5540,"byte_end":5595,"line_start":54,"line_end":54,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":527},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6620,"byte_end":6632,"line_start":10,"line_end":10,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::block::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6443,"byte_end":6506,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6507,"byte_end":6510,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6511,"byte_end":6589,"line_start":8,"line_end":8,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6768,"byte_end":6771,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6720,"byte_end":6756,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6915,"byte_end":6924,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Decompressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6839,"byte_end":6903,"line_start":21,"line_end":21,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7291,"byte_end":7311,"line_start":33,"line_end":33,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"pub fn decompress_to_buffer(&mut Self, &[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7059,"byte_end":7128,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7133,"byte_end":7136,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7141,"byte_end":7215,"line_start":31,"line_end":31,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7220,"byte_end":7279,"line_start":32,"line_end":32,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7807,"byte_end":7817,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"pub fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7612,"byte_end":7681,"line_start":47,"line_end":47,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7686,"byte_end":7689,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7694,"byte_end":7757,"line_start":49,"line_end":49,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":7762,"byte_end":7795,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":49},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2541,"byte_end":2559,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::block::compress_to_buffer","value":"pub fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2264,"byte_end":2334,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2335,"byte_end":2338,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2339,"byte_end":2413,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2414,"byte_end":2473,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2474,"byte_end":2477,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2478,"byte_end":2533,"line_start":20,"line_end":20,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2854,"byte_end":2862,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"compress","qualname":"::block::compress","value":"pub fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2721,"byte_end":2786,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2787,"byte_end":2790,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2791,"byte_end":2846,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3176,"byte_end":3196,"line_start":40,"line_end":40,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::block::decompress_to_buffer","value":"pub fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":2960,"byte_end":3029,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3030,"byte_end":3033,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3034,"byte_end":3108,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3109,"byte_end":3168,"line_start":39,"line_end":39,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3518,"byte_end":3528,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"decompress","qualname":"::block::decompress","value":"pub fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3339,"byte_end":3408,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3409,"byte_end":3412,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3413,"byte_end":3476,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/mod.rs","byte_start":3477,"byte_end":3510,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":53},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":98}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8272,"byte_end":8316,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8317,"byte_end":8320,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8321,"byte_end":8386,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8387,"byte_end":8443,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8444,"byte_end":8499,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8500,"byte_end":8503,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8504,"byte_end":8557,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8558,"byte_end":8622,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8623,"byte_end":8693,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8694,"byte_end":8738,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8739,"byte_end":8742,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8743,"byte_end":8820,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8821,"byte_end":8824,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8825,"byte_end":8904,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":8905,"byte_end":8984,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9157,"byte_end":9174,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" Prepared dictionary for compression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9106,"byte_end":9145,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9364,"byte_end":9368,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"copy","qualname":"<EncoderDictionary>::copy","value":"pub fn copy(&[u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a prepared dictionary for compression.","sig":null,"attributes":[{"value":"/ Creates a prepared dictionary for compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9244,"byte_end":9294,"line_start":31,"line_end":31,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9299,"byte_end":9302,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9307,"byte_end":9352,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10029,"byte_end":10037,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"pub fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9972,"byte_end":10017,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10143,"byte_end":10160,"line_start":61,"line_end":61,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":87}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10090,"byte_end":10131,"line_start":60,"line_end":60,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10351,"byte_end":10355,"line_start":69,"line_end":69,"column_start":12,"column_end":16},"name":"copy","qualname":"<DecoderDictionary>::copy","value":"pub fn copy(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a prepared dictionary for decompression.","sig":null,"attributes":[{"value":"/ Create a prepared dictionary for decompression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10230,"byte_end":10281,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10286,"byte_end":10289,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10294,"byte_end":10339,"line_start":68,"line_end":68,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10901,"byte_end":10909,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"pub fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10844,"byte_end":10889,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11135,"byte_end":11150,"line_start":97,"line_end":97,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"pub fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10962,"byte_end":11021,"line_start":93,"line_end":93,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11022,"byte_end":11025,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11026,"byte_end":11083,"line_start":95,"line_end":95,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11084,"byte_end":11127,"line_start":96,"line_end":96,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12193,"byte_end":12205,"line_start":133,"line_end":133,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"pub fn from_samples<S: AsRef<[u8]>>(&[S], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11850,"byte_end":11895,"line_start":124,"line_end":124,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11896,"byte_end":11899,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11900,"byte_end":11971,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":11972,"byte_end":12022,"line_start":127,"line_end":127,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12023,"byte_end":12026,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12027,"byte_end":12075,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12076,"byte_end":12130,"line_start":130,"line_end":130,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12131,"byte_end":12134,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12135,"byte_end":12185,"line_start":132,"line_end":132,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12602,"byte_end":12612,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"pub fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":12556,"byte_end":12594,"line_start":145,"line_end":145,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":186},{"krate":0,"index":283},{"krate":0,"index":304},{"krate":0,"index":404},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":497}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14414,"byte_end":14455,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14456,"byte_end":14459,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14460,"byte_end":14526,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14527,"byte_end":14585,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14586,"byte_end":14589,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14590,"byte_end":14668,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14669,"byte_end":14687,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":102},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":177},{"krate":0,"index":180}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":17612,"byte_end":17691,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18153,"byte_end":18160,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":136}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":17978,"byte_end":18039,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18040,"byte_end":18043,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18044,"byte_end":18095,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18096,"byte_end":18141,"line_start":21,"line_end":21,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18300,"byte_end":18307,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":140}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18228,"byte_end":18288,"line_start":26,"line_end":26,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18464,"byte_end":18467,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18426,"byte_end":18452,"line_start":32,"line_end":32,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18738,"byte_end":18749,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder>::with_buffer","value":"pub fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18681,"byte_end":18726,"line_start":41,"line_end":41,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18988,"byte_end":19003,"line_start":48,"line_end":48,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18836,"byte_end":18892,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18897,"byte_end":18900,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18905,"byte_end":18976,"line_start":47,"line_end":47,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19406,"byte_end":19418,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder>::single_frame","value":"pub fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19260,"byte_end":19314,"line_start":56,"line_end":56,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19319,"byte_end":19322,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19327,"byte_end":19394,"line_start":58,"line_end":58,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19664,"byte_end":19688,"line_start":67,"line_end":67,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19503,"byte_end":19568,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19573,"byte_end":19576,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19581,"byte_end":19652,"line_start":66,"line_end":66,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20054,"byte_end":20077,"line_start":81,"line_end":81,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19989,"byte_end":20042,"line_start":80,"line_end":80,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20816,"byte_end":20823,"line_start":105,"line_end":105,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20755,"byte_end":20804,"line_start":104,"line_end":104,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21079,"byte_end":21086,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20879,"byte_end":20936,"line_start":109,"line_end":109,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20941,"byte_end":20944,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":20949,"byte_end":21021,"line_start":111,"line_end":111,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21026,"byte_end":21067,"line_start":112,"line_end":112,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21328,"byte_end":21334,"line_start":121,"line_end":121,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21154,"byte_end":21182,"line_start":117,"line_end":117,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21187,"byte_end":21190,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21195,"byte_end":21260,"line_start":119,"line_end":119,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21265,"byte_end":21316,"line_start":120,"line_end":120,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21809,"byte_end":21812,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21771,"byte_end":21797,"line_start":140,"line_end":140,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22102,"byte_end":22113,"line_start":150,"line_end":150,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder>::with_buffer","value":"pub fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22045,"byte_end":22090,"line_start":149,"line_end":149,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22372,"byte_end":22387,"line_start":157,"line_end":157,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22220,"byte_end":22276,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22281,"byte_end":22284,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22289,"byte_end":22360,"line_start":156,"line_end":156,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22856,"byte_end":22880,"line_start":173,"line_end":173,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22695,"byte_end":22760,"line_start":170,"line_end":170,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22765,"byte_end":22768,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22773,"byte_end":22844,"line_start":172,"line_end":172,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23246,"byte_end":23269,"line_start":187,"line_end":187,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23181,"byte_end":23234,"line_start":186,"line_end":186,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23391,"byte_end":23398,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23330,"byte_end":23379,"line_start":191,"line_end":191,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23654,"byte_end":23661,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23454,"byte_end":23511,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23516,"byte_end":23519,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23524,"byte_end":23596,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23601,"byte_end":23642,"line_start":199,"line_end":199,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23903,"byte_end":23909,"line_start":208,"line_end":208,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23729,"byte_end":23757,"line_start":204,"line_end":204,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23762,"byte_end":23765,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23770,"byte_end":23835,"line_start":206,"line_end":206,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":23840,"byte_end":23891,"line_start":207,"line_end":207,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":219},{"krate":0,"index":224},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":258},{"krate":0,"index":263},{"krate":0,"index":267},{"krate":0,"index":276},{"krate":0,"index":280}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":24540,"byte_end":24620,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":211},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25280,"byte_end":25287,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":214}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":24935,"byte_end":24999,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25000,"byte_end":25003,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25004,"byte_end":25048,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25049,"byte_end":25094,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25095,"byte_end":25098,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25099,"byte_end":25156,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25157,"byte_end":25160,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25161,"byte_end":25231,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25232,"byte_end":25235,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25236,"byte_end":25268,"line_start":30,"line_end":30,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":215},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25469,"byte_end":25476,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":218}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.\n","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25392,"byte_end":25457,"line_start":36,"line_end":36,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":219},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25665,"byte_end":25682,"line_start":43,"line_end":43,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.\n","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25583,"byte_end":25653,"line_start":42,"line_end":42,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26269,"byte_end":26276,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26207,"byte_end":26257,"line_start":62,"line_end":62,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26553,"byte_end":26560,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26352,"byte_end":26410,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26415,"byte_end":26418,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26423,"byte_end":26495,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26500,"byte_end":26541,"line_start":70,"line_end":70,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27355,"byte_end":27358,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27198,"byte_end":27224,"line_start":96,"line_end":96,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27229,"byte_end":27232,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27237,"byte_end":27275,"line_start":98,"line_end":98,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27280,"byte_end":27283,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27288,"byte_end":27343,"line_start":100,"line_end":100,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27742,"byte_end":27757,"line_start":111,"line_end":111,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27465,"byte_end":27521,"line_start":105,"line_end":105,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27526,"byte_end":27529,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27534,"byte_end":27589,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27594,"byte_end":27662,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27667,"byte_end":27670,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27675,"byte_end":27730,"line_start":110,"line_end":110,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28289,"byte_end":28313,"line_start":127,"line_end":127,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28062,"byte_end":28136,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28141,"byte_end":28144,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28149,"byte_end":28204,"line_start":125,"line_end":125,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28209,"byte_end":28277,"line_start":126,"line_end":126,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28799,"byte_end":28810,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder>::auto_finish","value":"pub fn auto_finish(Self) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28613,"byte_end":28685,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28690,"byte_end":28693,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28698,"byte_end":28709,"line_start":141,"line_end":141,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28714,"byte_end":28717,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28722,"byte_end":28787,"line_start":143,"line_end":143,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29077,"byte_end":29086,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder>::on_finish","value":"pub fn on_finish<F: 'static + FnMut(io::Result<W>) -> ()>(Self, F)\n-> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28932,"byte_end":28991,"line_start":150,"line_end":150,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28996,"byte_end":28999,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29004,"byte_end":29065,"line_start":152,"line_end":152,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29300,"byte_end":29307,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29238,"byte_end":29288,"line_start":160,"line_end":160,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29564,"byte_end":29571,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29363,"byte_end":29421,"line_start":165,"line_end":165,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29426,"byte_end":29429,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29434,"byte_end":29506,"line_start":167,"line_end":167,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29511,"byte_end":29552,"line_start":168,"line_end":168,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30195,"byte_end":30201,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29639,"byte_end":29677,"line_start":173,"line_end":173,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29682,"byte_end":29685,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29690,"byte_end":29763,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29768,"byte_end":29833,"line_start":176,"line_end":176,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29838,"byte_end":29841,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29846,"byte_end":29900,"line_start":178,"line_end":178,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29905,"byte_end":29908,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29913,"byte_end":29980,"line_start":180,"line_end":180,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29985,"byte_end":29988,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":29993,"byte_end":30066,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30071,"byte_end":30144,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30149,"byte_end":30183,"line_start":184,"line_end":184,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30734,"byte_end":30744,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder>::try_finish","value":"pub fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30288,"byte_end":30336,"line_start":189,"line_end":189,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30341,"byte_end":30344,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30349,"byte_end":30422,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30427,"byte_end":30484,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30489,"byte_end":30492,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30497,"byte_end":30567,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30572,"byte_end":30610,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30615,"byte_end":30618,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30623,"byte_end":30696,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30701,"byte_end":30722,"line_start":198,"line_end":198,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31182,"byte_end":31191,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder>::do_finish","value":"pub fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":30989,"byte_end":31022,"line_start":207,"line_end":207,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31027,"byte_end":31030,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31035,"byte_end":31108,"line_start":209,"line_end":209,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31113,"byte_end":31170,"line_start":210,"line_end":210,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31341,"byte_end":31363,"line_start":216,"line_end":216,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31263,"byte_end":31329,"line_start":215,"line_end":215,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32015,"byte_end":32018,"line_start":245,"line_end":245,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31977,"byte_end":32003,"line_start":244,"line_end":244,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32315,"byte_end":32330,"line_start":253,"line_end":253,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32106,"byte_end":32162,"line_start":249,"line_end":249,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32167,"byte_end":32170,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32175,"byte_end":32230,"line_start":251,"line_end":251,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32235,"byte_end":32303,"line_start":252,"line_end":252,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32811,"byte_end":32835,"line_start":264,"line_end":264,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32584,"byte_end":32658,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32663,"byte_end":32666,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32671,"byte_end":32726,"line_start":262,"line_end":262,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32731,"byte_end":32799,"line_start":263,"line_end":263,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":33808,"byte_end":33815,"line_start":296,"line_end":296,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":33746,"byte_end":33796,"line_start":295,"line_end":295,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34072,"byte_end":34079,"line_start":304,"line_end":304,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":33871,"byte_end":33929,"line_start":300,"line_end":300,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":33934,"byte_end":33937,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":33942,"byte_end":34014,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34019,"byte_end":34060,"line_start":303,"line_end":303,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34189,"byte_end":34199,"line_start":309,"line_end":309,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34147,"byte_end":34177,"line_start":308,"line_end":308,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34337,"byte_end":34359,"line_start":314,"line_end":314,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34259,"byte_end":34325,"line_start":313,"line_end":313,"column_start":5,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35147,"byte_end":35157,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"pub fn decode_all<R: io::Read>(R) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35021,"byte_end":35082,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35083,"byte_end":35086,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35087,"byte_end":35139,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35427,"byte_end":35438,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"pub fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35297,"byte_end":35358,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35359,"byte_end":35362,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35363,"byte_end":35419,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35829,"byte_end":35839,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"pub fn encode_all<R: io::Read>(R, i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35643,"byte_end":35712,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35713,"byte_end":35716,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35717,"byte_end":35761,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35762,"byte_end":35765,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":35766,"byte_end":35821,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":301},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36200,"byte_end":36211,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"pub fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36004,"byte_end":36073,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36074,"byte_end":36077,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36078,"byte_end":36132,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36133,"byte_end":36136,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/functions.rs","byte_start":36137,"byte_end":36192,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":304},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/mod.rs","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":349},{"krate":0,"index":398},{"krate":0,"index":401}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/mod.rs","byte_start":36501,"byte_end":36574,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":326},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37057,"byte_end":37063,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":36790,"byte_end":36846,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":36847,"byte_end":36850,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":36851,"byte_end":36928,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":36929,"byte_end":36932,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":36933,"byte_end":37007,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37008,"byte_end":37045,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37331,"byte_end":37334,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"pub fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37210,"byte_end":37237,"line_start":23,"line_end":23,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37242,"byte_end":37245,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37250,"byte_end":37319,"line_start":25,"line_end":25,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37614,"byte_end":37630,"line_start":37,"line_end":37,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"pub fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37548,"byte_end":37602,"line_start":36,"line_end":36,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37761,"byte_end":37774,"line_start":42,"line_end":42,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37689,"byte_end":37749,"line_start":41,"line_end":41,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37906,"byte_end":37916,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37837,"byte_end":37894,"line_start":46,"line_end":46,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":38037,"byte_end":38043,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"pub fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37976,"byte_end":38025,"line_start":51,"line_end":51,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":38132,"byte_end":38142,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":38091,"byte_end":38120,"line_start":56,"line_end":56,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":367},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42821,"byte_end":42827,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42554,"byte_end":42611,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42612,"byte_end":42615,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42616,"byte_end":42694,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42695,"byte_end":42698,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42699,"byte_end":42776,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":42777,"byte_end":42809,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43272,"byte_end":43275,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"pub fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43150,"byte_end":43177,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43182,"byte_end":43185,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43190,"byte_end":43260,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43918,"byte_end":43924,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"pub fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43584,"byte_end":43604,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43609,"byte_end":43612,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43617,"byte_end":43688,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43693,"byte_end":43704,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43709,"byte_end":43712,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43717,"byte_end":43791,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43796,"byte_end":43821,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43826,"byte_end":43829,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43834,"byte_end":43906,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46658,"byte_end":46668,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"pub fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46481,"byte_end":46529,"line_start":134,"line_end":134,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46534,"byte_end":46537,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46542,"byte_end":46612,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46617,"byte_end":46646,"line_start":137,"line_end":137,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46790,"byte_end":46796,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"pub fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46736,"byte_end":46778,"line_start":142,"line_end":142,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46906,"byte_end":46916,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"pub fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46844,"byte_end":46894,"line_start":147,"line_end":147,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":47033,"byte_end":47042,"line_start":153,"line_end":153,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"pub fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":46976,"byte_end":47021,"line_start":152,"line_end":152,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":47158,"byte_end":47171,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":47093,"byte_end":47146,"line_start":157,"line_end":157,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":404},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":456},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":471}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51030,"byte_end":51081,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51082,"byte_end":51085,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51086,"byte_end":51163,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51164,"byte_end":51190,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51191,"byte_end":51194,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51195,"byte_end":51262,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":431},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51559,"byte_end":51568,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51429,"byte_end":51492,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51493,"byte_end":51496,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51497,"byte_end":51548,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51788,"byte_end":51791,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"pub fn run(&mut Self, &mut InBuffer, &mut OutBuffer) -> io::Result<usize>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51575,"byte_end":51620,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51625,"byte_end":51628,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51633,"byte_end":51682,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51687,"byte_end":51690,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51695,"byte_end":51762,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51767,"byte_end":51780,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52101,"byte_end":52115,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"pub fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51915,"byte_end":51960,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51965,"byte_end":51968,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":51973,"byte_end":52043,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52048,"byte_end":52093,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52696,"byte_end":52701,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"pub fn flush(&mut Self, &mut OutBuffer) -> io::Result<usize>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52517,"byte_end":52557,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52562,"byte_end":52565,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52570,"byte_end":52622,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52627,"byte_end":52688,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52937,"byte_end":52943,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"pub fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52813,"byte_end":52856,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52861,"byte_end":52864,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":52869,"byte_end":52929,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53242,"byte_end":53248,"line_start":73,"line_end":73,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"pub fn finish(&mut Self, &mut OutBuffer, bool) -> io::Result<usize>","parent":{"krate":0,"index":431},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53001,"byte_end":53061,"line_start":67,"line_end":67,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53066,"byte_end":53069,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53074,"byte_end":53121,"line_start":69,"line_end":69,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53126,"byte_end":53129,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53134,"byte_end":53188,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53193,"byte_end":53234,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53516,"byte_end":53520,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53443,"byte_end":53504,"line_start":84,"line_end":84,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54055,"byte_end":54061,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54002,"byte_end":54043,"line_start":108,"line_end":108,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":442},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54158,"byte_end":54167,"line_start":113,"line_end":113,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54068,"byte_end":54112,"line_start":110,"line_end":110,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54117,"byte_end":54120,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54125,"byte_end":54149,"line_start":112,"line_end":112,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":443},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54230,"byte_end":54240,"line_start":116,"line_end":116,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54181,"byte_end":54221,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":444},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54305,"byte_end":54318,"line_start":119,"line_end":119,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54254,"byte_end":54296,"line_start":118,"line_end":118,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":445},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54387,"byte_end":54394,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":447}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54330,"byte_end":54375,"line_start":122,"line_end":122,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54504,"byte_end":54507,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54466,"byte_end":54492,"line_start":128,"line_end":128,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54654,"byte_end":54669,"line_start":134,"line_end":134,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54578,"byte_end":54642,"line_start":133,"line_end":133,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":55029,"byte_end":55053,"line_start":146,"line_end":146,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54952,"byte_end":55017,"line_start":145,"line_end":145,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":55422,"byte_end":55435,"line_start":160,"line_end":160,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"pub fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":55358,"byte_end":55410,"line_start":159,"line_end":159,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":460},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56406,"byte_end":56413,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":462}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56349,"byte_end":56394,"line_start":200,"line_end":200,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56523,"byte_end":56526,"line_start":207,"line_end":207,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56485,"byte_end":56511,"line_start":206,"line_end":206,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56690,"byte_end":56705,"line_start":212,"line_end":212,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56614,"byte_end":56678,"line_start":211,"line_end":211,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57174,"byte_end":57198,"line_start":229,"line_end":229,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57098,"byte_end":57162,"line_start":228,"line_end":228,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57565,"byte_end":57578,"line_start":243,"line_end":243,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"pub fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57503,"byte_end":57553,"line_start":242,"line_end":242,"column_start":5,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":869,"byte_end":892,"line_start":37,"line_end":37,"column_start":8,"column_end":31},"name":"compression_level_range","qualname":"::compression_level_range","value":"pub fn compression_level_range()\n-> std::ops::RangeInclusive<zstd_safe::CompressionLevel>","parent":null,"children":[],"decl_id":null,"docs":" The accepted range of compression levels.\n","sig":null,"attributes":[{"value":"/ The accepted range of compression levels.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":816,"byte_end":861,"line_start":36,"line_end":36,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4456,"byte_end":4466,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6701,"byte_end":6713,"line_start":15,"line_end":15,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9211,"byte_end":9228,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9516,"byte_end":9533,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10197,"byte_end":10214,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10485,"byte_end":10502,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18389,"byte_end":18396,"line_start":31,"line_end":31,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18655,"byte_end":18662,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19239,"byte_end":19246,"line_start":55,"line_end":55,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21416,"byte_end":21423,"line_start":126,"line_end":126,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21734,"byte_end":21741,"line_start":139,"line_end":139,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22019,"byte_end":22026,"line_start":148,"line_end":148,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22674,"byte_end":22681,"line_start":169,"line_end":169,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":24029,"byte_end":24036,"line_start":215,"line_end":215,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25925,"byte_end":25942,"line_start":51,"line_end":51,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26666,"byte_end":26683,"line_start":76,"line_end":76,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26914,"byte_end":26931,"line_start":85,"line_end":85,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27172,"byte_end":27179,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28041,"byte_end":28048,"line_start":122,"line_end":122,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31488,"byte_end":31495,"line_start":223,"line_end":223,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31951,"byte_end":31958,"line_start":243,"line_end":243,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32563,"byte_end":32570,"line_start":259,"line_end":259,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34442,"byte_end":34449,"line_start":319,"line_end":319,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37191,"byte_end":37197,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":38743,"byte_end":38749,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43093,"byte_end":43099,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":47554,"byte_end":47560,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53542,"byte_end":53546,"line_start":87,"line_end":87,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54443,"byte_end":54450,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54934,"byte_end":54941,"line_start":144,"line_end":144,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":55631,"byte_end":55638,"line_start":168,"line_end":168,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56462,"byte_end":56469,"line_start":205,"line_end":205,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57080,"byte_end":57087,"line_start":227,"line_end":227,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57778,"byte_end":57785,"line_start":251,"line_end":251,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":668,"byte_end":673,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":683,"byte_end":687,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":53}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/lib.rs","byte_start":697,"byte_end":703,"line_start":29,"line_end":29,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14697,"byte_end":14701,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":102}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14711,"byte_end":14716,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14742,"byte_end":14745,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":304}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/mod.rs","byte_start":14781,"byte_end":14784,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":404}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/compressor.rs","byte_start":4456,"byte_end":4466,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/block/decompressor.rs","byte_start":6701,"byte_end":6713,"line_start":15,"line_end":15,"column_start":6,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9211,"byte_end":9228,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":9516,"byte_end":9533,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10197,"byte_end":10214,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/dict.rs","byte_start":10485,"byte_end":10502,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18389,"byte_end":18396,"line_start":31,"line_end":31,"column_start":15,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":18655,"byte_end":18662,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":19239,"byte_end":19246,"line_start":55,"line_end":55,"column_start":22,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21416,"byte_end":21423,"line_start":126,"line_end":126,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":133},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":21734,"byte_end":21741,"line_start":139,"line_end":139,"column_start":15,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22019,"byte_end":22026,"line_start":148,"line_end":148,"column_start":18,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":22674,"byte_end":22681,"line_start":169,"line_end":169,"column_start":22,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/read/mod.rs","byte_start":24029,"byte_end":24036,"line_start":215,"line_end":215,"column_start":27,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":137},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":25925,"byte_end":25942,"line_start":51,"line_end":51,"column_start":20,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26666,"byte_end":26683,"line_start":76,"line_end":76,"column_start":25,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":219},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":26914,"byte_end":26931,"line_start":85,"line_end":85,"column_start":26,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":219},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":27172,"byte_end":27179,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":28041,"byte_end":28048,"line_start":122,"line_end":122,"column_start":20,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31488,"byte_end":31495,"line_start":223,"line_end":223,"column_start":30,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":31951,"byte_end":31958,"line_start":243,"line_end":243,"column_start":16,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":32563,"byte_end":32570,"line_start":259,"line_end":259,"column_start":20,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/write/mod.rs","byte_start":34442,"byte_end":34449,"line_start":319,"line_end":319,"column_start":26,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":215},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":37191,"byte_end":37197,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/reader.rs","byte_start":38743,"byte_end":38749,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":326},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":43093,"byte_end":43099,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/zio/writer.rs","byte_start":47554,"byte_end":47560,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":367},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":53542,"byte_end":53546,"line_start":87,"line_end":87,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":437},"to":{"krate":0,"index":431}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54443,"byte_end":54450,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":54934,"byte_end":54941,"line_start":144,"line_end":144,"column_start":10,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":55631,"byte_end":55638,"line_start":168,"line_end":168,"column_start":20,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":445},"to":{"krate":0,"index":431}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":56462,"byte_end":56469,"line_start":205,"line_end":205,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57080,"byte_end":57087,"line_start":227,"line_end":227,"column_start":10,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.7.0+zstd.1.4.9/src/stream/raw.rs","byte_start":57778,"byte_end":57785,"line_start":251,"line_end":251,"column_start":24,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":460},"to":{"krate":0,"index":431}}]}