{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ff","--edition=2018","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=b3101f6a112947f8","-C","extra-filename=-b3101f6a112947f8","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--extern","rand_core=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/librand_core-7aef63c7b7031ab2.rmeta","--extern","subtle=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libsubtle-e2f94bf36a34fd9e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libff-b3101f6a112947f8.rmeta"},"prelude":{"crate_id":{"name":"ff","disambiguator":[10772863217640197424,18295049454361394925]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":4,"id":{"name":"rand_core","disambiguator":[8139118517281542286,12191278135173016247]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":6,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":10,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":19,"id":{"name":"getrandom","disambiguator":[13811811233254902674,13880380393548880828]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":20,"id":{"name":"cfg_if","disambiguator":[1132953217716025813,4978080957525979457]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[6097756368536057402,9635002418138546655]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","num":22,"id":{"name":"subtle","disambiguator":[16473552840971905471,13383263026665092334]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":0,"byte_end":7926,"line_start":1,"line_end":261,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6872,"byte_end":6873,"line_start":226,"line_end":226,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":0,"byte_end":7926,"line_start":1,"line_end":261,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":58},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" This crate provides traits for working with finite fields.\n","sig":null,"attributes":[{"value":"/ This crate provides traits for working with finite fields.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"deny(broken_intra_doc_links)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":168,"byte_end":200,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":201,"byte_end":224,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":892,"byte_end":897,"line_start":30,"line_end":30,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Default + Send + Sync + fmt::Debug + 'static +\nConditionallySelectable + Add<Output = Self> + Sub<Output = Self> + Mul<Output\n= Self> + Neg<Output = Self> + for<'a> Add<&'a Self, Output = Self> +\nfor<'a> Mul<&'a Self, Output = Self> + for<'a> Sub<&'a Self, Output = Self> +\nMulAssign + AddAssign + SubAssign + for<'a> MulAssign<&'a Self> +\nfor<'a> AddAssign<&'a Self> + for<'a> SubAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":833,"byte_end":881,"line_start":29,"line_end":29,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1507,"byte_end":1513,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"random","qualname":"::Field::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random using a user-provided RNG.\n","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1423,"byte_end":1499,"line_start":55,"line_end":55,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1620,"byte_end":1624,"line_start":59,"line_end":59,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1547,"byte_end":1612,"line_start":58,"line_end":58,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1719,"byte_end":1722,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1641,"byte_end":1711,"line_start":61,"line_end":61,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1789,"byte_end":1796,"line_start":65,"line_end":65,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1739,"byte_end":1781,"line_start":64,"line_end":64,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1867,"byte_end":1873,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&Self) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1818,"byte_end":1843,"line_start":67,"line_end":67,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1848,"byte_end":1859,"line_start":68,"line_end":68,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1942,"byte_end":1946,"line_start":73,"line_end":73,"column_start":8,"column_end":12},"name":"cube","qualname":"::Field::cube","value":"pub fn cube(&Self) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Cubes this element.\n","sig":null,"attributes":[{"value":"/ Cubes this element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1895,"byte_end":1918,"line_start":71,"line_end":71,"column_start":5,"column_end":28}},{"value":"must_use","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1923,"byte_end":1934,"line_start":72,"line_end":72,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2053,"byte_end":2059,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2004,"byte_end":2029,"line_start":77,"line_end":77,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2034,"byte_end":2045,"line_start":78,"line_end":78,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2185,"byte_end":2191,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"invert","qualname":"::Field::invert","value":"pub fn invert(&Self) -> CtOption<Self>","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element,\n failing if the element is zero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2081,"byte_end":2137,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/ failing if the element is zero.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2142,"byte_end":2177,"line_start":82,"line_end":82,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2316,"byte_end":2320,"line_start":87,"line_end":87,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::Field::sqrt","value":"pub fn sqrt(&Self) -> CtOption<Self>","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2223,"byte_end":2281,"line_start":85,"line_end":85,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2286,"byte_end":2308,"line_start":86,"line_end":86,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2618,"byte_end":2629,"line_start":94,"line_end":94,"column_start":8,"column_end":19},"name":"pow_vartime","qualname":"::Field::pow_vartime","value":"pub fn pow_vartime<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":" Exponentiates `self` by `exp`, where `exp` is a little-endian order\n integer exponent.","sig":null,"attributes":[{"value":"/ Exponentiates `self` by `exp`, where `exp` is a little-endian order","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2352,"byte_end":2423,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ integer exponent.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2428,"byte_end":2449,"line_start":90,"line_end":90,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2454,"byte_end":2457,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ **This operation is variable time with respect to the exponent.** If the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2462,"byte_end":2538,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ exponent is fixed, this operation is effectively constant time.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2543,"byte_end":2610,"line_start":93,"line_end":93,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3033,"byte_end":3043,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field + From<u64>","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":2974,"byte_end":3022,"line_start":110,"line_end":110,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":59},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3171,"byte_end":3175,"line_start":114,"line_end":114,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: Default + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this binary\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this binary","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3069,"byte_end":3137,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ representation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3142,"byte_end":3161,"line_start":113,"line_end":113,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3368,"byte_end":3376,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"from_str","qualname":"::PrimeField::from_str","value":"pub fn from_str(&str) -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.\n","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3219,"byte_end":3290,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3295,"byte_end":3360,"line_start":117,"line_end":117,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4546,"byte_end":4555,"line_start":162,"line_end":162,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> Option<Self>","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4203,"byte_end":4286,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4291,"byte_end":4375,"line_start":157,"line_end":157,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4380,"byte_end":4401,"line_start":158,"line_end":158,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4406,"byte_end":4409,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4414,"byte_end":4493,"line_start":160,"line_end":160,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4498,"byte_end":4538,"line_start":161,"line_end":161,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4864,"byte_end":4871,"line_start":169,"line_end":169,"column_start":8,"column_end":15},"name":"to_repr","qualname":"::PrimeField::to_repr","value":"pub fn to_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into the standard byte representation for\n this field.","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into the standard byte representation for","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4593,"byte_end":4677,"line_start":164,"line_end":164,"column_start":5,"column_end":89}},{"value":"/ this field.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4682,"byte_end":4697,"line_start":165,"line_end":165,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4702,"byte_end":4705,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ The endianness of the byte representation is implementation-specific. Generic","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4710,"byte_end":4791,"line_start":167,"line_end":167,"column_start":5,"column_end":86}},{"value":"/ encodings of field elements should be treated as opaque.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4796,"byte_end":4856,"line_start":168,"line_end":168,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4948,"byte_end":4954,"line_start":172,"line_end":172,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeField::is_odd","value":"pub fn is_odd(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns true iff this element is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is odd.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4899,"byte_end":4940,"line_start":171,"line_end":171,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5048,"byte_end":5055,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeField::is_even","value":"pub fn is_even(&Self) -> bool","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns true iff this element is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is even.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":4976,"byte_end":5018,"line_start":174,"line_end":174,"column_start":5,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5023,"byte_end":5040,"line_start":175,"line_end":175,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":65},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5185,"byte_end":5193,"line_start":181,"line_end":181,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5107,"byte_end":5174,"line_start":180,"line_end":180,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":66},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5347,"byte_end":5355,"line_start":186,"line_end":186,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5205,"byte_end":5282,"line_start":183,"line_end":183,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5287,"byte_end":5290,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This is usually `Self::NUM_BITS - 1`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5295,"byte_end":5336,"line_start":185,"line_end":185,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5779,"byte_end":5803,"line_start":197,"line_end":197,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns a fixed multiplicative generator of `modulus - 1` order. This element must\n also be a quadratic nonresidue.","sig":null,"attributes":[{"value":"/ Returns a fixed multiplicative generator of `modulus - 1` order. This element must","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5367,"byte_end":5453,"line_start":188,"line_end":188,"column_start":5,"column_end":91}},{"value":"/ also be a quadratic nonresidue.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5458,"byte_end":5493,"line_start":189,"line_end":189,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5498,"byte_end":5501,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ It can be calculated using [SageMath] as `GF(modulus).primitive_element()`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5506,"byte_end":5585,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5590,"byte_end":5593,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Implementations of this method MUST ensure that this is the generator used to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5598,"byte_end":5679,"line_start":193,"line_end":193,"column_start":5,"column_end":86}},{"value":"/ derive `Self::root_of_unity`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5684,"byte_end":5717,"line_start":194,"line_end":194,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5722,"byte_end":5725,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ [SageMath]: https://www.sagemath.org/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5730,"byte_end":5771,"line_start":196,"line_end":196,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":68},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6033,"byte_end":6034,"line_start":203,"line_end":203,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","sig":null,"attributes":[{"value":"/ An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5820,"byte_end":5900,"line_start":199,"line_end":199,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5905,"byte_end":5908,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This is the number of leading zero bits in the little-endian bit representation of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":5913,"byte_end":5999,"line_start":201,"line_end":201,"column_start":5,"column_end":91}},{"value":"/ `modulus - 1`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6004,"byte_end":6022,"line_start":202,"line_end":202,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6232,"byte_end":6245,"line_start":209,"line_end":209,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Returns the `2^s` root of unity.","sig":null,"attributes":[{"value":"/ Returns the `2^s` root of unity.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6046,"byte_end":6082,"line_start":205,"line_end":205,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6087,"byte_end":6090,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ It can be calculated by exponentiating `Self::multiplicative_generator` by `t`,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6095,"byte_end":6178,"line_start":207,"line_end":207,"column_start":5,"column_end":88}},{"value":"/ where `t = (modulus - 1) >> Self::S`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6183,"byte_end":6224,"line_start":208,"line_end":208,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7021,"byte_end":7024,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"sbb","qualname":"::arith_impl::sbb","value":"pub fn sbb(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a - b - borrow, returning the result and modifying\n the borrow value.\n","sig":null,"attributes":[{"value":"/ Calculate a - b - borrow, returning the result and modifying","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6897,"byte_end":6961,"line_start":229,"line_end":229,"column_start":5,"column_end":69}},{"value":"/ the borrow value.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6966,"byte_end":6987,"line_start":230,"line_end":230,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":6992,"byte_end":7009,"line_start":231,"line_end":231,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7360,"byte_end":7363,"line_start":243,"line_end":243,"column_start":12,"column_end":15},"name":"adc","qualname":"::arith_impl::adc","value":"pub fn adc(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + b + carry, returning the sum and modifying the\n carry value.\n","sig":null,"attributes":[{"value":"/ Calculate a + b + carry, returning the sum and modifying the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7241,"byte_end":7305,"line_start":240,"line_end":240,"column_start":5,"column_end":69}},{"value":"/ carry value.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7310,"byte_end":7326,"line_start":241,"line_end":241,"column_start":5,"column_end":21}},{"value":"inline(always)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7331,"byte_end":7348,"line_start":242,"line_end":242,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7708,"byte_end":7722,"line_start":254,"line_end":254,"column_start":12,"column_end":26},"name":"mac_with_carry","qualname":"::arith_impl::mac_with_carry","value":"pub fn mac_with_carry(u64, u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + (b * c) + carry, returning the least significant digit\n and setting carry to the most significant digit.\n","sig":null,"attributes":[{"value":"/ Calculate a + (b * c) + carry, returning the least significant digit","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7545,"byte_end":7617,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/ and setting carry to the most significant digit.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7622,"byte_end":7674,"line_start":252,"line_end":252,"column_start":5,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":7679,"byte_end":7696,"line_start":253,"line_end":253,"column_start":5,"column_end":22}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":903,"byte_end":908,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":915,"byte_end":917,"line_start":32,"line_end":32,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2482},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":924,"byte_end":928,"line_start":33,"line_end":33,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2832},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":935,"byte_end":940,"line_start":34,"line_end":34,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2447},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":947,"byte_end":954,"line_start":35,"line_end":35,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2800},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":961,"byte_end":965,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2822},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":972,"byte_end":976,"line_start":37,"line_end":37,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2834},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":988,"byte_end":993,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":8701},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1014,"byte_end":1037,"line_start":40,"line_end":40,"column_start":7,"column_end":30},"kind":"SuperTrait","from":{"krate":22,"index":65},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1044,"byte_end":1047,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2889},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1069,"byte_end":1072,"line_start":42,"line_end":42,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2894},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1094,"byte_end":1097,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2899},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1119,"byte_end":1122,"line_start":44,"line_end":44,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2916},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1152,"byte_end":1155,"line_start":45,"line_end":45,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2889},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1195,"byte_end":1198,"line_start":46,"line_end":46,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2899},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1238,"byte_end":1241,"line_start":47,"line_end":47,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2894},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1273,"byte_end":1282,"line_start":48,"line_end":48,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2928},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1289,"byte_end":1298,"line_start":49,"line_end":49,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2920},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1305,"byte_end":1314,"line_start":50,"line_end":50,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2924},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1329,"byte_end":1338,"line_start":51,"line_end":51,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2928},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1363,"byte_end":1372,"line_start":52,"line_end":52,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2920},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":1397,"byte_end":1406,"line_start":53,"line_end":53,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2924},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3045,"byte_end":3050,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":39},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.10.0/src/lib.rs","byte_start":3053,"byte_end":3057,"line_start":111,"line_end":111,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2728},"to":{"krate":0,"index":58}}]}