{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2","program":"/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","brotli2","/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=105101faeb0cc8c3","-C","extra-filename=-105101faeb0cc8c3","--out-dir","/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","-L","dependency=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps","--extern","brotli_sys=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libbrotli_sys-e0c962ef9dda52b4.rmeta","--extern","libc=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/liblibc-79a05afd6422acd8.rmeta","--cap-lints","allow","-L","native=/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/build/brotli-sys-0a3102edc35c32f3/out","--error-format=json","--sysroot","/home/hannydevelop/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hannydevelop/gravity-bridge/orchestrator/gorc/target/rls/debug/deps/libbrotli2-105101faeb0cc8c3.rmeta"},"prelude":{"crate_id":{"name":"brotli2","disambiguator":[4859378537277068970,7798319018464645635]},"crate_root":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src","external_crates":[{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16244594805693024294,13769610595479902485]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10377672983135696745,6222977342718677897]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12556834526510219591,10145975442274216472]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1920608168423631117,11305390197699278538]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14153420169627805217,3922141685752559776]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[8992588241071530954,2055378767109441873]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6584924783227651491,7746393078969085327]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16866912217167506759,12404743428505733407]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[5891363554589716223,15364815277334307594]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15133864894733438722,17571364763769299029]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5376887079506337588,3050710466351220396]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[3374711390048344050,17348866986865533303]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[16389676859204901274,11575250456210569958]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4785159557203218631,3838940703516147450]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":18,"id":{"name":"brotli_sys","disambiguator":[2458040584551289189,14620994714173254806]}},{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[6097756368536057402,9635002418138546655]}}],"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":0,"byte_end":3990,"line_start":1,"line_end":133,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":0,"byte_end":3990,"line_start":1,"line_end":133,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":63},{"krate":0,"index":122},{"krate":0,"index":162},{"krate":0,"index":330},{"krate":0,"index":350},{"krate":0,"index":348},{"krate":0,"index":346},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":351},{"krate":0,"index":358},{"krate":0,"index":356},{"krate":0,"index":235}],"decl_id":null,"docs":" Brotli Compression/Decompression for Rust","sig":null,"attributes":[{"value":"/ Brotli Compression/Decompression for Rust","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate is a binding to the [official brotli implementation][brotli] and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":50,"byte_end":129,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ provides in-memory and I/O streams for Rust wrappers.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":130,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [brotli]: https://github.com/google/brotli","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":192,"byte_end":238,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":239,"byte_end":242,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":243,"byte_end":257,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":258,"byte_end":261,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":262,"byte_end":269,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":270,"byte_end":298,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/ use brotli2::read::{BrotliEncoder, BrotliDecoder};","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":299,"byte_end":353,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":354,"byte_end":357,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // Round trip some bytes from a byte source, into a compressor, into a","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":358,"byte_end":432,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ // decompressor, and finally into a vector.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":433,"byte_end":480,"line_start":15,"line_end":15,"column_start":1,"column_end":48}},{"value":"/ let data = \"Hello, World!\".as_bytes();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":481,"byte_end":523,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/ let compressor = BrotliEncoder::new(data, 9);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":524,"byte_end":573,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ let mut decompressor = BrotliDecoder::new(compressor);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":574,"byte_end":632,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":633,"byte_end":636,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let mut contents = String::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":637,"byte_end":674,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/ decompressor.read_to_string(&mut contents).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":675,"byte_end":731,"line_start":21,"line_end":21,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(contents, \"Hello, World!\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":732,"byte_end":774,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":775,"byte_end":782,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":784,"byte_end":806,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":245},{"krate":0,"index":268},{"krate":0,"index":266},{"krate":0,"index":264},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":269},{"krate":0,"index":278},{"krate":0,"index":276},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":280},{"krate":0,"index":294},{"krate":0,"index":292},{"krate":0,"index":291},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":296},{"krate":0,"index":312},{"krate":0,"index":310},{"krate":0,"index":309},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":41},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" Raw interface to in-memory compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Raw interface to in-memory compression/decompression streams","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":3992,"byte_end":4056,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":33},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4390,"byte_end":4400,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::raw::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":34}],"decl_id":null,"docs":" In-memory state for decompressing brotli-encoded data.","sig":null,"attributes":[{"value":"/ In-memory state for decompressing brotli-encoded data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4208,"byte_end":4266,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4267,"byte_end":4270,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This stream is at the heart of the I/O streams and is used to decompress an","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4271,"byte_end":4350,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ incoming brotli stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4351,"byte_end":4378,"line_start":18,"line_end":18,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4688,"byte_end":4696,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Compress","qualname":"::raw::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":38}],"decl_id":null,"docs":" In-memory state for compressing/encoding data with brotli","sig":null,"attributes":[{"value":"/ In-memory state for compressing/encoding data with brotli","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4525,"byte_end":4586,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4587,"byte_end":4590,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This stream is at the heart of the I/O encoders and is used to compress","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4591,"byte_end":4666,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4667,"byte_end":4676,"line_start":29,"line_end":29,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":246},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5260,"byte_end":5267,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"Process","qualname":"::raw::CompressOp::Process","value":"CompressOp::Process","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Compress input data\n","sig":null,"attributes":[{"value":"/ Compress input data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5232,"byte_end":5255,"line_start":46,"line_end":46,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5410,"byte_end":5415,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Flush","qualname":"::raw::CompressOp::Flush","value":"CompressOp::Flush","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Compress input data, ensuring that all input so far has been\n written out\n","sig":null,"attributes":[{"value":"/ Compress input data, ensuring that all input so far has been","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5321,"byte_end":5385,"line_start":48,"line_end":48,"column_start":5,"column_end":69}},{"value":"/ written out","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5390,"byte_end":5405,"line_start":49,"line_end":49,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":252},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5626,"byte_end":5632,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Finish","qualname":"::raw::CompressOp::Finish","value":"CompressOp::Finish","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Compress input data, ensuring that all input so far has been\n written out and then finalizing the stream so no more data can\n be written\n","sig":null,"attributes":[{"value":"/ Compress input data, ensuring that all input so far has been","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5467,"byte_end":5531,"line_start":51,"line_end":51,"column_start":5,"column_end":69}},{"value":"/ written out and then finalizing the stream so no more data can","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5536,"byte_end":5602,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ be written","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5607,"byte_end":5621,"line_start":53,"line_end":53,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5883,"byte_end":5895,"line_start":58,"line_end":58,"column_start":5,"column_end":17},"name":"EmitMetadata","qualname":"::raw::CompressOp::EmitMetadata","value":"CompressOp::EmitMetadata","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Emit a metadata block to the stream, an opaque piece of out-of-band\n data that does not interfere with the main stream of data. Metadata\n blocks *must* be no longer than 16MiB\n","sig":null,"attributes":[{"value":"/ Emit a metadata block to the stream, an opaque piece of out-of-band","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5685,"byte_end":5756,"line_start":55,"line_end":55,"column_start":5,"column_end":76}},{"value":"/ data that does not interfere with the main stream of data. Metadata","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5761,"byte_end":5832,"line_start":56,"line_end":56,"column_start":5,"column_end":76}},{"value":"/ blocks *must* be no longer than 16MiB","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5837,"byte_end":5878,"line_start":57,"line_end":57,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":245},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5215,"byte_end":5225,"line_start":45,"line_end":45,"column_start":10,"column_end":20},"name":"CompressOp","qualname":"::raw::CompressOp","value":"pub enum CompressOp { Process = , Flush = , Finish = , EmitMetadata = , }","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255}],"decl_id":null,"docs":" Possible choices for the operation performed by the compressor.","sig":null,"attributes":[{"value":"/ Possible choices for the operation performed by the compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4817,"byte_end":4884,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4885,"byte_end":4888,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ When using any operation except `Process`, you must *not* alter the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4889,"byte_end":4960,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ input buffer or use a different operation until the current operation","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4961,"byte_end":5034,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ has 'completed'. An operation may need to be repeated with more space to","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5035,"byte_end":5111,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ write data until it can complete.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5112,"byte_end":5149,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"repr(isize)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5150,"byte_end":5164,"line_start":43,"line_end":43,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":269},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6077,"byte_end":6082,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"Error","qualname":"::raw::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error that can happen from decompressing or compressing a brotli stream.\n","sig":null,"attributes":[{"value":"/ Error that can happen from decompressing or compressing a brotli stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":5954,"byte_end":6030,"line_start":61,"line_end":61,"column_start":1,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":281},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6376,"byte_end":6384,"line_start":71,"line_end":71,"column_start":5,"column_end":13},"name":"Finished","qualname":"::raw::CoStatus::Finished","value":"CoStatus::Finished","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" The operation completed successfully\n","sig":null,"attributes":[{"value":"/ The operation completed successfully","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6331,"byte_end":6371,"line_start":70,"line_end":70,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":283},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6490,"byte_end":6500,"line_start":74,"line_end":74,"column_start":5,"column_end":15},"name":"Unfinished","qualname":"::raw::CoStatus::Unfinished","value":"CoStatus::Unfinished","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" The operation has more work to do and needs to be called again with the\n same buffer\n","sig":null,"attributes":[{"value":"/ The operation has more work to do and needs to be called again with the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6390,"byte_end":6465,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ same buffer","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6470,"byte_end":6485,"line_start":73,"line_end":73,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":280},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6316,"byte_end":6324,"line_start":69,"line_end":69,"column_start":10,"column_end":18},"name":"CoStatus","qualname":"::raw::CoStatus","value":"pub enum CoStatus { Finished, Unfinished, }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283}],"decl_id":null,"docs":" Indication of whether a compression operation is 'complete'. This does\n not indicate whether the whole stream is complete - see `Compress::compress`\n for details.\n","sig":null,"attributes":[{"value":"/ Indication of whether a compression operation is 'complete'. This does","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6089,"byte_end":6163,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ not indicate whether the whole stream is complete - see `Compress::compress`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6164,"byte_end":6244,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ for details.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6245,"byte_end":6261,"line_start":67,"line_end":67,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":297},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6685,"byte_end":6693,"line_start":81,"line_end":81,"column_start":5,"column_end":13},"name":"Finished","qualname":"::raw::DeStatus::Finished","value":"DeStatus::Finished","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" Decompression was successful and has finished\n","sig":null,"attributes":[{"value":"/ Decompression was successful and has finished","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6631,"byte_end":6680,"line_start":80,"line_end":80,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":299},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6740,"byte_end":6749,"line_start":83,"line_end":83,"column_start":5,"column_end":14},"name":"NeedInput","qualname":"::raw::DeStatus::NeedInput","value":"DeStatus::NeedInput","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" More input is needed to continue\n","sig":null,"attributes":[{"value":"/ More input is needed to continue","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6699,"byte_end":6735,"line_start":82,"line_end":82,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":301},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6797,"byte_end":6807,"line_start":85,"line_end":85,"column_start":5,"column_end":15},"name":"NeedOutput","qualname":"::raw::DeStatus::NeedOutput","value":"DeStatus::NeedOutput","parent":{"krate":0,"index":296},"children":[],"decl_id":null,"docs":" More output is needed to continue\n","sig":null,"attributes":[{"value":"/ More output is needed to continue","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6755,"byte_end":6792,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":296},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6616,"byte_end":6624,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"name":"DeStatus","qualname":"::raw::DeStatus","value":"pub enum DeStatus { Finished, NeedInput, NeedOutput, }","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301}],"decl_id":null,"docs":" Possible status results returned from decompressing.\n","sig":null,"attributes":[{"value":"/ Possible status results returned from decompressing.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6505,"byte_end":6561,"line_start":77,"line_end":77,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6931,"byte_end":6934,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"pub fn new() -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new brotli decompression/decoding stream ready to receive\n data.\n","sig":null,"attributes":[{"value":"/ Creates a new brotli decompression/decoding stream ready to receive","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6834,"byte_end":6905,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6910,"byte_end":6919,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7868,"byte_end":7878,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"pub fn decompress(&mut Self, &mut &[u8], &mut &mut [u8])\n-> Result<DeStatus, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress some input data and write it to a buffer of output data.","sig":null,"attributes":[{"value":"/ Decompress some input data and write it to a buffer of output data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7160,"byte_end":7231,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7236,"byte_end":7239,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This function will decompress the data in `input` and place the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7244,"byte_end":7318,"line_start":101,"line_end":101,"column_start":5,"column_end":79}},{"value":"/ in `output`, returning the result. Possible statuses that can be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7323,"byte_end":7391,"line_start":102,"line_end":102,"column_start":5,"column_end":73}},{"value":"/ returned are that the stream is finished, more input is needed, or more","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7396,"byte_end":7471,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ output space is needed.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7476,"byte_end":7503,"line_start":104,"line_end":104,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7508,"byte_end":7511,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ The `input` slice is updated to point to the remaining data that was not","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7516,"byte_end":7592,"line_start":106,"line_end":106,"column_start":5,"column_end":81}},{"value":"/ consumed, and the `output` slice is updated to point to the portion of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7597,"byte_end":7671,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ the output slice that still needs to be filled in.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7676,"byte_end":7730,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7735,"byte_end":7738,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7743,"byte_end":7755,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7760,"byte_end":7763,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ If the input stream is not a valid brotli stream, then an error is","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7768,"byte_end":7838,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ returned.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":7843,"byte_end":7856,"line_start":113,"line_end":113,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":9140,"byte_end":9151,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"take_output","qualname":"<Decompress>::take_output","value":"pub fn take_output(&mut Self, Option<usize>) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a slice of the internal decompressor buffer up to `size_limit` in length\n (unlimited length if `None`), consuming it. As the internal buffer may not be\n contiguous, consecutive calls may return more output until this function returns\n `None`.\n","sig":null,"attributes":[{"value":"/ Retrieve a slice of the internal decompressor buffer up to `size_limit` in length","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":8852,"byte_end":8937,"line_start":135,"line_end":135,"column_start":5,"column_end":90}},{"value":"/ (unlimited length if `None`), consuming it. As the internal buffer may not be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":8942,"byte_end":9023,"line_start":136,"line_end":136,"column_start":5,"column_end":86}},{"value":"/ contiguous, consecutive calls may return more output until this function returns","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":9028,"byte_end":9112,"line_start":137,"line_end":137,"column_start":5,"column_end":89}},{"value":"/ `None`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":9117,"byte_end":9128,"line_start":138,"line_end":138,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10764,"byte_end":10778,"line_start":180,"line_end":180,"column_start":8,"column_end":22},"name":"decompress_buf","qualname":"::raw::decompress_buf","value":"pub fn decompress_buf(&[u8], &mut &mut [u8]) -> Result<usize, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress data in one go in memory.","sig":null,"attributes":[{"value":"/ Decompress data in one go in memory.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10466,"byte_end":10506,"line_start":174,"line_end":174,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10507,"byte_end":10510,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Decompresses the data in `input` into the `output` buffer. The `output`","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10511,"byte_end":10586,"line_start":176,"line_end":176,"column_start":1,"column_end":76}},{"value":"/ buffer is updated to point to the actual output slice if successful, or","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10587,"byte_end":10662,"line_start":177,"line_end":177,"column_start":1,"column_end":76}},{"value":"/ an error is returned. The output buffer being too small is considered","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10663,"byte_end":10736,"line_start":178,"line_end":178,"column_start":1,"column_end":74}},{"value":"/ to be an error.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10737,"byte_end":10756,"line_start":179,"line_end":179,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11392,"byte_end":11395,"line_start":199,"line_end":199,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"pub fn new() -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compressor ready to encode data into brotli\n","sig":null,"attributes":[{"value":"/ Creates a new compressor ready to encode data into brotli","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11319,"byte_end":11380,"line_start":198,"line_end":198,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14503,"byte_end":14511,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"pub fn compress(&mut Self, CompressOp, &mut &[u8], &mut &mut [u8])\n-> Result<CoStatus, Error>","parent":null,"children":[],"decl_id":null,"docs":" Pass some input data to the compressor and write it to a buffer of\n output data, compressing or otherwise handling it as instructed by\n the specified operation.","sig":null,"attributes":[{"value":"/ Pass some input data to the compressor and write it to a buffer of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11715,"byte_end":11785,"line_start":211,"line_end":211,"column_start":5,"column_end":75}},{"value":"/ output data, compressing or otherwise handling it as instructed by","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11790,"byte_end":11860,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ the specified operation.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11865,"byte_end":11893,"line_start":213,"line_end":213,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11898,"byte_end":11901,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ This function will handle the data in `input` and place the output","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11906,"byte_end":11976,"line_start":215,"line_end":215,"column_start":5,"column_end":75}},{"value":"/ in `output`, returning the Result. Possible statuses are that the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11981,"byte_end":12050,"line_start":216,"line_end":216,"column_start":5,"column_end":74}},{"value":"/ operation is complete or incomplete.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12055,"byte_end":12095,"line_start":217,"line_end":217,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12100,"byte_end":12103,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The `input` slice is updated to point to the remaining data that was not","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12108,"byte_end":12184,"line_start":219,"line_end":219,"column_start":5,"column_end":81}},{"value":"/ consumed, and the `output` slice is updated to point to the portion of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12189,"byte_end":12263,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ the output slice that still needs to be filled in.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12268,"byte_end":12322,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12327,"byte_end":12330,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ If the result of a compress operation is `Unfinished` (which it may be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12335,"byte_end":12409,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ for any operation except `Process`), you *must* call the operation again","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12414,"byte_end":12490,"line_start":224,"line_end":224,"column_start":5,"column_end":81}},{"value":"/ with the same operation and input buffer and more space to output to.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12495,"byte_end":12568,"line_start":225,"line_end":225,"column_start":5,"column_end":78}},{"value":"/ `Process` will never return `Unfinished`, but it is a logic error to end","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12573,"byte_end":12649,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ a buffer without calling either `Flush` or `Finish` as some output data","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12654,"byte_end":12729,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ may not have been written.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12734,"byte_end":12764,"line_start":228,"line_end":228,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12769,"byte_end":12772,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12777,"byte_end":12789,"line_start":230,"line_end":230,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12794,"byte_end":12797,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Returns an error if brotli encountered an error while processing the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12802,"byte_end":12882,"line_start":232,"line_end":232,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12887,"byte_end":12890,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12895,"byte_end":12909,"line_start":234,"line_end":234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12914,"byte_end":12917,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12922,"byte_end":12929,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use brotli2::raw::{Error, Compress, CompressOp, CoStatus, decompress_buf};","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":12934,"byte_end":13012,"line_start":237,"line_end":237,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13017,"byte_end":13020,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ // An example of compressing `input` into the destination vector","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13025,"byte_end":13093,"line_start":239,"line_end":239,"column_start":5,"column_end":73}},{"value":"/ // `output`, expanding as necessary","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13098,"byte_end":13137,"line_start":240,"line_end":240,"column_start":5,"column_end":44}},{"value":"/ fn compress_vec(mut input: &[u8],","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13142,"byte_end":13179,"line_start":241,"line_end":241,"column_start":5,"column_end":42}},{"value":"/                 output: &mut Vec<u8>) -> Result<(), Error> {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13184,"byte_end":13248,"line_start":242,"line_end":242,"column_start":5,"column_end":69}},{"value":"/     let mut compress = Compress::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13253,"byte_end":13296,"line_start":243,"line_end":243,"column_start":5,"column_end":48}},{"value":"/     let nilbuf = &mut &mut [][..];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13301,"byte_end":13339,"line_start":244,"line_end":244,"column_start":5,"column_end":43}},{"value":"/     loop {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13344,"byte_end":13358,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/         // Compressing to a buffer is easiest when the slice is already","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13363,"byte_end":13438,"line_start":246,"line_end":246,"column_start":5,"column_end":80}},{"value":"/         // available - since we need to grow, extend from compressor","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13443,"byte_end":13515,"line_start":247,"line_end":247,"column_start":5,"column_end":77}},{"value":"/         // internal buffer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13520,"byte_end":13551,"line_start":248,"line_end":248,"column_start":5,"column_end":36}},{"value":"/         let status = try!(compress.compress(CompressOp::Finish, &mut input, nilbuf));","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13556,"byte_end":13645,"line_start":249,"line_end":249,"column_start":5,"column_end":94}},{"value":"/         while let Some(buf) = compress.take_output(None) {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13650,"byte_end":13712,"line_start":250,"line_end":250,"column_start":5,"column_end":67}},{"value":"/             output.extend_from_slice(buf)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13717,"byte_end":13762,"line_start":251,"line_end":251,"column_start":5,"column_end":50}},{"value":"/         }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13767,"byte_end":13780,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/         match status {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13785,"byte_end":13811,"line_start":253,"line_end":253,"column_start":5,"column_end":31}},{"value":"/             CoStatus::Finished => break,","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13816,"byte_end":13860,"line_start":254,"line_end":254,"column_start":5,"column_end":49}},{"value":"/             CoStatus::Unfinished => (),","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13865,"byte_end":13908,"line_start":255,"line_end":255,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13913,"byte_end":13926,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13931,"byte_end":13940,"line_start":257,"line_end":257,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13945,"byte_end":13959,"line_start":258,"line_end":258,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13964,"byte_end":13969,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13974,"byte_end":13977,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ fn assert_roundtrip(data: &[u8]) {","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":13982,"byte_end":14020,"line_start":261,"line_end":261,"column_start":5,"column_end":43}},{"value":"/     let mut compressed = Vec::new();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14025,"byte_end":14065,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/     compress_vec(data, &mut compressed).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14070,"byte_end":14123,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14128,"byte_end":14131,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/     let mut decompressed = [0; 2048];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14136,"byte_end":14177,"line_start":265,"line_end":265,"column_start":5,"column_end":46}},{"value":"/     let mut decompressed = &mut decompressed[..];","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14182,"byte_end":14235,"line_start":266,"line_end":266,"column_start":5,"column_end":58}},{"value":"/     decompress_buf(&compressed, &mut decompressed).unwrap();","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14240,"byte_end":14304,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/     assert_eq!(decompressed, data);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14309,"byte_end":14348,"line_start":268,"line_end":268,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14353,"byte_end":14358,"line_start":269,"line_end":269,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14363,"byte_end":14366,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ assert_roundtrip(b\"Hello, World!\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14371,"byte_end":14410,"line_start":271,"line_end":271,"column_start":5,"column_end":44}},{"value":"/ assert_roundtrip(b\"\");","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14415,"byte_end":14441,"line_start":272,"line_end":272,"column_start":5,"column_end":31}},{"value":"/ assert_roundtrip(&[6; 1024]);","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14446,"byte_end":14479,"line_start":273,"line_end":273,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":14484,"byte_end":14491,"line_start":274,"line_end":274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16387,"byte_end":16398,"line_start":314,"line_end":314,"column_start":12,"column_end":23},"name":"take_output","qualname":"<Compress>::take_output","value":"pub fn take_output(&mut Self, Option<usize>) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a slice of the internal compressor buffer up to `size_limit` in length\n (unlimited length if `None`), consuming it. As the internal buffer may not be\n contiguous, consecutive calls may return more output until this function returns\n `None`.\n","sig":null,"attributes":[{"value":"/ Retrieve a slice of the internal compressor buffer up to `size_limit` in length","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16101,"byte_end":16184,"line_start":310,"line_end":310,"column_start":5,"column_end":88}},{"value":"/ (unlimited length if `None`), consuming it. As the internal buffer may not be","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16189,"byte_end":16270,"line_start":311,"line_end":311,"column_start":5,"column_end":86}},{"value":"/ contiguous, consecutive calls may return more output until this function returns","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16275,"byte_end":16359,"line_start":312,"line_end":312,"column_start":5,"column_end":89}},{"value":"/ `None`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16364,"byte_end":16375,"line_start":313,"line_end":313,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":17108,"byte_end":17118,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"set_params","qualname":"<Compress>::set_params","value":"pub fn set_params(&mut Self, &CompressParams)","parent":null,"children":[],"decl_id":null,"docs":" Configure the parameters of this compression session.","sig":null,"attributes":[{"value":"/ Configure the parameters of this compression session.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16934,"byte_end":16991,"line_start":328,"line_end":328,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":16996,"byte_end":16999,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Note that this is likely to only successful if called before compression","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":17004,"byte_end":17080,"line_start":330,"line_end":330,"column_start":5,"column_end":81}},{"value":"/ starts.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":17085,"byte_end":17096,"line_start":331,"line_end":331,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":19051,"byte_end":19063,"line_start":373,"line_end":373,"column_start":8,"column_end":20},"name":"compress_buf","qualname":"::raw::compress_buf","value":"pub fn compress_buf(&CompressParams, &[u8], &mut &mut [u8])\n-> Result<usize, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the data in `input` into `output`.","sig":null,"attributes":[{"value":"/ Compresses the data in `input` into `output`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18693,"byte_end":18742,"line_start":365,"line_end":365,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18743,"byte_end":18746,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ The `output` buffer is updated to point to the exact slice which contains","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18747,"byte_end":18824,"line_start":367,"line_end":367,"column_start":1,"column_end":78}},{"value":"/ the output data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18825,"byte_end":18845,"line_start":368,"line_end":368,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18846,"byte_end":18849,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ If successful, the amount of compressed bytes are returned (the size of the","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18850,"byte_end":18929,"line_start":370,"line_end":370,"column_start":1,"column_end":80}},{"value":"/ `output` slice), or an error is returned. The output buffer being too small","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18930,"byte_end":19009,"line_start":371,"line_end":371,"column_start":1,"column_end":80}},{"value":"/ is considered to be an error.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":19010,"byte_end":19043,"line_start":372,"line_end":372,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bufread","qualname":"::bufread","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":314},{"krate":0,"index":328},{"krate":0,"index":327},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":101},{"krate":0,"index":108},{"krate":0,"index":113},{"krate":0,"index":119}],"decl_id":null,"docs":" I/O streams for wrapping `BufRead` types as encoders/decoders\n","sig":null,"attributes":[{"value":"/ I/O streams for wrapping `BufRead` types as encoders/decoders","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22468,"byte_end":22533,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22977,"byte_end":22990,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::bufread::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" A brotli encoder, or compressor.","sig":null,"attributes":[{"value":"/ A brotli encoder, or compressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22773,"byte_end":22809,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22810,"byte_end":22813,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and will read uncompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22814,"byte_end":22892,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":22893,"byte_end":22965,"line_start":19,"line_end":19,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23297,"byte_end":23310,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::bufread::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" A brotli decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A brotli decoder, or decompressor.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23091,"byte_end":23129,"line_start":27,"line_end":27,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23130,"byte_end":23133,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This structure implements a `BufRead` interface and takes a stream of","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23134,"byte_end":23207,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23208,"byte_end":23285,"line_start":30,"line_end":30,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23625,"byte_end":23628,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<R>>::new","value":"pub fn new(R, u32) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23431,"byte_end":23505,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23510,"byte_end":23552,"line_start":39,"line_end":39,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23557,"byte_end":23560,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here is typically 0-11.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23565,"byte_end":23613,"line_start":41,"line_end":41,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23995,"byte_end":24006,"line_start":54,"line_end":54,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<R>>::from_params","value":"pub fn from_params(R, &CompressParams) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `CompressParams`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder with a custom `CompressParams`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23926,"byte_end":23983,"line_start":53,"line_end":53,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24348,"byte_end":24355,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24287,"byte_end":24336,"line_start":65,"line_end":65,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24600,"byte_end":24607,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24400,"byte_end":24457,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24462,"byte_end":24465,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24470,"byte_end":24542,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24547,"byte_end":24588,"line_start":73,"line_end":73,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24735,"byte_end":24745,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24664,"byte_end":24723,"line_start":78,"line_end":78,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27442,"byte_end":27445,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<R>>::new","value":"pub fn new(R) -> BrotliDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27342,"byte_end":27414,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27419,"byte_end":27430,"line_start":157,"line_end":157,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27660,"byte_end":27667,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27599,"byte_end":27648,"line_start":166,"line_end":166,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27912,"byte_end":27919,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27712,"byte_end":27769,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27774,"byte_end":27777,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27782,"byte_end":27854,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27859,"byte_end":27900,"line_start":174,"line_end":174,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":28047,"byte_end":28057,"line_start":180,"line_end":180,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27976,"byte_end":28035,"line_start":179,"line_end":179,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":159}],"decl_id":null,"docs":" Reader-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Reader-based compression/decompression streams","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":29659,"byte_end":29709,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":137},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":29941,"byte_end":29954,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::read::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":139}],"decl_id":null,"docs":" A compression stream which wraps an uncompressed stream of data. Compressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which wraps an uncompressed stream of data. Compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":29811,"byte_end":29890,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":29891,"byte_end":29929,"line_start":11,"line_end":11,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30149,"byte_end":30162,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::read::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" A decompression stream which wraps a compressed stream of data. Decompressed\n data will be read from the stream.\n","sig":null,"attributes":[{"value":"/ A decompression stream which wraps a compressed stream of data. Decompressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30018,"byte_end":30098,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ data will be read from the stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30099,"byte_end":30137,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30496,"byte_end":30499,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<R>>::new","value":"pub fn new(R, u32) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to read compress output to the give output stream.","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30263,"byte_end":30337,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ to read compress output to the give output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30342,"byte_end":30396,"line_start":24,"line_end":24,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30401,"byte_end":30404,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here is typically 0-9 with 6 being a good default.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30409,"byte_end":30484,"line_start":26,"line_end":26,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30728,"byte_end":30739,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<R>>::from_params","value":"pub fn from_params(R, &CompressParams) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Configure the compression parameters of this encoder.\n","sig":null,"attributes":[{"value":"/ Configure the compression parameters of this encoder.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30659,"byte_end":30716,"line_start":33,"line_end":33,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31036,"byte_end":31043,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30975,"byte_end":31024,"line_start":41,"line_end":41,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31309,"byte_end":31316,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31109,"byte_end":31166,"line_start":46,"line_end":46,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31171,"byte_end":31174,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31179,"byte_end":31251,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31256,"byte_end":31297,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31469,"byte_end":31479,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliEncoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31390,"byte_end":31457,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31863,"byte_end":31866,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<R>>::new","value":"pub fn new(R) -> BrotliDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompression stream, which will read compressed\n data from the given input stream and decompress it.\n","sig":null,"attributes":[{"value":"/ Create a new decompression stream, which will read compressed","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31726,"byte_end":31791,"line_start":67,"line_end":67,"column_start":5,"column_end":70}},{"value":"/ data from the given input stream and decompress it.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31796,"byte_end":31851,"line_start":68,"line_end":68,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32068,"byte_end":32075,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32007,"byte_end":32056,"line_start":75,"line_end":75,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32341,"byte_end":32348,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32141,"byte_end":32198,"line_start":80,"line_end":80,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32203,"byte_end":32206,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32211,"byte_end":32283,"line_start":82,"line_end":82,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32288,"byte_end":32329,"line_start":83,"line_end":83,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32501,"byte_end":32511,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32422,"byte_end":32489,"line_start":88,"line_end":88,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":197},{"krate":0,"index":204},{"krate":0,"index":213},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":228},{"krate":0,"index":232}],"decl_id":null,"docs":" Writer-based compression/decompression streams\n","sig":null,"attributes":[{"value":"/ Writer-based compression/decompression streams","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":35489,"byte_end":35539,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":35856,"byte_end":35869,"line_start":14,"line_end":14,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::write::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" A compression stream which will have uncompressed data written to it and\n will write compressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have uncompressed data written to it and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":35716,"byte_end":35792,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ will write compressed data to an output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":35793,"byte_end":35844,"line_start":13,"line_end":13,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":197},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36128,"byte_end":36141,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::write::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"decl_id":null,"docs":" A compression stream which will have compressed data written to it and\n will write uncompressed data to an output stream.\n","sig":null,"attributes":[{"value":"/ A compression stream which will have compressed data written to it and","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":35988,"byte_end":36062,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ will write uncompressed data to an output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36063,"byte_end":36116,"line_start":23,"line_end":23,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36446,"byte_end":36449,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<W>>::new","value":"pub fn new(W, u32) -> BrotliEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to write compress output to the give output stream.\n","sig":null,"attributes":[{"value":"/ Create a new compression stream which will compress at the given level","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36300,"byte_end":36374,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ to write compress output to the give output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36379,"byte_end":36434,"line_start":34,"line_end":34,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36851,"byte_end":36862,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<W>>::from_params","value":"pub fn from_params(W, &CompressParams) -> BrotliEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `CompressParams`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder with a custom `CompressParams`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36782,"byte_end":36839,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37240,"byte_end":37247,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37178,"byte_end":37228,"line_start":60,"line_end":60,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37530,"byte_end":37537,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37309,"byte_end":37367,"line_start":65,"line_end":65,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37372,"byte_end":37375,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37380,"byte_end":37456,"line_start":67,"line_end":67,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":37461,"byte_end":37518,"line_start":68,"line_end":68,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39638,"byte_end":39644,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"finish","qualname":"<BrotliEncoder<W>>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39444,"byte_end":39498,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39503,"byte_end":39506,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39511,"byte_end":39587,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39592,"byte_end":39626,"line_start":128,"line_end":128,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41045,"byte_end":41048,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<W>>::new","value":"pub fn new(W) -> BrotliDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoding stream which will decode all input written to it\n into `obj`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoding stream which will decode all input written to it","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":40938,"byte_end":41013,"line_start":169,"line_end":169,"column_start":5,"column_end":80}},{"value":"/ into `obj`.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41018,"byte_end":41033,"line_start":170,"line_end":170,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41341,"byte_end":41348,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<W>>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41279,"byte_end":41329,"line_start":181,"line_end":181,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41631,"byte_end":41638,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<W>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41410,"byte_end":41468,"line_start":186,"line_end":186,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41473,"byte_end":41476,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41481,"byte_end":41557,"line_start":188,"line_end":188,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":41562,"byte_end":41619,"line_start":189,"line_end":189,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":43638,"byte_end":43644,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"finish","qualname":"<BrotliDecoder<W>>::finish","value":"pub fn finish(&mut Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[{"value":"/ Unwrap the underlying writer, finishing the compression stream.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":43559,"byte_end":43626,"line_start":245,"line_end":245,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1295,"byte_end":1302,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"Generic","qualname":"::CompressMode::Generic","value":"CompressMode::Generic","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Default compression mode, the compressor does not know anything in\n advance about the properties of the input.\n","sig":null,"attributes":[{"value":"/ Default compression mode, the compressor does not know anything in","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1169,"byte_end":1239,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ advance about the properties of the input.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1244,"byte_end":1290,"line_start":46,"line_end":46,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":334},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1408,"byte_end":1412,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Text","qualname":"::CompressMode::Text","value":"CompressMode::Text","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Compression mode for utf-8 formatted text input.\n","sig":null,"attributes":[{"value":"/ Compression mode for utf-8 formatted text input.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1351,"byte_end":1403,"line_start":48,"line_end":48,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1496,"byte_end":1500,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"Font","qualname":"::CompressMode::Font","value":"CompressMode::Font","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Compression mode in WOFF 2.0.\n","sig":null,"attributes":[{"value":"/ Compression mode in WOFF 2.0.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1458,"byte_end":1491,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":330},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1150,"byte_end":1162,"line_start":44,"line_end":44,"column_start":10,"column_end":22},"name":"CompressMode","qualname":"::CompressMode","value":"pub enum CompressMode { Generic = , Text = , Font = , }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337}],"decl_id":null,"docs":" Possible choices for modes of compression\n","sig":null,"attributes":[{"value":"/ Possible choices for modes of compression","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1039,"byte_end":1084,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"repr(isize)","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1085,"byte_end":1099,"line_start":42,"line_end":42,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1634,"byte_end":1648,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"CompressParams","qualname":"::CompressParams","value":"CompressParams {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" Parameters passed to various compression routines.\n","sig":null,"attributes":[{"value":"/ Parameters passed to various compression routines.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1545,"byte_end":1599,"line_start":54,"line_end":54,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2208,"byte_end":2211,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressParams>::new","value":"pub fn new() -> CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Creates a new default set of compression parameters.\n","sig":null,"attributes":[{"value":"/ Creates a new default set of compression parameters.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2140,"byte_end":2196,"line_start":70,"line_end":70,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2515,"byte_end":2519,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"mode","qualname":"<CompressParams>::mode","value":"pub fn mode(&mut Self, CompressMode) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Set the mode of this compression.\n","sig":null,"attributes":[{"value":"/ Set the mode of this compression.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2466,"byte_end":2503,"line_start":80,"line_end":80,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2837,"byte_end":2844,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"quality","qualname":"<CompressParams>::quality","value":"pub fn quality(&mut Self, u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Controls the compression-speed vs compression-density tradeoffs.","sig":null,"attributes":[{"value":"/ Controls the compression-speed vs compression-density tradeoffs.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2633,"byte_end":2701,"line_start":86,"line_end":86,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2706,"byte_end":2709,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ The higher the quality, the slower the compression. Currently the range","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2714,"byte_end":2789,"line_start":88,"line_end":88,"column_start":5,"column_end":80}},{"value":"/ for the quality is 0 to 11.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2794,"byte_end":2825,"line_start":89,"line_end":89,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3069,"byte_end":3074,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"lgwin","qualname":"<CompressParams>::lgwin","value":"pub fn lgwin(&mut Self, u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Sets the base 2 logarithm of the sliding window size.","sig":null,"attributes":[{"value":"/ Sets the base 2 logarithm of the sliding window size.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2951,"byte_end":3008,"line_start":95,"line_end":95,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3013,"byte_end":3016,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Currently the range is 10 to 24.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3021,"byte_end":3057,"line_start":97,"line_end":97,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3366,"byte_end":3373,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"lgblock","qualname":"<CompressParams>::lgblock","value":"pub fn lgblock(&mut Self, u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Sets the base 2 logarithm of the maximum input block size.","sig":null,"attributes":[{"value":"/ Sets the base 2 logarithm of the maximum input block size.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3175,"byte_end":3237,"line_start":103,"line_end":103,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3242,"byte_end":3245,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Currently the range is 16 to 24, and if set to 0 the value will be set","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3250,"byte_end":3324,"line_start":105,"line_end":105,"column_start":5,"column_end":79}},{"value":"/ based on the quality.","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3329,"byte_end":3354,"line_start":106,"line_end":106,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3536,"byte_end":3556,"line_start":114,"line_end":114,"column_start":12,"column_end":32},"name":"get_lgblock_readable","qualname":"<CompressParams>::get_lgblock_readable","value":"pub fn get_lgblock_readable(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the current block size\n","sig":null,"attributes":[{"value":"/ Get the current block size","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3480,"byte_end":3510,"line_start":112,"line_end":112,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3515,"byte_end":3524,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3674,"byte_end":3685,"line_start":120,"line_end":120,"column_start":12,"column_end":23},"name":"get_lgblock","qualname":"<CompressParams>::get_lgblock","value":"pub fn get_lgblock(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the native lgblock size\n","sig":null,"attributes":[{"value":"/ Get the native lgblock size","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3617,"byte_end":3648,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3653,"byte_end":3662,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3798,"byte_end":3816,"line_start":125,"line_end":125,"column_start":12,"column_end":30},"name":"get_lgwin_readable","qualname":"<CompressParams>::get_lgwin_readable","value":"pub fn get_lgwin_readable(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the current window size\n","sig":null,"attributes":[{"value":"/ Get the current window size","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3741,"byte_end":3772,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3777,"byte_end":3786,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3930,"byte_end":3939,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"get_lgwin","qualname":"<CompressParams>::get_lgwin","value":"pub fn get_lgwin(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the native lgwin value\n","sig":null,"attributes":[{"value":"/ Get the native lgwin value","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3874,"byte_end":3904,"line_start":128,"line_end":128,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":3909,"byte_end":3918,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4475,"byte_end":4485,"line_start":23,"line_end":23,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4510,"byte_end":4520,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4771,"byte_end":4779,"line_start":34,"line_end":34,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4804,"byte_end":4812,"line_start":35,"line_end":35,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6817,"byte_end":6827,"line_start":88,"line_end":88,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10326,"byte_end":10336,"line_start":166,"line_end":166,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11304,"byte_end":11312,"line_start":197,"line_end":197,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18555,"byte_end":18563,"line_start":357,"line_end":357,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":19861,"byte_end":19866,"line_start":394,"line_end":394,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":20006,"byte_end":20011,"line_start":400,"line_end":400,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":20107,"byte_end":20112,"line_start":406,"line_end":406,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23408,"byte_end":23421,"line_start":37,"line_end":37,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24811,"byte_end":24824,"line_start":84,"line_end":84,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27319,"byte_end":27332,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":28123,"byte_end":28136,"line_start":185,"line_end":185,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30240,"byte_end":30253,"line_start":22,"line_end":22,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31570,"byte_end":31583,"line_start":60,"line_end":60,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31703,"byte_end":31716,"line_start":66,"line_end":66,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32602,"byte_end":32615,"line_start":94,"line_end":94,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36277,"byte_end":36290,"line_start":32,"line_end":32,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39790,"byte_end":39803,"line_start":135,"line_end":135,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":40754,"byte_end":40767,"line_start":160,"line_end":160,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":40915,"byte_end":40928,"line_start":168,"line_end":168,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":43778,"byte_end":43791,"line_start":252,"line_end":252,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":44863,"byte_end":44876,"line_start":281,"line_end":281,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2119,"byte_end":2133,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":987,"byte_end":990,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1000,"byte_end":1007,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1017,"byte_end":1021,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":1031,"byte_end":1036,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":162}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4475,"byte_end":4485,"line_start":23,"line_end":23,"column_start":22,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":2822}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4510,"byte_end":4520,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":2834}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4771,"byte_end":4779,"line_start":34,"line_end":34,"column_start":22,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":2822}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":4804,"byte_end":4812,"line_start":35,"line_end":35,"column_start":22,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":2834}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":6817,"byte_end":6827,"line_start":88,"line_end":88,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":33},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":10326,"byte_end":10336,"line_start":166,"line_end":166,"column_start":15,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":33},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":11304,"byte_end":11312,"line_start":197,"line_end":197,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":18555,"byte_end":18563,"line_start":357,"line_end":357,"column_start":15,"column_end":23},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":37},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":19861,"byte_end":19866,"line_start":394,"line_end":394,"column_start":23,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":8708}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":20006,"byte_end":20011,"line_start":400,"line_end":400,"column_start":23,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":269},"to":{"krate":1,"index":2324}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","byte_start":20107,"byte_end":20112,"line_start":406,"line_end":406,"column_start":26,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":3733},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":23408,"byte_end":23421,"line_start":37,"line_end":37,"column_start":18,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":24811,"byte_end":24824,"line_start":84,"line_end":84,"column_start":27,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":90},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":27319,"byte_end":27332,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","byte_start":28123,"byte_end":28136,"line_start":185,"line_end":185,"column_start":27,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":30240,"byte_end":30253,"line_start":22,"line_end":22,"column_start":15,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31570,"byte_end":31583,"line_start":60,"line_end":60,"column_start":24,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":137},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":31703,"byte_end":31716,"line_start":66,"line_end":66,"column_start":15,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","byte_start":32602,"byte_end":32615,"line_start":94,"line_end":94,"column_start":24,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":4249}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":36277,"byte_end":36290,"line_start":32,"line_end":32,"column_start":16,"column_end":29},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":39790,"byte_end":39803,"line_start":135,"line_end":135,"column_start":26,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":40754,"byte_end":40767,"line_start":160,"line_end":160,"column_start":25,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":40915,"byte_end":40928,"line_start":168,"line_end":168,"column_start":16,"column_end":29},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":43778,"byte_end":43791,"line_start":252,"line_end":252,"column_start":26,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":197},"to":{"krate":1,"index":4310}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","byte_start":44863,"byte_end":44876,"line_start":281,"line_end":281,"column_start":25,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":3050}},{"span":{"file_name":"/home/hannydevelop/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","byte_start":2119,"byte_end":2133,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}}]}