name: Integration tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  rust-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            orchestrator/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('orchestrator/Cargo.lock') }}
      - name: Build Orchestrator
        run: cd orchestrator && cargo build --release --bin orchestrator
      - name: Run Orchestrator tests
        run: cd orchestrator && cargo test --all --verbose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: container-login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: labels
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-orchestrator
      - name: check for binary
        run: ls orchestrator/target/release
      - name: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: ./orchestrator
          file: orchestrator/ci.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  #  node-build:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: actions/cache@v2
  #        with:
  #          path: ~/.npm
  #          key: ${{ runner.os }}-node-${{ hashFiles('solidity/package-lock.json') }}
  #      - uses: actions/setup-node@v1
  #        with:
  #          node-version: 16.x
  #      - run: cd solidity && npm ci
  #      - run: cd solidity && npm run typechain
  #      - run: cd solidity && npm run evm &
  #      - run: cd solidity && npm run test
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v1
  #      - name: container-login
  #        uses: docker/login-action@v1
  #        with:
  #          registry: ${{ env.REGISTRY }}
  #          username: ${{ github.actor }}
  #          password: ${{ secrets.GITHUB_TOKEN }}
  #      - name: labels
  #        id: meta
  #        uses: docker/metadata-action@v3
  #        with:
  #          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-solidity
  #      - name: build-and-push
  #        uses: docker/build-push-action@v2
  #        with:
  #          context: ./solidity
  #          file: solidity/Dockerfile
  #          push: true
  #          tags: ${{ steps.meta.outputs.tags }}
  #          labels: ${{ steps.meta.outputs.labels }}

  go-build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: install-go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: checkout
        uses: actions/checkout@v2
      - name: go-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('module/go.sum') }}
      - name: go-test
        run: cd module && make test
#      - name: go-build
#        run: cd module && make build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: container-login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: labels
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gravity
      - name: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: ./module
          file: module/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: [ rust-build, go-build ]
    strategy:
      matrix:
        test_type: [
            "HAPPY_PATH",
#            "VALIDATOR_OUT",
#            "BATCH_STRESS",
#            "VALSET_STRESS",
#            "V2_HAPPY_PATH",
#            "ARBITRARY_LOGIC",
#            "ORCHESTRATOR_KEYS"
        ]
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: checkout
        uses: actions/checkout@v2
      - name: go-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('testnet/go.sum') }}
      - name: container-login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: docker gravity metadata
        id: meta-gravity
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gravity
      - name: docker orchestrator metadata
        id: meta-orchestrator
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-orchestrator
      #      - name: docker solidity metadata
      #        id: meta-solidity
      #        uses: docker/metadata-action@v3
      #        with:
      #          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-solidity
      - name: pull gravity image
        run: docker pull ${{ steps.meta-gravity.outputs.tags }}
      - name: rename gravity image
        run: docker tag ${{ steps.meta-gravity.outputs.tags }} gravity:prebuilt
      - name: pull orchestrator image
        run: docker pull ${{ steps.meta-orchestrator.outputs.tags }}
      - name: rename orchestrator image
        run: docker tag ${{ steps.meta-gravity.outputs.tags }} orchestrator:prebuilt
      #      - name: pull solidity image
      #        run: docker pull ${{ steps.meta-solidity.outputs.tags }}
      #      - name: rename solidity image
      #        run: docker tag ${{ steps.meta-solidity.outputs.tags }} solidity:prebuilt
      - name: Run all up ci test
        run: cd testnet && go test -c && cd .. && ./testnet/testnet.test -test.run PrebuiltCi -test.failfast
        env:
          TEST_TYPE: ${{ matrix.test_type}}