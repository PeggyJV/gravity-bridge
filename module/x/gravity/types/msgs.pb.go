// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v2/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	github_com_tendermint_tendermint_libs_bytes "github.com/tendermint/tendermint/libs/bytes"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendToEVM submits a SendToEVM attempt to bridge an asset over to
// EVM. The SendToEVM will be stored and then included in a batch and
// then submitted to EVM.
type MsgSendToEVM struct {
	Sender       string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	EVMRecipient string     `protobuf:"bytes,2,opt,name=EVM_recipient,json=EVMRecipient,proto3" json:"EVM_recipient,omitempty"`
	Amount       types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee    types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
	ChainId      uint32     `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSendToEVM) Reset()         { *m = MsgSendToEVM{} }
func (m *MsgSendToEVM) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEVM) ProtoMessage()    {}
func (*MsgSendToEVM) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{0}
}
func (m *MsgSendToEVM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEVM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEVM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEVM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEVM.Merge(m, src)
}
func (m *MsgSendToEVM) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEVM) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEVM.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEVM proto.InternalMessageInfo

func (m *MsgSendToEVM) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToEVM) GetEVMRecipient() string {
	if m != nil {
		return m.EVMRecipient
	}
	return ""
}

func (m *MsgSendToEVM) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToEVM) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

func (m *MsgSendToEVM) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// MsgSendToEVMResponse returns the SendToEVM transaction ID which
// will be included in the batch tx.
type MsgSendToEVMResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgSendToEVMResponse) Reset()         { *m = MsgSendToEVMResponse{} }
func (m *MsgSendToEVMResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToEVMResponse) ProtoMessage()    {}
func (*MsgSendToEVMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{1}
}
func (m *MsgSendToEVMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToEVMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToEVMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToEVMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToEVMResponse.Merge(m, src)
}
func (m *MsgSendToEVMResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToEVMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToEVMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToEVMResponse proto.InternalMessageInfo

func (m *MsgSendToEVMResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgCancelSendToEVM allows the sender to cancel its own outgoing
// SendToEVM tx and receive a refund of the tokens and bridge fees. This tx
// will only succeed if the SendToEVM tx hasn't been batched to be
// processed and relayed to EVM.
type MsgCancelSendToEVM struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender  string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgCancelSendToEVM) Reset()         { *m = MsgCancelSendToEVM{} }
func (m *MsgCancelSendToEVM) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEVM) ProtoMessage()    {}
func (*MsgCancelSendToEVM) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{2}
}
func (m *MsgCancelSendToEVM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEVM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEVM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEVM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEVM.Merge(m, src)
}
func (m *MsgCancelSendToEVM) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEVM) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEVM.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEVM proto.InternalMessageInfo

func (m *MsgCancelSendToEVM) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgCancelSendToEVM) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelSendToEVM) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgCancelSendToEVMResponse struct {
}

func (m *MsgCancelSendToEVMResponse) Reset()         { *m = MsgCancelSendToEVMResponse{} }
func (m *MsgCancelSendToEVMResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToEVMResponse) ProtoMessage()    {}
func (*MsgCancelSendToEVMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{3}
}
func (m *MsgCancelSendToEVMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToEVMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToEVMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToEVMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToEVMResponse.Merge(m, src)
}
func (m *MsgCancelSendToEVMResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToEVMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToEVMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToEVMResponse proto.InternalMessageInfo

// MsgRequestBatchTx requests a batch of transactions with a given coin
// denomination to send across the bridge to EVM.
type MsgRequestBatchTx struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Signer  string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgRequestBatchTx) Reset()         { *m = MsgRequestBatchTx{} }
func (m *MsgRequestBatchTx) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTx) ProtoMessage()    {}
func (*MsgRequestBatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{4}
}
func (m *MsgRequestBatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTx.Merge(m, src)
}
func (m *MsgRequestBatchTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTx proto.InternalMessageInfo

func (m *MsgRequestBatchTx) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRequestBatchTx) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRequestBatchTx) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgRequestBatchTxResponse struct {
}

func (m *MsgRequestBatchTxResponse) Reset()         { *m = MsgRequestBatchTxResponse{} }
func (m *MsgRequestBatchTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchTxResponse) ProtoMessage()    {}
func (*MsgRequestBatchTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{5}
}
func (m *MsgRequestBatchTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchTxResponse.Merge(m, src)
}
func (m *MsgRequestBatchTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchTxResponse proto.InternalMessageInfo

// MsgSubmitEVMTxConfirmation submits an EVM signature for a given
// validator
type MsgSubmitEVMTxConfirmation struct {
	// TODO: can we make this take an array?
	Confirmation *types1.Any `protobuf:"bytes,1,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
	Signer       string      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId      uint32      `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSubmitEVMTxConfirmation) Reset()         { *m = MsgSubmitEVMTxConfirmation{} }
func (m *MsgSubmitEVMTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEVMTxConfirmation) ProtoMessage()    {}
func (*MsgSubmitEVMTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{6}
}
func (m *MsgSubmitEVMTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEVMTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEVMTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEVMTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEVMTxConfirmation.Merge(m, src)
}
func (m *MsgSubmitEVMTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEVMTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEVMTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEVMTxConfirmation proto.InternalMessageInfo

// ContractCallTxConfirmation is a signature on behalf of a validator for a
// ContractCallTx.
type ContractCallTxConfirmation struct {
	InvalidationScope []byte `protobuf:"bytes,1,opt,name=invalidation_scope,json=invalidationScope,proto3" json:"invalidation_scope,omitempty"`
	InvalidationNonce uint64 `protobuf:"varint,2,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	EVMSigner         string `protobuf:"bytes,3,opt,name=EVM_signer,json=EVMSigner,proto3" json:"EVM_signer,omitempty"`
	Signature         []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainId           uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ContractCallTxConfirmation) Reset()         { *m = ContractCallTxConfirmation{} }
func (m *ContractCallTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*ContractCallTxConfirmation) ProtoMessage()    {}
func (*ContractCallTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{7}
}
func (m *ContractCallTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTxConfirmation.Merge(m, src)
}
func (m *ContractCallTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTxConfirmation proto.InternalMessageInfo

func (m *ContractCallTxConfirmation) GetInvalidationScope() []byte {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallTxConfirmation) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallTxConfirmation) GetEVMSigner() string {
	if m != nil {
		return m.EVMSigner
	}
	return ""
}

func (m *ContractCallTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ContractCallTxConfirmation) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// BatchTxConfirmation is a signature on behalf of a validator for a BatchTx.
type BatchTxConfirmation struct {
	TokenContract string `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	BatchNonce    uint64 `protobuf:"varint,2,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	EVMSigner     string `protobuf:"bytes,3,opt,name=EVM_signer,json=EVMSigner,proto3" json:"EVM_signer,omitempty"`
	Signature     []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainId       uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *BatchTxConfirmation) Reset()         { *m = BatchTxConfirmation{} }
func (m *BatchTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*BatchTxConfirmation) ProtoMessage()    {}
func (*BatchTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{8}
}
func (m *BatchTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTxConfirmation.Merge(m, src)
}
func (m *BatchTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *BatchTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTxConfirmation proto.InternalMessageInfo

func (m *BatchTxConfirmation) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *BatchTxConfirmation) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchTxConfirmation) GetEVMSigner() string {
	if m != nil {
		return m.EVMSigner
	}
	return ""
}

func (m *BatchTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BatchTxConfirmation) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// SignerSetTxConfirmation is a signature on behalf of a validator for a
// SignerSetTx
type SignerSetTxConfirmation struct {
	SignerSetNonce uint64 `protobuf:"varint,1,opt,name=signer_set_nonce,json=signerSetNonce,proto3" json:"signer_set_nonce,omitempty"`
	EVMSigner      string `protobuf:"bytes,2,opt,name=EVM_signer,json=EVMSigner,proto3" json:"EVM_signer,omitempty"`
	Signature      []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	ChainId        uint32 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SignerSetTxConfirmation) Reset()         { *m = SignerSetTxConfirmation{} }
func (m *SignerSetTxConfirmation) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxConfirmation) ProtoMessage()    {}
func (*SignerSetTxConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{9}
}
func (m *SignerSetTxConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxConfirmation.Merge(m, src)
}
func (m *SignerSetTxConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxConfirmation proto.InternalMessageInfo

func (m *SignerSetTxConfirmation) GetSignerSetNonce() uint64 {
	if m != nil {
		return m.SignerSetNonce
	}
	return 0
}

func (m *SignerSetTxConfirmation) GetEVMSigner() string {
	if m != nil {
		return m.EVMSigner
	}
	return ""
}

func (m *SignerSetTxConfirmation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignerSetTxConfirmation) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgSubmitEVMTxConfirmationResponse struct {
}

func (m *MsgSubmitEVMTxConfirmationResponse) Reset()         { *m = MsgSubmitEVMTxConfirmationResponse{} }
func (m *MsgSubmitEVMTxConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEVMTxConfirmationResponse) ProtoMessage()    {}
func (*MsgSubmitEVMTxConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{10}
}
func (m *MsgSubmitEVMTxConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEVMTxConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEVMTxConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEVMTxConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEVMTxConfirmationResponse.Merge(m, src)
}
func (m *MsgSubmitEVMTxConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEVMTxConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEVMTxConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEVMTxConfirmationResponse proto.InternalMessageInfo

// MsgSubmitEVMEvent
type MsgSubmitEVMEvent struct {
	Event   *types1.Any `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Signer  string      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainId uint32      `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgSubmitEVMEvent) Reset()         { *m = MsgSubmitEVMEvent{} }
func (m *MsgSubmitEVMEvent) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEVMEvent) ProtoMessage()    {}
func (*MsgSubmitEVMEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{11}
}
func (m *MsgSubmitEVMEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEVMEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEVMEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEVMEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEVMEvent.Merge(m, src)
}
func (m *MsgSubmitEVMEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEVMEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEVMEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEVMEvent proto.InternalMessageInfo

type MsgSubmitEVMEventResponse struct {
}

func (m *MsgSubmitEVMEventResponse) Reset()         { *m = MsgSubmitEVMEventResponse{} }
func (m *MsgSubmitEVMEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitEVMEventResponse) ProtoMessage()    {}
func (*MsgSubmitEVMEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{12}
}
func (m *MsgSubmitEVMEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitEVMEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitEVMEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitEVMEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitEVMEventResponse.Merge(m, src)
}
func (m *MsgSubmitEVMEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitEVMEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitEVMEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitEVMEventResponse proto.InternalMessageInfo

// MsgDelegateKeys allows validators to delegate their voting responsibilities
// to a given orchestrator address. This key is then used as an optional
// authentication method for attesting events from EVM.
type MsgDelegateKeys struct {
	ValidatorAddress    string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddress string `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	EVMAddress          string `protobuf:"bytes,3,opt,name=EVM_address,json=EVMAddress,proto3" json:"EVM_address,omitempty"`
	EthSignature        []byte `protobuf:"bytes,4,opt,name=eth_signature,json=ethSignature,proto3" json:"eth_signature,omitempty"`
}

func (m *MsgDelegateKeys) Reset()         { *m = MsgDelegateKeys{} }
func (m *MsgDelegateKeys) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeys) ProtoMessage()    {}
func (*MsgDelegateKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{13}
}
func (m *MsgDelegateKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeys.Merge(m, src)
}
func (m *MsgDelegateKeys) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeys proto.InternalMessageInfo

func (m *MsgDelegateKeys) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetEVMAddress() string {
	if m != nil {
		return m.EVMAddress
	}
	return ""
}

func (m *MsgDelegateKeys) GetEthSignature() []byte {
	if m != nil {
		return m.EthSignature
	}
	return nil
}

type MsgDelegateKeysResponse struct {
}

func (m *MsgDelegateKeysResponse) Reset()         { *m = MsgDelegateKeysResponse{} }
func (m *MsgDelegateKeysResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateKeysResponse) ProtoMessage()    {}
func (*MsgDelegateKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{14}
}
func (m *MsgDelegateKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateKeysResponse.Merge(m, src)
}
func (m *MsgDelegateKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateKeysResponse proto.InternalMessageInfo

// DelegateKeysSignMsg defines the message structure an operator is expected to
// sign when submitting a MsgDelegateKeys message. The resulting signature
// should populate the eth_signature field.
type DelegateKeysSignMsg struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Nonce            uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *DelegateKeysSignMsg) Reset()         { *m = DelegateKeysSignMsg{} }
func (m *DelegateKeysSignMsg) String() string { return proto.CompactTextString(m) }
func (*DelegateKeysSignMsg) ProtoMessage()    {}
func (*DelegateKeysSignMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{15}
}
func (m *DelegateKeysSignMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegateKeysSignMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegateKeysSignMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegateKeysSignMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegateKeysSignMsg.Merge(m, src)
}
func (m *DelegateKeysSignMsg) XXX_Size() int {
	return m.Size()
}
func (m *DelegateKeysSignMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegateKeysSignMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DelegateKeysSignMsg proto.InternalMessageInfo

func (m *DelegateKeysSignMsg) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *DelegateKeysSignMsg) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// SendToCosmosEvent is submitted when the SendToCosmosEvent is emitted by they
// gravity contract. ERC20 representation coins are minted to the cosmosreceiver
// address.
type SendToCosmosEvent struct {
	EventNonce     uint64                                 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	TokenContract  string                                 `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	EVMSender      string                                 `protobuf:"bytes,4,opt,name=EVM_sender,json=EVMSender,proto3" json:"EVM_sender,omitempty"`
	CosmosReceiver string                                 `protobuf:"bytes,5,opt,name=cosmos_receiver,json=cosmosReceiver,proto3" json:"cosmos_receiver,omitempty"`
	EVMHeight      uint64                                 `protobuf:"varint,6,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	ChainId        uint32                                 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SendToCosmosEvent) Reset()         { *m = SendToCosmosEvent{} }
func (m *SendToCosmosEvent) String() string { return proto.CompactTextString(m) }
func (*SendToCosmosEvent) ProtoMessage()    {}
func (*SendToCosmosEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{16}
}
func (m *SendToCosmosEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendToCosmosEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendToCosmosEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendToCosmosEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToCosmosEvent.Merge(m, src)
}
func (m *SendToCosmosEvent) XXX_Size() int {
	return m.Size()
}
func (m *SendToCosmosEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToCosmosEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SendToCosmosEvent proto.InternalMessageInfo

func (m *SendToCosmosEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *SendToCosmosEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *SendToCosmosEvent) GetEVMSender() string {
	if m != nil {
		return m.EVMSender
	}
	return ""
}

func (m *SendToCosmosEvent) GetCosmosReceiver() string {
	if m != nil {
		return m.CosmosReceiver
	}
	return ""
}

func (m *SendToCosmosEvent) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *SendToCosmosEvent) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// BatchExecutedEvent claims that a batch of BatchTxExecutedal operations on the
// bridge contract was executed successfully on ETH
type BatchExecutedEvent struct {
	TokenContract string `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	EventNonce    uint64 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	EVMHeight     uint64 `protobuf:"varint,3,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	BatchNonce    uint64 `protobuf:"varint,4,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	ChainId       uint32 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *BatchExecutedEvent) Reset()         { *m = BatchExecutedEvent{} }
func (m *BatchExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*BatchExecutedEvent) ProtoMessage()    {}
func (*BatchExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{17}
}
func (m *BatchExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchExecutedEvent.Merge(m, src)
}
func (m *BatchExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *BatchExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BatchExecutedEvent proto.InternalMessageInfo

func (m *BatchExecutedEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *BatchExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *BatchExecutedEvent) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *BatchExecutedEvent) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchExecutedEvent) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// NOTE: bytes.HexBytes is supposed to "help" with json encoding/decoding
// investigate?
type ContractCallExecutedEvent struct {
	EventNonce        uint64                                               `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	InvalidationScope github_com_tendermint_tendermint_libs_bytes.HexBytes `protobuf:"bytes,2,opt,name=invalidation_scope,json=invalidationScope,proto3,casttype=github.com/tendermint/tendermint/libs/bytes.HexBytes" json:"invalidation_scope,omitempty"`
	InvalidationNonce uint64                                               `protobuf:"varint,3,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	EVMHeight         uint64                                               `protobuf:"varint,4,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	ChainId           uint32                                               `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ContractCallExecutedEvent) Reset()         { *m = ContractCallExecutedEvent{} }
func (m *ContractCallExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*ContractCallExecutedEvent) ProtoMessage()    {}
func (*ContractCallExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{18}
}
func (m *ContractCallExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallExecutedEvent.Merge(m, src)
}
func (m *ContractCallExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallExecutedEvent proto.InternalMessageInfo

func (m *ContractCallExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetInvalidationScope() github_com_tendermint_tendermint_libs_bytes.HexBytes {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallExecutedEvent) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *ContractCallExecutedEvent) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// ERC20DeployedEvent is submitted when an ERC20 contract
// for a Cosmos SDK coin has been deployed on EVM.
type ERC20DeployedEvent struct {
	EventNonce    uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	CosmosDenom   string `protobuf:"bytes,2,opt,name=cosmos_denom,json=cosmosDenom,proto3" json:"cosmos_denom,omitempty"`
	TokenContract string `protobuf:"bytes,3,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Erc20Name     string `protobuf:"bytes,4,opt,name=erc20_name,json=erc20Name,proto3" json:"erc20_name,omitempty"`
	Erc20Symbol   string `protobuf:"bytes,5,opt,name=erc20_symbol,json=erc20Symbol,proto3" json:"erc20_symbol,omitempty"`
	Erc20Decimals uint64 `protobuf:"varint,6,opt,name=erc20_decimals,json=erc20Decimals,proto3" json:"erc20_decimals,omitempty"`
	EVMHeight     uint64 `protobuf:"varint,7,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	ChainId       uint32 `protobuf:"varint,8,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ERC20DeployedEvent) Reset()         { *m = ERC20DeployedEvent{} }
func (m *ERC20DeployedEvent) String() string { return proto.CompactTextString(m) }
func (*ERC20DeployedEvent) ProtoMessage()    {}
func (*ERC20DeployedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{19}
}
func (m *ERC20DeployedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20DeployedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20DeployedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20DeployedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20DeployedEvent.Merge(m, src)
}
func (m *ERC20DeployedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ERC20DeployedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20DeployedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20DeployedEvent proto.InternalMessageInfo

func (m *ERC20DeployedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *ERC20DeployedEvent) GetCosmosDenom() string {
	if m != nil {
		return m.CosmosDenom
	}
	return ""
}

func (m *ERC20DeployedEvent) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *ERC20DeployedEvent) GetErc20Name() string {
	if m != nil {
		return m.Erc20Name
	}
	return ""
}

func (m *ERC20DeployedEvent) GetErc20Symbol() string {
	if m != nil {
		return m.Erc20Symbol
	}
	return ""
}

func (m *ERC20DeployedEvent) GetErc20Decimals() uint64 {
	if m != nil {
		return m.Erc20Decimals
	}
	return 0
}

func (m *ERC20DeployedEvent) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *ERC20DeployedEvent) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// This informs the Cosmos module that a validator
// set has been updated.
type SignerSetTxExecutedEvent struct {
	EventNonce       uint64       `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
	SignerSetTxNonce uint64       `protobuf:"varint,2,opt,name=signer_set_tx_nonce,json=signerSetTxNonce,proto3" json:"signer_set_tx_nonce,omitempty"`
	EVMHeight        uint64       `protobuf:"varint,3,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	Members          []*EVMSigner `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	ChainId          uint32       `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SignerSetTxExecutedEvent) Reset()         { *m = SignerSetTxExecutedEvent{} }
func (m *SignerSetTxExecutedEvent) String() string { return proto.CompactTextString(m) }
func (*SignerSetTxExecutedEvent) ProtoMessage()    {}
func (*SignerSetTxExecutedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_480c6bb410a9b91f, []int{20}
}
func (m *SignerSetTxExecutedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTxExecutedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTxExecutedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTxExecutedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTxExecutedEvent.Merge(m, src)
}
func (m *SignerSetTxExecutedEvent) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTxExecutedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTxExecutedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTxExecutedEvent proto.InternalMessageInfo

func (m *SignerSetTxExecutedEvent) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetSignerSetTxNonce() uint64 {
	if m != nil {
		return m.SignerSetTxNonce
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *SignerSetTxExecutedEvent) GetMembers() []*EVMSigner {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *SignerSetTxExecutedEvent) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgSendToEVM)(nil), "gravity.v2.MsgSendToEVM")
	proto.RegisterType((*MsgSendToEVMResponse)(nil), "gravity.v2.MsgSendToEVMResponse")
	proto.RegisterType((*MsgCancelSendToEVM)(nil), "gravity.v2.MsgCancelSendToEVM")
	proto.RegisterType((*MsgCancelSendToEVMResponse)(nil), "gravity.v2.MsgCancelSendToEVMResponse")
	proto.RegisterType((*MsgRequestBatchTx)(nil), "gravity.v2.MsgRequestBatchTx")
	proto.RegisterType((*MsgRequestBatchTxResponse)(nil), "gravity.v2.MsgRequestBatchTxResponse")
	proto.RegisterType((*MsgSubmitEVMTxConfirmation)(nil), "gravity.v2.MsgSubmitEVMTxConfirmation")
	proto.RegisterType((*ContractCallTxConfirmation)(nil), "gravity.v2.ContractCallTxConfirmation")
	proto.RegisterType((*BatchTxConfirmation)(nil), "gravity.v2.BatchTxConfirmation")
	proto.RegisterType((*SignerSetTxConfirmation)(nil), "gravity.v2.SignerSetTxConfirmation")
	proto.RegisterType((*MsgSubmitEVMTxConfirmationResponse)(nil), "gravity.v2.MsgSubmitEVMTxConfirmationResponse")
	proto.RegisterType((*MsgSubmitEVMEvent)(nil), "gravity.v2.MsgSubmitEVMEvent")
	proto.RegisterType((*MsgSubmitEVMEventResponse)(nil), "gravity.v2.MsgSubmitEVMEventResponse")
	proto.RegisterType((*MsgDelegateKeys)(nil), "gravity.v2.MsgDelegateKeys")
	proto.RegisterType((*MsgDelegateKeysResponse)(nil), "gravity.v2.MsgDelegateKeysResponse")
	proto.RegisterType((*DelegateKeysSignMsg)(nil), "gravity.v2.DelegateKeysSignMsg")
	proto.RegisterType((*SendToCosmosEvent)(nil), "gravity.v2.SendToCosmosEvent")
	proto.RegisterType((*BatchExecutedEvent)(nil), "gravity.v2.BatchExecutedEvent")
	proto.RegisterType((*ContractCallExecutedEvent)(nil), "gravity.v2.ContractCallExecutedEvent")
	proto.RegisterType((*ERC20DeployedEvent)(nil), "gravity.v2.ERC20DeployedEvent")
	proto.RegisterType((*SignerSetTxExecutedEvent)(nil), "gravity.v2.SignerSetTxExecutedEvent")
}

func init() { proto.RegisterFile("gravity/v2/msgs.proto", fileDescriptor_480c6bb410a9b91f) }

var fileDescriptor_480c6bb410a9b91f = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xda, 0x4e, 0x52, 0x3f, 0x3b, 0x49, 0xb3, 0x49, 0xbf, 0xb5, 0xdd, 0xc6, 0xce, 0xd7,
	0xa5, 0x25, 0x12, 0xca, 0x6e, 0xeb, 0x22, 0x51, 0x81, 0x84, 0x54, 0x3b, 0xae, 0x5a, 0x21, 0x17,
	0x69, 0xdd, 0x86, 0x0a, 0x90, 0xac, 0xf5, 0xee, 0xeb, 0x7a, 0xa9, 0x77, 0xc7, 0xec, 0x8c, 0xad,
	0xf8, 0x1f, 0x40, 0x9c, 0x10, 0x77, 0x2e, 0x15, 0x07, 0x2e, 0x88, 0x5b, 0x11, 0xff, 0x42, 0xd5,
	0x53, 0x85, 0x84, 0x84, 0x38, 0x14, 0xd4, 0x5c, 0xf8, 0x1b, 0x38, 0xa1, 0x9d, 0xd9, 0x75, 0x76,
	0xd7, 0x89, 0xeb, 0x56, 0xe2, 0xe4, 0x9d, 0xf7, 0x6b, 0x3e, 0xef, 0xcd, 0x67, 0xde, 0x1b, 0xc3,
	0x39, 0xcb, 0xd3, 0xc7, 0x36, 0x9b, 0xa8, 0xe3, 0xba, 0xea, 0x50, 0x8b, 0x2a, 0x43, 0x8f, 0x30,
	0x22, 0x43, 0x20, 0x56, 0xc6, 0xf5, 0x72, 0xc5, 0x20, 0xd4, 0x21, 0x54, 0xed, 0xe9, 0x14, 0xd5,
	0xf1, 0xb5, 0x1e, 0x32, 0xfd, 0x9a, 0x6a, 0x10, 0xdb, 0x15, 0xb6, 0xe5, 0x92, 0xd0, 0x77, 0xf9,
	0x4a, 0x15, 0x8b, 0x40, 0x55, 0x8c, 0x44, 0x0f, 0x23, 0x0a, 0xcd, 0x96, 0x45, 0x2c, 0x22, 0x3c,
	0xfc, 0xaf, 0x40, 0x7a, 0xd1, 0x22, 0xc4, 0x1a, 0xa0, 0xaa, 0x0f, 0x6d, 0x55, 0x77, 0x5d, 0xc2,
	0x74, 0x66, 0x13, 0x37, 0x8c, 0x56, 0x0a, 0xb4, 0x7c, 0xd5, 0x1b, 0x3d, 0x54, 0x75, 0x37, 0x08,
	0x57, 0xfb, 0x53, 0x82, 0x42, 0x9b, 0x5a, 0x1d, 0x74, 0xcd, 0x7b, 0xa4, 0x75, 0xd0, 0x96, 0xff,
	0x07, 0xcb, 0x14, 0x5d, 0x13, 0xbd, 0xa2, 0xb4, 0x23, 0xed, 0xe6, 0xb4, 0x60, 0x25, 0x5f, 0x82,
	0xd5, 0xd6, 0x41, 0xbb, 0xeb, 0xa1, 0x61, 0x0f, 0x6d, 0x74, 0x59, 0x31, 0xcd, 0xd5, 0x85, 0xd6,
	0x41, 0x5b, 0x0b, 0x65, 0xf2, 0x7b, 0xb0, 0xac, 0x3b, 0x64, 0xe4, 0xb2, 0x62, 0x66, 0x47, 0xda,
	0xcd, 0xd7, 0x4b, 0x4a, 0x90, 0x95, 0x5f, 0x02, 0x25, 0x28, 0x81, 0xd2, 0x24, 0xb6, 0xdb, 0xc8,
	0x3e, 0x7d, 0x51, 0x4d, 0x69, 0x81, 0xb9, 0xfc, 0x21, 0x40, 0xcf, 0xb3, 0x4d, 0x0b, 0xbb, 0x0f,
	0x11, 0x8b, 0xd9, 0xc5, 0x9c, 0x73, 0xc2, 0xe5, 0x16, 0xa2, 0x5c, 0x82, 0x33, 0x46, 0x5f, 0xb7,
	0xdd, 0xae, 0x6d, 0x16, 0x97, 0x76, 0xa4, 0xdd, 0x55, 0x6d, 0x85, 0xaf, 0xef, 0x98, 0xb5, 0x2b,
	0xb0, 0x15, 0x4d, 0x50, 0x43, 0x3a, 0x24, 0x2e, 0x45, 0x79, 0x0d, 0xd2, 0xb6, 0xc9, 0x93, 0xcc,
	0x6a, 0x69, 0xdb, 0xac, 0x7d, 0x02, 0x72, 0x9b, 0x5a, 0x4d, 0xdd, 0x35, 0x70, 0x70, 0x5c, 0x8e,
	0x84, 0x55, 0xa4, 0x3c, 0xe9, 0x58, 0x79, 0xa2, 0x00, 0x32, 0x71, 0x00, 0x17, 0xa1, 0x3c, 0x1b,
	0x38, 0x84, 0x51, 0xfb, 0x1c, 0x36, 0xda, 0xd4, 0xd2, 0xf0, 0xcb, 0x11, 0x52, 0xd6, 0xd0, 0x99,
	0xd1, 0xbf, 0x77, 0x28, 0x6f, 0xc1, 0x92, 0x89, 0x2e, 0x71, 0x82, 0x33, 0x10, 0x0b, 0xbe, 0xb7,
	0x6d, 0xb9, 0x91, 0xbd, 0xf9, 0x6a, 0xde, 0xde, 0x17, 0xa0, 0x34, 0x13, 0x7d, 0xba, 0xf5, 0x0f,
	0x12, 0x47, 0xd6, 0x19, 0xf5, 0x1c, 0x9b, 0xb5, 0x0e, 0xda, 0xf7, 0x0e, 0x9b, 0xc4, 0x7d, 0x68,
	0x7b, 0x0e, 0x27, 0x8f, 0xfc, 0x31, 0x14, 0x8c, 0xc8, 0x9a, 0x63, 0xc9, 0xd7, 0xb7, 0x14, 0x41,
	0x26, 0x25, 0x24, 0x93, 0x72, 0xd3, 0x9d, 0x34, 0xce, 0x3d, 0x7b, 0xb2, 0xb7, 0x31, 0x13, 0x42,
	0x8b, 0x05, 0x78, 0x03, 0xfc, 0xef, 0x67, 0xbf, 0x7e, 0x5c, 0x4d, 0xd5, 0x7e, 0x95, 0xa0, 0xdc,
	0x24, 0x2e, 0xf3, 0x74, 0x83, 0x35, 0xf5, 0xc1, 0x20, 0x01, 0x74, 0x0f, 0x64, 0xdb, 0x1d, 0xeb,
	0x03, 0xdb, 0xe4, 0xeb, 0x2e, 0x35, 0xc8, 0x10, 0x39, 0xdc, 0x82, 0xb6, 0x11, 0xd5, 0x74, 0x7c,
	0xc5, 0x8c, 0xb9, 0x4b, 0x5c, 0x03, 0x39, 0xa4, 0x6c, 0xdc, 0xfc, 0xae, 0xaf, 0x90, 0xb7, 0x01,
	0x7c, 0xe2, 0x07, 0xc8, 0x33, 0x1c, 0x79, 0xae, 0x75, 0xd0, 0xee, 0x08, 0xf0, 0x17, 0x21, 0xe7,
	0xab, 0x74, 0x36, 0xf2, 0x04, 0x71, 0x0b, 0xda, 0xb1, 0x60, 0x1e, 0x2f, 0x7f, 0x96, 0x60, 0x33,
	0x38, 0x91, 0x58, 0x36, 0x97, 0x61, 0x8d, 0x91, 0x47, 0xe8, 0x76, 0x8d, 0x20, 0xe3, 0x80, 0x04,
	0xab, 0x5c, 0x1a, 0x96, 0x41, 0xae, 0x42, 0xbe, 0xe7, 0x7b, 0xc7, 0xe0, 0x03, 0x17, 0xfd, 0xb7,
	0xb8, 0xbf, 0x93, 0xe0, 0xbc, 0x88, 0xd1, 0x41, 0x96, 0xc0, 0xbe, 0x0b, 0x67, 0xc5, 0x7e, 0x5d,
	0x8a, 0x2c, 0x40, 0x26, 0xee, 0xce, 0x1a, 0x0d, 0x5d, 0x4e, 0x42, 0x97, 0x9e, 0x8b, 0x2e, 0x33,
	0x0f, 0x5d, 0x36, 0x8e, 0xee, 0x2d, 0xa8, 0x9d, 0x4e, 0xe9, 0x29, 0xf3, 0xbf, 0x92, 0xf8, 0xad,
	0x9b, 0x9a, 0xb5, 0xc6, 0x7e, 0xf7, 0xba, 0x01, 0x4b, 0xe8, 0x7f, 0xcc, 0x65, 0x7a, 0xe1, 0xd9,
	0x93, 0xbd, 0x33, 0xa1, 0x8b, 0x26, 0x1c, 0xde, 0x9c, 0xd9, 0xe2, 0x7e, 0xc6, 0x71, 0x4c, 0x51,
	0xfe, 0x22, 0xc1, 0x7a, 0x9b, 0x5a, 0xfb, 0x38, 0x40, 0x4b, 0x67, 0xf8, 0x11, 0x4e, 0xa8, 0xfc,
	0x0e, 0x6c, 0x04, 0x04, 0x25, 0x5e, 0x57, 0x37, 0x4d, 0x0f, 0x29, 0x0d, 0x08, 0x72, 0x76, 0xaa,
	0xb8, 0x29, 0xe4, 0xf2, 0x35, 0xd8, 0x22, 0x9e, 0xd1, 0x47, 0xca, 0xbc, 0x98, 0xbd, 0x00, 0xb9,
	0x19, 0xd5, 0x85, 0x2e, 0x55, 0xc8, 0xfb, 0xe7, 0x12, 0x5a, 0x0a, 0xda, 0xf8, 0x47, 0x15, 0x1a,
	0x5c, 0x82, 0x55, 0x64, 0xfd, 0x6e, 0x92, 0x3b, 0x05, 0x64, 0xfd, 0x4e, 0x28, 0xab, 0x95, 0xe0,
	0x7c, 0x02, 0xf8, 0x34, 0xa9, 0x07, 0xb0, 0x19, 0x95, 0xfb, 0x3e, 0x6d, 0x6a, 0xbd, 0x5e, 0x5e,
	0x5b, 0xb0, 0x14, 0x65, 0xbd, 0x58, 0xd4, 0x7e, 0x4c, 0xc3, 0x86, 0xe8, 0xaf, 0x4d, 0x3e, 0x37,
	0xc4, 0xa1, 0x56, 0x21, 0xcf, 0xcf, 0x28, 0xc6, 0x46, 0xe0, 0x22, 0xc1, 0xc4, 0xd9, 0xfb, 0x96,
	0x3e, 0xe9, 0xbe, 0xdd, 0x8a, 0x8d, 0xb6, 0x5c, 0x43, 0xf1, 0x47, 0xd0, 0x1f, 0x2f, 0xaa, 0x57,
	0x2c, 0x9b, 0xf5, 0x47, 0x3d, 0xc5, 0x20, 0x4e, 0x30, 0xc2, 0x83, 0x9f, 0x3d, 0x6a, 0x3e, 0x52,
	0xd9, 0x64, 0x88, 0x54, 0xb9, 0xe3, 0xb2, 0xe9, 0xa4, 0x0b, 0x89, 0x2f, 0x86, 0x48, 0xf6, 0x98,
	0xf8, 0x62, 0x8e, 0xbc, 0x0d, 0xeb, 0xc1, 0xab, 0xc0, 0x43, 0x03, 0xed, 0x31, 0x7a, 0xfc, 0xfe,
	0xe5, 0xb4, 0x35, 0x21, 0xd6, 0x02, 0x69, 0x18, 0xa7, 0x8f, 0xb6, 0xd5, 0x67, 0xc5, 0x65, 0x9e,
	0x96, 0x1f, 0xe7, 0x36, 0x17, 0xc4, 0x98, 0xb7, 0x92, 0x60, 0xde, 0xdf, 0x8f, 0xab, 0x92, 0x4f,
	0x2e, 0x99, 0xb7, 0x9f, 0xd6, 0x21, 0x1a, 0x23, 0x86, 0xa6, 0x28, 0xd7, 0xe2, 0xdd, 0x27, 0x5a,
	0xd5, 0xf4, 0x4c, 0x55, 0xe3, 0xf0, 0x32, 0x49, 0x78, 0x89, 0xee, 0x95, 0x9d, 0xe9, 0x5e, 0x73,
	0x1a, 0xd0, 0x37, 0x69, 0x28, 0x45, 0xa7, 0x41, 0x3c, 0x81, 0x57, 0x9e, 0xb7, 0x75, 0xe2, 0xb4,
	0xf0, 0x33, 0x28, 0x34, 0x6e, 0xfc, 0xf3, 0xa2, 0xfa, 0x6e, 0xe4, 0x40, 0x19, 0x3f, 0x14, 0xc7,
	0x76, 0x59, 0xf4, 0x73, 0x60, 0xf7, 0xa8, 0xda, 0x9b, 0x30, 0xa4, 0xca, 0x6d, 0x3c, 0x6c, 0xf8,
	0x1f, 0x8b, 0xcf, 0x99, 0xcc, 0x2b, 0xe6, 0x4c, 0x50, 0xb1, 0xec, 0xbc, 0x03, 0x4d, 0x14, 0xe4,
	0xfb, 0x34, 0xc8, 0x2d, 0xad, 0x59, 0xbf, 0xba, 0x8f, 0xc3, 0x01, 0x99, 0x2c, 0x5c, 0x89, 0xff,
	0xfb, 0x03, 0x9e, 0x73, 0x4d, 0x3c, 0x36, 0x04, 0xef, 0xf3, 0x42, 0xb6, 0xcf, 0x9f, 0x1c, 0xb3,
	0x74, 0xc8, 0x9c, 0x44, 0x87, 0x6d, 0x00, 0xf4, 0x8c, 0xfa, 0xd5, 0xae, 0xab, 0x3b, 0x18, 0x92,
	0x9a, 0x4b, 0xee, 0xea, 0x0e, 0xdf, 0x48, 0xa8, 0xe9, 0xc4, 0xe9, 0x91, 0x41, 0xc0, 0xe8, 0x3c,
	0x97, 0x75, 0xb8, 0xc8, 0xdf, 0x48, 0x98, 0x98, 0x68, 0xd8, 0x8e, 0x3e, 0xa0, 0x01, 0xa5, 0x57,
	0xb9, 0x74, 0x3f, 0x10, 0x26, 0x8a, 0xb4, 0x32, 0xaf, 0x48, 0x67, 0xe2, 0x45, 0xfa, 0x4d, 0x82,
	0x62, 0x64, 0x6c, 0xbd, 0x26, 0x69, 0xf6, 0x60, 0x33, 0x32, 0xd8, 0xd8, 0x61, 0x8c, 0xf7, 0x67,
	0xe9, 0x71, 0xdc, 0x85, 0xd8, 0xaf, 0xc2, 0x8a, 0x83, 0x4e, 0x0f, 0x3d, 0x5a, 0xcc, 0xee, 0x64,
	0x76, 0xf3, 0xf5, 0x73, 0xca, 0xf1, 0xdf, 0x06, 0x65, 0x3a, 0x05, 0xb5, 0xd0, 0x6a, 0xce, 0xe1,
	0xd7, 0x7f, 0xca, 0x42, 0xc6, 0x6f, 0xa0, 0xf7, 0x61, 0xbd, 0x83, 0x2c, 0x36, 0x2b, 0x2e, 0x44,
	0xa3, 0x26, 0xfa, 0x71, 0xf9, 0xd2, 0x1c, 0xe5, 0xb4, 0x59, 0xa7, 0xe4, 0x3b, 0x90, 0x3b, 0x7e,
	0x0c, 0x17, 0x13, 0x3e, 0x53, 0x4d, 0x79, 0xe7, 0x34, 0x4d, 0x24, 0xd4, 0x67, 0xb0, 0x9e, 0x7c,
	0x5d, 0x57, 0x12, 0x6e, 0x09, 0x7d, 0xf9, 0xca, 0x7c, 0x7d, 0x24, 0xf8, 0x03, 0x58, 0x4b, 0xbc,
	0xa1, 0xb7, 0x13, 0xbe, 0x71, 0x75, 0xf9, 0xf2, 0x5c, 0x75, 0x24, 0x32, 0x85, 0xf3, 0xa7, 0xbd,
	0x90, 0x93, 0xf0, 0x4e, 0xb1, 0x2b, 0x2b, 0x8b, 0xd9, 0xc5, 0xd3, 0x49, 0x3c, 0x4e, 0xb6, 0x4f,
	0x8b, 0xc1, 0xd5, 0x33, 0xe9, 0x9c, 0xf2, 0xa4, 0x48, 0x35, 0xee, 0x3f, 0x7d, 0x59, 0x91, 0x9e,
	0xbf, 0xac, 0x48, 0x7f, 0xbd, 0xac, 0x48, 0xdf, 0x1e, 0x55, 0x52, 0xcf, 0x8f, 0x2a, 0xa9, 0xdf,
	0x8f, 0x2a, 0xa9, 0x4f, 0x3f, 0x88, 0x34, 0xbe, 0x21, 0x5a, 0xd6, 0xe4, 0x8b, 0x71, 0xf8, 0xdf,
	0x73, 0x4f, 0xfc, 0xd3, 0x52, 0x1d, 0x62, 0x8e, 0x06, 0xa8, 0x8e, 0xaf, 0xab, 0x87, 0xa1, 0x4a,
	0x8c, 0xb8, 0xde, 0x32, 0x7f, 0x24, 0x5d, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x98, 0xb1,
	0xbd, 0x17, 0x0f, 0x00, 0x00,
}

func (this *SendToCosmosEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendToCosmosEvent)
	if !ok {
		that2, ok := that.(SendToCosmosEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventNonce != that1.EventNonce {
		return false
	}
	if this.TokenContract != that1.TokenContract {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.EVMSender != that1.EVMSender {
		return false
	}
	if this.CosmosReceiver != that1.CosmosReceiver {
		return false
	}
	if this.EVMHeight != that1.EVMHeight {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetDelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error)
	SendToEVM(ctx context.Context, in *MsgSendToEVM, opts ...grpc.CallOption) (*MsgSendToEVMResponse, error)
	CancelSendToEVM(ctx context.Context, in *MsgCancelSendToEVM, opts ...grpc.CallOption) (*MsgCancelSendToEVMResponse, error)
	RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error)
	SubmitEVMTxConfirmation(ctx context.Context, in *MsgSubmitEVMTxConfirmation, opts ...grpc.CallOption) (*MsgSubmitEVMTxConfirmationResponse, error)
	SubmitEVMEvent(ctx context.Context, in *MsgSubmitEVMEvent, opts ...grpc.CallOption) (*MsgSubmitEVMEventResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetDelegateKeys(ctx context.Context, in *MsgDelegateKeys, opts ...grpc.CallOption) (*MsgDelegateKeysResponse, error) {
	out := new(MsgDelegateKeysResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/SetDelegateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToEVM(ctx context.Context, in *MsgSendToEVM, opts ...grpc.CallOption) (*MsgSendToEVMResponse, error) {
	out := new(MsgSendToEVMResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/SendToEVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSendToEVM(ctx context.Context, in *MsgCancelSendToEVM, opts ...grpc.CallOption) (*MsgCancelSendToEVMResponse, error) {
	out := new(MsgCancelSendToEVMResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/CancelSendToEVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBatchTx(ctx context.Context, in *MsgRequestBatchTx, opts ...grpc.CallOption) (*MsgRequestBatchTxResponse, error) {
	out := new(MsgRequestBatchTxResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/RequestBatchTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitEVMTxConfirmation(ctx context.Context, in *MsgSubmitEVMTxConfirmation, opts ...grpc.CallOption) (*MsgSubmitEVMTxConfirmationResponse, error) {
	out := new(MsgSubmitEVMTxConfirmationResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/SubmitEVMTxConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitEVMEvent(ctx context.Context, in *MsgSubmitEVMEvent, opts ...grpc.CallOption) (*MsgSubmitEVMEventResponse, error) {
	out := new(MsgSubmitEVMEventResponse)
	err := c.cc.Invoke(ctx, "/gravity.v2.Msg/SubmitEVMEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetDelegateKeys(context.Context, *MsgDelegateKeys) (*MsgDelegateKeysResponse, error)
	SendToEVM(context.Context, *MsgSendToEVM) (*MsgSendToEVMResponse, error)
	CancelSendToEVM(context.Context, *MsgCancelSendToEVM) (*MsgCancelSendToEVMResponse, error)
	RequestBatchTx(context.Context, *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error)
	SubmitEVMTxConfirmation(context.Context, *MsgSubmitEVMTxConfirmation) (*MsgSubmitEVMTxConfirmationResponse, error)
	SubmitEVMEvent(context.Context, *MsgSubmitEVMEvent) (*MsgSubmitEVMEventResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetDelegateKeys(ctx context.Context, req *MsgDelegateKeys) (*MsgDelegateKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelegateKeys not implemented")
}
func (*UnimplementedMsgServer) SendToEVM(ctx context.Context, req *MsgSendToEVM) (*MsgSendToEVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToEVM not implemented")
}
func (*UnimplementedMsgServer) CancelSendToEVM(ctx context.Context, req *MsgCancelSendToEVM) (*MsgCancelSendToEVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSendToEVM not implemented")
}
func (*UnimplementedMsgServer) RequestBatchTx(ctx context.Context, req *MsgRequestBatchTx) (*MsgRequestBatchTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBatchTx not implemented")
}
func (*UnimplementedMsgServer) SubmitEVMTxConfirmation(ctx context.Context, req *MsgSubmitEVMTxConfirmation) (*MsgSubmitEVMTxConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEVMTxConfirmation not implemented")
}
func (*UnimplementedMsgServer) SubmitEVMEvent(ctx context.Context, req *MsgSubmitEVMEvent) (*MsgSubmitEVMEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEVMEvent not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetDelegateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDelegateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/SetDelegateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDelegateKeys(ctx, req.(*MsgDelegateKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToEVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToEVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToEVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/SendToEVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToEVM(ctx, req.(*MsgSendToEVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSendToEVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSendToEVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSendToEVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/CancelSendToEVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSendToEVM(ctx, req.(*MsgCancelSendToEVM))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBatchTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBatchTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBatchTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/RequestBatchTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBatchTx(ctx, req.(*MsgRequestBatchTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitEVMTxConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitEVMTxConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitEVMTxConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/SubmitEVMTxConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitEVMTxConfirmation(ctx, req.(*MsgSubmitEVMTxConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitEVMEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitEVMEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitEVMEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.v2.Msg/SubmitEVMEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitEVMEvent(ctx, req.(*MsgSubmitEVMEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDelegateKeys",
			Handler:    _Msg_SetDelegateKeys_Handler,
		},
		{
			MethodName: "SendToEVM",
			Handler:    _Msg_SendToEVM_Handler,
		},
		{
			MethodName: "CancelSendToEVM",
			Handler:    _Msg_CancelSendToEVM_Handler,
		},
		{
			MethodName: "RequestBatchTx",
			Handler:    _Msg_RequestBatchTx_Handler,
		},
		{
			MethodName: "SubmitEVMTxConfirmation",
			Handler:    _Msg_SubmitEVMTxConfirmation_Handler,
		},
		{
			MethodName: "SubmitEVMEvent",
			Handler:    _Msg_SubmitEVMEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravity/v2/msgs.proto",
}

func (m *MsgSendToEVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEVM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEVM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EVMRecipient) > 0 {
		i -= len(m.EVMRecipient)
		copy(dAtA[i:], m.EVMRecipient)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToEVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToEVMResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToEVMResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEVM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEVM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToEVMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToEVMResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToEVMResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitEVMTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitEVMTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitEVMTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Confirmation != nil {
		{
			size, err := m.Confirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EVMSigner) > 0 {
		i -= len(m.EVMSigner)
		copy(dAtA[i:], m.EVMSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EVMSigner) > 0 {
		i -= len(m.EVMSigner)
		copy(dAtA[i:], m.EVMSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMSigner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EVMSigner) > 0 {
		i -= len(m.EVMSigner)
		copy(dAtA[i:], m.EVMSigner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMSigner)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignerSetNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SignerSetNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitEVMTxConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitEVMTxConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitEVMTxConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitEVMEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitEVMEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitEVMEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitEVMEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitEVMEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitEVMEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthSignature) > 0 {
		i -= len(m.EthSignature)
		copy(dAtA[i:], m.EthSignature)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EthSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EVMAddress) > 0 {
		i -= len(m.EVMAddress)
		copy(dAtA[i:], m.EVMAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelegateKeysSignMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegateKeysSignMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegateKeysSignMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendToCosmosEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendToCosmosEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendToCosmosEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x38
	}
	if m.EVMHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CosmosReceiver) > 0 {
		i -= len(m.CosmosReceiver)
		copy(dAtA[i:], m.CosmosReceiver)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosReceiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EVMSender) > 0 {
		i -= len(m.EVMSender)
		copy(dAtA[i:], m.EVMSender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.EVMSender)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.BatchNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x20
	}
	if m.EVMHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if m.EVMHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC20DeployedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20DeployedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20DeployedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x40
	}
	if m.EVMHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Erc20Decimals != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Erc20Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Erc20Symbol) > 0 {
		i -= len(m.Erc20Symbol)
		copy(dAtA[i:], m.Erc20Symbol)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Erc20Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Erc20Name) > 0 {
		i -= len(m.Erc20Name)
		copy(dAtA[i:], m.Erc20Name)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Erc20Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CosmosDenom) > 0 {
		i -= len(m.CosmosDenom)
		copy(dAtA[i:], m.CosmosDenom)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CosmosDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTxExecutedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTxExecutedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTxExecutedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.EVMHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.SignerSetTxNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.SignerSetTxNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.EventNonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendToEVM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EVMRecipient)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *MsgSendToEVMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsgs(uint64(m.Id))
	}
	return n
}

func (m *MsgCancelSendToEVM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsgs(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *MsgCancelSendToEVMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *MsgRequestBatchTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitEVMTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmation != nil {
		l = m.Confirmation.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *ContractCallTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	l = len(m.EVMSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *BatchTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	l = len(m.EVMSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *SignerSetTxConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignerSetNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SignerSetNonce))
	}
	l = len(m.EVMSigner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *MsgSubmitEVMTxConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitEVMEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *MsgSubmitEVMEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EVMAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.EthSignature)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDelegateKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelegateKeysSignMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	return n
}

func (m *SendToCosmosEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.EVMSender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CosmosReceiver)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.EVMHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EVMHeight))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *BatchExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.EVMHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EVMHeight))
	}
	if m.BatchNonce != 0 {
		n += 1 + sovMsgs(uint64(m.BatchNonce))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *ContractCallExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.InvalidationNonce != 0 {
		n += 1 + sovMsgs(uint64(m.InvalidationNonce))
	}
	if m.EVMHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EVMHeight))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *ERC20DeployedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	l = len(m.CosmosDenom)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Erc20Name)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Erc20Symbol)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Erc20Decimals != 0 {
		n += 1 + sovMsgs(uint64(m.Erc20Decimals))
	}
	if m.EVMHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EVMHeight))
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func (m *SignerSetTxExecutedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovMsgs(uint64(m.EventNonce))
	}
	if m.SignerSetTxNonce != 0 {
		n += 1 + sovMsgs(uint64(m.SignerSetTxNonce))
	}
	if m.EVMHeight != 0 {
		n += 1 + sovMsgs(uint64(m.EVMHeight))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	if m.ChainId != 0 {
		n += 1 + sovMsgs(uint64(m.ChainId))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendToEVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToEVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToEVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToEVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToEVMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToEVMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToEVMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitEVMTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEVMTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEVMTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmation == nil {
				m.Confirmation = &types1.Any{}
			}
			if err := m.Confirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetNonce", wireType)
			}
			m.SignerSetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerSetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMSigner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMSigner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitEVMTxConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEVMTxConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEVMTxConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitEVMEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEVMEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEVMEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types1.Any{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitEVMEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitEVMEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitEVMEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthSignature = append(m.EthSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EthSignature == nil {
				m.EthSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegateKeysSignMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegateKeysSignMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegateKeysSignMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendToCosmosEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendToCosmosEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendToCosmosEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosReceiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosReceiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20DeployedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20DeployedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20DeployedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Decimals", wireType)
			}
			m.Erc20Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Erc20Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTxExecutedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTxExecutedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTxExecutedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerSetTxNonce", wireType)
			}
			m.SignerSetTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignerSetTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &EVMSigner{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
