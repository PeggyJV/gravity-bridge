// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v2/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params represent the Gravity genesis and store parameters
// gravity_id:
// a random 32 byte value to prevent signature reuse, for example if the
// cosmos validators decided to use the same EVM keys for another chain
// also running Gravity we would not want it to be possible to play a deposit
// from chain A back on chain B's Gravity. This value IS USED ON EVM so
// it must be set in your genesis.json before launch and not changed after
// deploying Gravity
//
// contract_hash:
// the code hash of a known good version of the Gravity contract
// solidity code. This can be used to verify the correct version
// of the contract has been deployed. This is a reference value for
// goernance action only it is never read by any Gravity code
//
// bridge_EVM_address:
// is address of the bridge contract on the EVM side, this is a
// reference value for governance only and is not actually used by any
// Gravity code
//
// bridge_chain_id:
// the unique identifier of the EVM chain, this is a reference value
// only and is not actually used by any Gravity code
//
// These reference values may be used by future Gravity client implemetnations
// to allow for saftey features or convenience features like the Gravity address
// in your relayer. A relayer would require a configured Gravity address if
// governance had not set the address on the chain it was relaying for.
//
// signed_signer_set_txs_window
// signed_batches_window
// signed_EVM_signatures_window
//
// These values represent the time in blocks that a validator has to submit
// a signature for a batch or valset, or to submit a EVM_signature for a
// particular attestation nonce. In the case of attestations this clock starts
// when the attestation is created, but only allows for slashing once the event
// has passed
//
// target_evm_tx_timeout:
//
// This is the 'target' value for when EVM transactions time out, this is a
// target because EVM is a probabilistic chain and you can't say for sure
// what the block frequency is ahead of time.
//
// average_block_time
// average_EVM_block_time
//
// These values are the average Cosmos block time and EVM block time
// respectively and they are used to compute what the target batch timeout is.
// It is important that governance updates these in case of any major, prolonged
// change in the time it takes to produce a block
//
// slash_fraction_signer_set_tx
// slash_fraction_batch
// slash_fraction_EVM_signature
// slash_fraction_conflicting_EVM_signature
//
// The slashing fractions for the various gravity related slashing conditions.
// The first three refer to not submitting a particular message, the third for
// submitting a different EVM_signature for the same EVM event
type Params struct {
	AverageBlockTime uint64            `protobuf:"varint,1,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	ParamsForChains  []*ParamsForChain `protobuf:"bytes,2,rep,name=params_for_chains,json=paramsForChains,proto3" json:"params_for_chains,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e9474ccb1d789c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Params) GetParamsForChains() []*ParamsForChain {
	if m != nil {
		return m.ParamsForChains
	}
	return nil
}

type ParamsForChain struct {
	ChainId                  uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	GravityId                string `protobuf:"bytes,2,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	SignedSignerSetTxsWindow uint64 `protobuf:"varint,3,opt,name=signed_signer_set_txs_window,json=signedSignerSetTxsWindow,proto3" json:"signed_signer_set_txs_window,omitempty"`
	SignedBatchesWindow      uint64 `protobuf:"varint,4,opt,name=signed_batches_window,json=signedBatchesWindow,proto3" json:"signed_batches_window,omitempty"`
	EvmSignaturesWindow      uint64 `protobuf:"varint,5,opt,name=evm_signatures_window,json=evmSignaturesWindow,proto3" json:"evm_signatures_window,omitempty"`
	TargetEvmTxTimeout       uint64 `protobuf:"varint,6,opt,name=target_evm_tx_timeout,json=targetEvmTxTimeout,proto3" json:"target_evm_tx_timeout,omitempty"`
	AverageEvmBlockTime      uint64 `protobuf:"varint,7,opt,name=average_evm_block_time,json=averageEvmBlockTime,proto3" json:"average_evm_block_time,omitempty"`
	// TODO: slash fraction for contract call txs too
	SlashFractionSignerSetTx             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=slash_fraction_signer_set_tx,json=slashFractionSignerSetTx,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_signer_set_tx"`
	SlashFractionBatch                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=slash_fraction_batch,json=slashFractionBatch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_batch"`
	SlashFractionEvmSignature            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=slash_fraction_evm_signature,json=slashFractionEvmSignature,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_evm_signature"`
	SlashFractionConflictingEvmSignature github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=slash_fraction_conflicting_evm_signature,json=slashFractionConflictingEvmSignature,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_conflicting_evm_signature"`
	UnbondSlashingSignerSetTxsWindow     uint64                                 `protobuf:"varint,12,opt,name=unbond_slashing_signer_set_txs_window,json=unbondSlashingSignerSetTxsWindow,proto3" json:"unbond_slashing_signer_set_txs_window,omitempty"`
}

func (m *ParamsForChain) Reset()         { *m = ParamsForChain{} }
func (m *ParamsForChain) String() string { return proto.CompactTextString(m) }
func (*ParamsForChain) ProtoMessage()    {}
func (*ParamsForChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e9474ccb1d789c, []int{1}
}
func (m *ParamsForChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsForChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsForChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsForChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsForChain.Merge(m, src)
}
func (m *ParamsForChain) XXX_Size() int {
	return m.Size()
}
func (m *ParamsForChain) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsForChain.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsForChain proto.InternalMessageInfo

func (m *ParamsForChain) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ParamsForChain) GetGravityId() string {
	if m != nil {
		return m.GravityId
	}
	return ""
}

func (m *ParamsForChain) GetSignedSignerSetTxsWindow() uint64 {
	if m != nil {
		return m.SignedSignerSetTxsWindow
	}
	return 0
}

func (m *ParamsForChain) GetSignedBatchesWindow() uint64 {
	if m != nil {
		return m.SignedBatchesWindow
	}
	return 0
}

func (m *ParamsForChain) GetEvmSignaturesWindow() uint64 {
	if m != nil {
		return m.EvmSignaturesWindow
	}
	return 0
}

func (m *ParamsForChain) GetTargetEvmTxTimeout() uint64 {
	if m != nil {
		return m.TargetEvmTxTimeout
	}
	return 0
}

func (m *ParamsForChain) GetAverageEvmBlockTime() uint64 {
	if m != nil {
		return m.AverageEvmBlockTime
	}
	return 0
}

func (m *ParamsForChain) GetUnbondSlashingSignerSetTxsWindow() uint64 {
	if m != nil {
		return m.UnbondSlashingSignerSetTxsWindow
	}
	return 0
}

type GenesisState struct {
	Params           *Params                    `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	DelegateKeys     []*MsgDelegateKeys         `protobuf:"bytes,2,rep,name=delegate_keys,json=delegateKeys,proto3" json:"delegate_keys,omitempty"`
	EvmGenesisStates []*EVMSpecificGenesisState `protobuf:"bytes,3,rep,name=evm_genesis_states,json=evmGenesisStates,proto3" json:"evm_genesis_states,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e9474ccb1d789c, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GenesisState) GetDelegateKeys() []*MsgDelegateKeys {
	if m != nil {
		return m.DelegateKeys
	}
	return nil
}

func (m *GenesisState) GetEvmGenesisStates() []*EVMSpecificGenesisState {
	if m != nil {
		return m.EvmGenesisStates
	}
	return nil
}

type EVMSpecificGenesisState struct {
	ChainID                uint32                `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	LastObservedEventNonce uint64                `protobuf:"varint,2,opt,name=last_observed_event_nonce,json=lastObservedEventNonce,proto3" json:"last_observed_event_nonce,omitempty"`
	OutgoingTxs            []*types.Any          `protobuf:"bytes,3,rep,name=outgoing_txs,json=outgoingTxs,proto3" json:"outgoing_txs,omitempty"`
	Confirmations          []*types.Any          `protobuf:"bytes,4,rep,name=confirmations,proto3" json:"confirmations,omitempty"`
	EvmEventVoteRecords    []*EVMEventVoteRecord `protobuf:"bytes,5,rep,name=evm_event_vote_records,json=evmEventVoteRecords,proto3" json:"evm_event_vote_records,omitempty"`
	Erc20ToDenoms          []*ERC20ToDenom       `protobuf:"bytes,6,rep,name=erc20_to_denoms,json=erc20ToDenoms,proto3" json:"erc20_to_denoms,omitempty"`
	UnbatchedSendToEvmTxs  []*SendToEVM          `protobuf:"bytes,7,rep,name=unbatched_send_to_evm_txs,json=unbatchedSendToEvmTxs,proto3" json:"unbatched_send_to_evm_txs,omitempty"`
}

func (m *EVMSpecificGenesisState) Reset()         { *m = EVMSpecificGenesisState{} }
func (m *EVMSpecificGenesisState) String() string { return proto.CompactTextString(m) }
func (*EVMSpecificGenesisState) ProtoMessage()    {}
func (*EVMSpecificGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e9474ccb1d789c, []int{3}
}
func (m *EVMSpecificGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMSpecificGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMSpecificGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMSpecificGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMSpecificGenesisState.Merge(m, src)
}
func (m *EVMSpecificGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *EVMSpecificGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMSpecificGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_EVMSpecificGenesisState proto.InternalMessageInfo

func (m *EVMSpecificGenesisState) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *EVMSpecificGenesisState) GetLastObservedEventNonce() uint64 {
	if m != nil {
		return m.LastObservedEventNonce
	}
	return 0
}

func (m *EVMSpecificGenesisState) GetOutgoingTxs() []*types.Any {
	if m != nil {
		return m.OutgoingTxs
	}
	return nil
}

func (m *EVMSpecificGenesisState) GetConfirmations() []*types.Any {
	if m != nil {
		return m.Confirmations
	}
	return nil
}

func (m *EVMSpecificGenesisState) GetEvmEventVoteRecords() []*EVMEventVoteRecord {
	if m != nil {
		return m.EvmEventVoteRecords
	}
	return nil
}

func (m *EVMSpecificGenesisState) GetErc20ToDenoms() []*ERC20ToDenom {
	if m != nil {
		return m.Erc20ToDenoms
	}
	return nil
}

func (m *EVMSpecificGenesisState) GetUnbatchedSendToEvmTxs() []*SendToEVM {
	if m != nil {
		return m.UnbatchedSendToEvmTxs
	}
	return nil
}

// This records the relationship between an ERC20 token and the denom
// of the corresponding Cosmos originated asset
type ERC20ToDenom struct {
	Erc20   string `protobuf:"bytes,1,opt,name=erc20,proto3" json:"erc20,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	ChainID uint32 `protobuf:"varint,3,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *ERC20ToDenom) Reset()         { *m = ERC20ToDenom{} }
func (m *ERC20ToDenom) String() string { return proto.CompactTextString(m) }
func (*ERC20ToDenom) ProtoMessage()    {}
func (*ERC20ToDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7e9474ccb1d789c, []int{4}
}
func (m *ERC20ToDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20ToDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20ToDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20ToDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20ToDenom.Merge(m, src)
}
func (m *ERC20ToDenom) XXX_Size() int {
	return m.Size()
}
func (m *ERC20ToDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20ToDenom.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20ToDenom proto.InternalMessageInfo

func (m *ERC20ToDenom) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *ERC20ToDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ERC20ToDenom) GetChainID() uint32 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "gravity.v2.Params")
	proto.RegisterType((*ParamsForChain)(nil), "gravity.v2.ParamsForChain")
	proto.RegisterType((*GenesisState)(nil), "gravity.v2.GenesisState")
	proto.RegisterType((*EVMSpecificGenesisState)(nil), "gravity.v2.EVMSpecificGenesisState")
	proto.RegisterType((*ERC20ToDenom)(nil), "gravity.v2.ERC20ToDenom")
}

func init() { proto.RegisterFile("gravity/v2/genesis.proto", fileDescriptor_b7e9474ccb1d789c) }

var fileDescriptor_b7e9474ccb1d789c = []byte{
	// 935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x37, 0x69, 0xba, 0x9d, 0xa6, 0xec, 0x32, 0x34, 0xc5, 0x29, 0x4b, 0x36, 0x2a, 0x3f,
	0x14, 0x21, 0xd6, 0x5e, 0xd2, 0x03, 0x62, 0x91, 0x10, 0xb4, 0x49, 0xd1, 0x0a, 0x95, 0x82, 0x13,
	0x8a, 0xc4, 0x65, 0x70, 0xec, 0x17, 0xc7, 0x34, 0x9e, 0x89, 0x3c, 0x13, 0x6f, 0x72, 0xe3, 0x80,
	0x38, 0xf3, 0x67, 0xad, 0xc4, 0x81, 0x3d, 0x22, 0x84, 0x56, 0xa8, 0xfd, 0x3b, 0x90, 0xd0, 0xfc,
	0x48, 0x63, 0xa7, 0xc0, 0xa1, 0xa7, 0xe4, 0xcd, 0xf7, 0x7d, 0xef, 0x7b, 0x7e, 0xcf, 0xf3, 0x8c,
	0xec, 0x28, 0xf5, 0xb3, 0x58, 0x2c, 0xdc, 0xac, 0xe3, 0x46, 0x40, 0x81, 0xc7, 0xdc, 0x99, 0xa6,
	0x4c, 0x30, 0x8c, 0x0c, 0xe2, 0x64, 0x9d, 0xfd, 0xdd, 0x88, 0x45, 0x4c, 0x1d, 0xbb, 0xf2, 0x9f,
	0x66, 0xec, 0x17, 0xb4, 0x86, 0xac, 0x91, 0x7a, 0x0e, 0x49, 0x78, 0x64, 0x52, 0xee, 0x37, 0x22,
	0xc6, 0xa2, 0x09, 0xb8, 0x2a, 0x1a, 0xce, 0x46, 0xae, 0x4f, 0x8d, 0xe2, 0xe0, 0x27, 0x0b, 0x55,
	0xbf, 0xf2, 0x53, 0x3f, 0xe1, 0xf8, 0x7d, 0x84, 0xfd, 0x0c, 0x52, 0x3f, 0x02, 0x32, 0x9c, 0xb0,
	0xe0, 0x82, 0x88, 0x38, 0x01, 0xdb, 0x6a, 0x59, 0xed, 0x8a, 0x77, 0xdf, 0x20, 0x47, 0x12, 0x18,
	0xc4, 0x09, 0xe0, 0x13, 0xf4, 0xea, 0x54, 0xe9, 0xc8, 0x88, 0xa5, 0x24, 0x18, 0xfb, 0x31, 0xe5,
	0xf6, 0x9d, 0x56, 0xb9, 0xbd, 0xdd, 0xd9, 0x77, 0x56, 0x8f, 0xe0, 0xe8, 0xe4, 0x27, 0x2c, 0x3d,
	0x96, 0x14, 0xef, 0xde, 0xb4, 0x10, 0xf3, 0x27, 0x95, 0x1f, 0xff, 0x6c, 0x95, 0x0e, 0xfe, 0xae,
	0xa2, 0x57, 0x8a, 0x4c, 0xdc, 0x40, 0x77, 0x55, 0x56, 0x12, 0x87, 0xaa, 0x88, 0x1d, 0x6f, 0x53,
	0xc5, 0x4f, 0x43, 0xfc, 0x26, 0x5a, 0x36, 0x49, 0x82, 0x77, 0x5a, 0x56, 0x7b, 0xcb, 0xdb, 0x32,
	0x27, 0x4f, 0x43, 0xfc, 0x09, 0x7a, 0xc0, 0xe3, 0x88, 0x42, 0x48, 0xd4, 0x4f, 0x4a, 0x38, 0x08,
	0x22, 0xe6, 0x9c, 0x3c, 0x8b, 0x69, 0xc8, 0x9e, 0xd9, 0x65, 0xf5, 0x48, 0xb6, 0xe6, 0xf4, 0x15,
	0xa5, 0x0f, 0x62, 0x30, 0xe7, 0xdf, 0x2a, 0x1c, 0x77, 0x50, 0xdd, 0xe8, 0x87, 0xbe, 0x08, 0xc6,
	0x70, 0x2d, 0xac, 0x28, 0xe1, 0x6b, 0x1a, 0x3c, 0xd2, 0xd8, 0x4a, 0x03, 0x59, 0xa2, 0x0c, 0x7d,
	0x31, 0x4b, 0x57, 0x9a, 0x0d, 0xad, 0x81, 0x2c, 0xe9, 0x5f, 0x63, 0x46, 0xf3, 0x01, 0xaa, 0x0b,
	0x3f, 0x8d, 0x40, 0x10, 0x29, 0x15, 0x73, 0xd5, 0x70, 0x36, 0x13, 0x76, 0x55, 0x69, 0xb0, 0x06,
	0x7b, 0x59, 0x32, 0x98, 0x0f, 0x34, 0x82, 0x0f, 0xd1, 0xde, 0x72, 0x46, 0x52, 0x93, 0x9b, 0xd3,
	0xa6, 0xf6, 0x31, 0x68, 0x2f, 0x4b, 0x56, 0xa3, 0xa2, 0xe8, 0x01, 0x9f, 0xf8, 0x7c, 0x4c, 0x46,
	0xa9, 0x1f, 0x88, 0x98, 0xd1, 0x62, 0x5f, 0xec, 0xbb, 0x2d, 0xab, 0x5d, 0x3b, 0x72, 0x9e, 0xbf,
	0x7c, 0x58, 0xfa, 0xe3, 0xe5, 0xc3, 0x77, 0xa3, 0x58, 0x8c, 0x67, 0x43, 0x27, 0x60, 0x89, 0x1b,
	0x30, 0x9e, 0x30, 0x6e, 0x7e, 0x1e, 0xf1, 0xf0, 0xc2, 0x15, 0x8b, 0x29, 0x70, 0xa7, 0x0b, 0x81,
	0x67, 0xab, 0x9c, 0x27, 0x26, 0x65, 0xae, 0x8d, 0xf8, 0x7b, 0xb4, 0xbb, 0xe6, 0xa7, 0xfa, 0x68,
	0x6f, 0xdd, 0xca, 0x07, 0x17, 0x7c, 0x54, 0xd7, 0x31, 0xbb, 0xf1, 0x44, 0x85, 0xe6, 0xdb, 0xe8,
	0x56, 0x4e, 0x8d, 0x82, 0x53, 0x2f, 0x37, 0x31, 0xfc, 0xb3, 0x85, 0xda, 0x6b, 0x8e, 0x01, 0xa3,
	0xa3, 0x49, 0x1c, 0x88, 0x98, 0x46, 0x6b, 0xee, 0xdb, 0xb7, 0x72, 0x7f, 0xbb, 0xe0, 0x7e, 0xbc,
	0xca, 0x5e, 0x28, 0xe4, 0x0c, 0xbd, 0x33, 0xa3, 0x43, 0x46, 0x43, 0xa2, 0xe8, 0xd2, 0xfc, 0xdf,
	0x5f, 0xf2, 0x9a, 0x7a, 0x1f, 0x5a, 0x9a, 0xdc, 0x37, 0xdc, 0x9b, 0x2f, 0xbb, 0xb9, 0x7f, 0xbf,
	0x59, 0xa8, 0xf6, 0xb9, 0x5e, 0x43, 0x7d, 0xe1, 0x0b, 0xc0, 0xef, 0xa1, 0xaa, 0xbe, 0xa9, 0xea,
	0xee, 0x6d, 0x77, 0xf0, 0xcd, 0x3b, 0xed, 0x19, 0x06, 0xfe, 0x14, 0xed, 0x84, 0x30, 0x81, 0xc8,
	0x17, 0x40, 0x2e, 0x60, 0xb1, 0x5c, 0x03, 0x6f, 0xe4, 0x25, 0xa7, 0x3c, 0xea, 0x1a, 0xce, 0x17,
	0xb0, 0xe0, 0x5e, 0x2d, 0xcc, 0x45, 0xf8, 0x6b, 0x84, 0x65, 0x0b, 0xcd, 0x22, 0x24, 0x5c, 0x96,
	0xc0, 0xed, 0xb2, 0x4a, 0xf3, 0x56, 0x3e, 0x4d, 0xef, 0xfc, 0xb4, 0x3f, 0x85, 0x20, 0x1e, 0xc5,
	0x41, 0xbe, 0x5c, 0xef, 0x3e, 0x64, 0x49, 0xfe, 0x80, 0x1f, 0xfc, 0x5a, 0x46, 0xaf, 0xff, 0x07,
	0x1b, 0xdb, 0xc8, 0xac, 0x92, 0x6e, 0x71, 0xb3, 0x74, 0xf1, 0x47, 0xa8, 0x31, 0xf1, 0xb9, 0x20,
	0x6c, 0xc8, 0x21, 0xcd, 0x20, 0x24, 0x90, 0x01, 0x15, 0x84, 0x32, 0x1a, 0x80, 0x5a, 0x34, 0x15,
	0x6f, 0x4f, 0x12, 0xce, 0x0c, 0xde, 0x93, 0xf0, 0x97, 0x12, 0xc5, 0x1f, 0xa2, 0x1a, 0x9b, 0x89,
	0x88, 0xc9, 0x91, 0x88, 0xf9, 0xb2, 0xfa, 0x5d, 0x47, 0xef, 0x5e, 0x67, 0xb9, 0x7b, 0x9d, 0xcf,
	0xe8, 0xc2, 0xdb, 0x5e, 0x32, 0x07, 0x73, 0x8e, 0x9f, 0xa0, 0x1d, 0xf9, 0x2e, 0xc5, 0x69, 0xe2,
	0xcb, 0xc9, 0x73, 0xbb, 0xf2, 0x3f, 0xca, 0x22, 0x15, 0xf7, 0xd1, 0x9e, 0x6c, 0x9c, 0xae, 0x32,
	0x63, 0x02, 0x48, 0x0a, 0x01, 0x4b, 0x43, 0x6e, 0x6f, 0xa8, 0x24, 0xcd, 0xb5, 0xe6, 0xa9, 0x7a,
	0xcf, 0x99, 0x00, 0x4f, 0xd1, 0xd4, 0x5e, 0x5a, 0x3b, 0x93, 0xf3, 0xbc, 0x07, 0x69, 0xd0, 0x79,
	0x4c, 0x04, 0x23, 0x21, 0x50, 0x96, 0x70, 0xbb, 0xaa, 0xb2, 0xd9, 0x85, 0x6c, 0xde, 0x71, 0xe7,
	0xf1, 0x80, 0x75, 0x25, 0xc1, 0xdb, 0x51, 0x02, 0x13, 0x71, 0x7c, 0x86, 0x1a, 0x33, 0xaa, 0x97,
	0x67, 0x48, 0x38, 0xd0, 0x50, 0xa6, 0xd2, 0x4b, 0x8e, 0xdb, 0x9b, 0x2a, 0x57, 0x3d, 0x9f, 0xab,
	0x0f, 0x34, 0x1c, 0xb0, 0xde, 0xf9, 0xa9, 0x57, 0xbf, 0xd6, 0x99, 0x33, 0xb9, 0xfd, 0xf8, 0xc1,
	0x00, 0xd5, 0xf2, 0x7e, 0x78, 0x17, 0x6d, 0x28, 0x47, 0x35, 0xbf, 0x2d, 0x4f, 0x07, 0xf2, 0x54,
	0xd5, 0x6b, 0x3e, 0x09, 0x3a, 0xc8, 0x4f, 0xbb, 0x5c, 0x98, 0xf6, 0xd1, 0x37, 0xcf, 0x2f, 0x9b,
	0xd6, 0x8b, 0xcb, 0xa6, 0xf5, 0xd7, 0x65, 0xd3, 0xfa, 0xe5, 0xaa, 0x59, 0x7a, 0x71, 0xd5, 0x2c,
	0xfd, 0x7e, 0xd5, 0x2c, 0x7d, 0xf7, 0x71, 0xee, 0xd2, 0x4e, 0x21, 0x8a, 0x16, 0x3f, 0x64, 0xcb,
	0x4f, 0xed, 0xa3, 0x61, 0x1a, 0x87, 0x11, 0xb8, 0x09, 0x0b, 0x67, 0x13, 0x70, 0xb3, 0x43, 0x77,
	0xbe, 0x84, 0xf4, 0x6d, 0x1e, 0x56, 0xd5, 0xc4, 0x0e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x34,
	0x91, 0x2b, 0x6f, 0xe4, 0x07, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamsForChains) > 0 {
		for iNdEx := len(m.ParamsForChains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ParamsForChains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParamsForChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsForChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsForChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondSlashingSignerSetTxsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UnbondSlashingSignerSetTxsWindow))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.SlashFractionConflictingEvmSignature.Size()
		i -= size
		if _, err := m.SlashFractionConflictingEvmSignature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.SlashFractionEvmSignature.Size()
		i -= size
		if _, err := m.SlashFractionEvmSignature.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SlashFractionBatch.Size()
		i -= size
		if _, err := m.SlashFractionBatch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.SlashFractionSignerSetTx.Size()
		i -= size
		if _, err := m.SlashFractionSignerSetTx.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.AverageEvmBlockTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AverageEvmBlockTime))
		i--
		dAtA[i] = 0x38
	}
	if m.TargetEvmTxTimeout != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TargetEvmTxTimeout))
		i--
		dAtA[i] = 0x30
	}
	if m.EvmSignaturesWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EvmSignaturesWindow))
		i--
		dAtA[i] = 0x28
	}
	if m.SignedBatchesWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedBatchesWindow))
		i--
		dAtA[i] = 0x20
	}
	if m.SignedSignerSetTxsWindow != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedSignerSetTxsWindow))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GravityId) > 0 {
		i -= len(m.GravityId)
		copy(dAtA[i:], m.GravityId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GravityId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmGenesisStates) > 0 {
		for iNdEx := len(m.EvmGenesisStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EvmGenesisStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegateKeys) > 0 {
		for iNdEx := len(m.DelegateKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EVMSpecificGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMSpecificGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMSpecificGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedSendToEvmTxs) > 0 {
		for iNdEx := len(m.UnbatchedSendToEvmTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedSendToEvmTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for iNdEx := len(m.Erc20ToDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20ToDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.EvmEventVoteRecords) > 0 {
		for iNdEx := len(m.EvmEventVoteRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EvmEventVoteRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Confirmations) > 0 {
		for iNdEx := len(m.Confirmations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirmations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.OutgoingTxs) > 0 {
		for iNdEx := len(m.OutgoingTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutgoingTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LastObservedEventNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedEventNonce))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC20ToDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20ToDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20ToDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ChainID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AverageBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageBlockTime))
	}
	if len(m.ParamsForChains) > 0 {
		for _, e := range m.ParamsForChains {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ParamsForChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovGenesis(uint64(m.ChainId))
	}
	l = len(m.GravityId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.SignedSignerSetTxsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedSignerSetTxsWindow))
	}
	if m.SignedBatchesWindow != 0 {
		n += 1 + sovGenesis(uint64(m.SignedBatchesWindow))
	}
	if m.EvmSignaturesWindow != 0 {
		n += 1 + sovGenesis(uint64(m.EvmSignaturesWindow))
	}
	if m.TargetEvmTxTimeout != 0 {
		n += 1 + sovGenesis(uint64(m.TargetEvmTxTimeout))
	}
	if m.AverageEvmBlockTime != 0 {
		n += 1 + sovGenesis(uint64(m.AverageEvmBlockTime))
	}
	l = m.SlashFractionSignerSetTx.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionBatch.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionEvmSignature.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionConflictingEvmSignature.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.UnbondSlashingSignerSetTxsWindow != 0 {
		n += 1 + sovGenesis(uint64(m.UnbondSlashingSignerSetTxsWindow))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegateKeys) > 0 {
		for _, e := range m.DelegateKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EvmGenesisStates) > 0 {
		for _, e := range m.EvmGenesisStates {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *EVMSpecificGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovGenesis(uint64(m.ChainID))
	}
	if m.LastObservedEventNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedEventNonce))
	}
	if len(m.OutgoingTxs) > 0 {
		for _, e := range m.OutgoingTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Confirmations) > 0 {
		for _, e := range m.Confirmations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EvmEventVoteRecords) > 0 {
		for _, e := range m.EvmEventVoteRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20ToDenoms) > 0 {
		for _, e := range m.Erc20ToDenoms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedSendToEvmTxs) > 0 {
		for _, e := range m.UnbatchedSendToEvmTxs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ERC20ToDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.ChainID != 0 {
		n += 1 + sovGenesis(uint64(m.ChainID))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamsForChains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamsForChains = append(m.ParamsForChains, &ParamsForChain{})
			if err := m.ParamsForChains[len(m.ParamsForChains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsForChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsForChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsForChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedSignerSetTxsWindow", wireType)
			}
			m.SignedSignerSetTxsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedSignerSetTxsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBatchesWindow", wireType)
			}
			m.SignedBatchesWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedBatchesWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmSignaturesWindow", wireType)
			}
			m.EvmSignaturesWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvmSignaturesWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEvmTxTimeout", wireType)
			}
			m.TargetEvmTxTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetEvmTxTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEvmBlockTime", wireType)
			}
			m.AverageEvmBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageEvmBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionSignerSetTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionSignerSetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionBatch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionEvmSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionEvmSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionConflictingEvmSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionConflictingEvmSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondSlashingSignerSetTxsWindow", wireType)
			}
			m.UnbondSlashingSignerSetTxsWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondSlashingSignerSetTxsWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateKeys = append(m.DelegateKeys, &MsgDelegateKeys{})
			if err := m.DelegateKeys[len(m.DelegateKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmGenesisStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmGenesisStates = append(m.EvmGenesisStates, &EVMSpecificGenesisState{})
			if err := m.EvmGenesisStates[len(m.EvmGenesisStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMSpecificGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMSpecificGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMSpecificGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
			}
			m.LastObservedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutgoingTxs = append(m.OutgoingTxs, &types.Any{})
			if err := m.OutgoingTxs[len(m.OutgoingTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirmations = append(m.Confirmations, &types.Any{})
			if err := m.Confirmations[len(m.Confirmations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmEventVoteRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmEventVoteRecords = append(m.EvmEventVoteRecords, &EVMEventVoteRecord{})
			if err := m.EvmEventVoteRecords[len(m.EvmEventVoteRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20ToDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20ToDenoms = append(m.Erc20ToDenoms, &ERC20ToDenom{})
			if err := m.Erc20ToDenoms[len(m.Erc20ToDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedSendToEvmTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedSendToEvmTxs = append(m.UnbatchedSendToEvmTxs, &SendToEVM{})
			if err := m.UnbatchedSendToEvmTxs[len(m.UnbatchedSendToEvmTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20ToDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20ToDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20ToDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
