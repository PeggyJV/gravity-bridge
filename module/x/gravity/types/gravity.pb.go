// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gravity/v2/gravity.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EVMEventVoteRecord is an event that is pending of confirmation by 2/3 of
// the signer set. The event is then attested and executed in the state machine
// once the required threshold is met.
type EVMEventVoteRecord struct {
	Event    *types.Any `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Votes    []string   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Accepted bool       `protobuf:"varint,3,opt,name=accepted,proto3" json:"accepted,omitempty"`
	ChainId  uint32     `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *EVMEventVoteRecord) Reset()         { *m = EVMEventVoteRecord{} }
func (m *EVMEventVoteRecord) String() string { return proto.CompactTextString(m) }
func (*EVMEventVoteRecord) ProtoMessage()    {}
func (*EVMEventVoteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{0}
}
func (m *EVMEventVoteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMEventVoteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMEventVoteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMEventVoteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMEventVoteRecord.Merge(m, src)
}
func (m *EVMEventVoteRecord) XXX_Size() int {
	return m.Size()
}
func (m *EVMEventVoteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMEventVoteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EVMEventVoteRecord proto.InternalMessageInfo

func (m *EVMEventVoteRecord) GetEvent() *types.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EVMEventVoteRecord) GetVotes() []string {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *EVMEventVoteRecord) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *EVMEventVoteRecord) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// LatestEVMBlockHeight defines the latest observed EVM block height
// and the corresponding timestamp value in nanoseconds.
type LatestEVMBlockHeight struct {
	EVMHeight    uint64 `protobuf:"varint,1,opt,name=EVM_height,json=EVMHeight,proto3" json:"EVM_height,omitempty"`
	CosmosHeight uint64 `protobuf:"varint,2,opt,name=cosmos_height,json=cosmosHeight,proto3" json:"cosmos_height,omitempty"`
	ChainId      uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *LatestEVMBlockHeight) Reset()         { *m = LatestEVMBlockHeight{} }
func (m *LatestEVMBlockHeight) String() string { return proto.CompactTextString(m) }
func (*LatestEVMBlockHeight) ProtoMessage()    {}
func (*LatestEVMBlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{1}
}
func (m *LatestEVMBlockHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestEVMBlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestEVMBlockHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestEVMBlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestEVMBlockHeight.Merge(m, src)
}
func (m *LatestEVMBlockHeight) XXX_Size() int {
	return m.Size()
}
func (m *LatestEVMBlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestEVMBlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_LatestEVMBlockHeight proto.InternalMessageInfo

func (m *LatestEVMBlockHeight) GetEVMHeight() uint64 {
	if m != nil {
		return m.EVMHeight
	}
	return 0
}

func (m *LatestEVMBlockHeight) GetCosmosHeight() uint64 {
	if m != nil {
		return m.CosmosHeight
	}
	return 0
}

func (m *LatestEVMBlockHeight) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// EVMSigner represents a cosmos validator with its corresponding bridge
// operator EVM address and its staking consensus power.
type EVMSigner struct {
	Power      uint64 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	EVMAddress string `protobuf:"bytes,2,opt,name=EVM_address,json=EVMAddress,proto3" json:"EVM_address,omitempty"`
	ChainId    uint32 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *EVMSigner) Reset()         { *m = EVMSigner{} }
func (m *EVMSigner) String() string { return proto.CompactTextString(m) }
func (*EVMSigner) ProtoMessage()    {}
func (*EVMSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{2}
}
func (m *EVMSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMSigner.Merge(m, src)
}
func (m *EVMSigner) XXX_Size() int {
	return m.Size()
}
func (m *EVMSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMSigner.DiscardUnknown(m)
}

var xxx_messageInfo_EVMSigner proto.InternalMessageInfo

func (m *EVMSigner) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *EVMSigner) GetEVMAddress() string {
	if m != nil {
		return m.EVMAddress
	}
	return ""
}

func (m *EVMSigner) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// SignerSetTx is the EVM Bridge multisig set that relays
// transactions the two chains. The staking validators keep EVM keys which
// are used to check signatures on EVM in order to get significant gas
// savings.
type SignerSetTx struct {
	Nonce   uint64     `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Height  uint64     `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Signers EVMSigners `protobuf:"bytes,3,rep,name=signers,proto3,castrepeated=EVMSigners" json:"signers,omitempty"`
	ChainId uint32     `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SignerSetTx) Reset()         { *m = SignerSetTx{} }
func (m *SignerSetTx) String() string { return proto.CompactTextString(m) }
func (*SignerSetTx) ProtoMessage()    {}
func (*SignerSetTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{3}
}
func (m *SignerSetTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignerSetTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignerSetTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignerSetTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignerSetTx.Merge(m, src)
}
func (m *SignerSetTx) XXX_Size() int {
	return m.Size()
}
func (m *SignerSetTx) XXX_DiscardUnknown() {
	xxx_messageInfo_SignerSetTx.DiscardUnknown(m)
}

var xxx_messageInfo_SignerSetTx proto.InternalMessageInfo

func (m *SignerSetTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SignerSetTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SignerSetTx) GetSigners() EVMSigners {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *SignerSetTx) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// BatchTx represents a batch of transactions going from Cosmos to EVM.
// Batch txs are are identified by a unique hash and the token contract that is
// shared by all the SendToEVM
type BatchTx struct {
	BatchNonce    uint64       `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	Timeout       uint64       `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Transactions  []*SendToEVM `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TokenContract string       `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Height        uint64       `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	ChainId       uint32       `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *BatchTx) Reset()         { *m = BatchTx{} }
func (m *BatchTx) String() string { return proto.CompactTextString(m) }
func (*BatchTx) ProtoMessage()    {}
func (*BatchTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{4}
}
func (m *BatchTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchTx.Merge(m, src)
}
func (m *BatchTx) XXX_Size() int {
	return m.Size()
}
func (m *BatchTx) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchTx.DiscardUnknown(m)
}

var xxx_messageInfo_BatchTx proto.InternalMessageInfo

func (m *BatchTx) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *BatchTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *BatchTx) GetTransactions() []*SendToEVM {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *BatchTx) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *BatchTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BatchTx) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// SendToEVM represents an individual SendToEVM from Cosmos to
// EVM
type SendToEVM struct {
	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender       string     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	EVMRecipient string     `protobuf:"bytes,3,opt,name=EVM_recipient,json=EVMRecipient,proto3" json:"EVM_recipient,omitempty"`
	Erc20Token   ERC20Token `protobuf:"bytes,4,opt,name=erc20_token,json=erc20Token,proto3" json:"erc20_token"`
	Erc20Fee     ERC20Token `protobuf:"bytes,5,opt,name=erc20_fee,json=erc20Fee,proto3" json:"erc20_fee"`
	ChainId      uint32     `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *SendToEVM) Reset()         { *m = SendToEVM{} }
func (m *SendToEVM) String() string { return proto.CompactTextString(m) }
func (*SendToEVM) ProtoMessage()    {}
func (*SendToEVM) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{5}
}
func (m *SendToEVM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendToEVM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendToEVM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendToEVM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToEVM.Merge(m, src)
}
func (m *SendToEVM) XXX_Size() int {
	return m.Size()
}
func (m *SendToEVM) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToEVM.DiscardUnknown(m)
}

var xxx_messageInfo_SendToEVM proto.InternalMessageInfo

func (m *SendToEVM) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SendToEVM) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendToEVM) GetEVMRecipient() string {
	if m != nil {
		return m.EVMRecipient
	}
	return ""
}

func (m *SendToEVM) GetErc20Token() ERC20Token {
	if m != nil {
		return m.Erc20Token
	}
	return ERC20Token{}
}

func (m *SendToEVM) GetErc20Fee() ERC20Token {
	if m != nil {
		return m.Erc20Fee
	}
	return ERC20Token{}
}

func (m *SendToEVM) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

// ContractCallTx represents an individual arbitrary logic call transaction
// from Cosmos to EVM.
type ContractCallTx struct {
	InvalidationNonce uint64       `protobuf:"varint,1,opt,name=invalidation_nonce,json=invalidationNonce,proto3" json:"invalidation_nonce,omitempty"`
	InvalidationScope []byte       `protobuf:"bytes,2,opt,name=invalidation_scope,json=invalidationScope,proto3" json:"invalidation_scope,omitempty"`
	Address           string       `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Payload           []byte       `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Timeout           uint64       `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tokens            []ERC20Token `protobuf:"bytes,6,rep,name=tokens,proto3" json:"tokens"`
	Fees              []ERC20Token `protobuf:"bytes,7,rep,name=fees,proto3" json:"fees"`
	Height            uint64       `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	ChainId           uint32       `protobuf:"varint,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ContractCallTx) Reset()         { *m = ContractCallTx{} }
func (m *ContractCallTx) String() string { return proto.CompactTextString(m) }
func (*ContractCallTx) ProtoMessage()    {}
func (*ContractCallTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{6}
}
func (m *ContractCallTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractCallTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractCallTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractCallTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractCallTx.Merge(m, src)
}
func (m *ContractCallTx) XXX_Size() int {
	return m.Size()
}
func (m *ContractCallTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractCallTx.DiscardUnknown(m)
}

var xxx_messageInfo_ContractCallTx proto.InternalMessageInfo

func (m *ContractCallTx) GetInvalidationNonce() uint64 {
	if m != nil {
		return m.InvalidationNonce
	}
	return 0
}

func (m *ContractCallTx) GetInvalidationScope() []byte {
	if m != nil {
		return m.InvalidationScope
	}
	return nil
}

func (m *ContractCallTx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ContractCallTx) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ContractCallTx) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ContractCallTx) GetTokens() []ERC20Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *ContractCallTx) GetFees() []ERC20Token {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *ContractCallTx) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ContractCallTx) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type ERC20Token struct {
	Contract string                                 `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	ChainId  uint32                                 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ERC20Token) Reset()         { *m = ERC20Token{} }
func (m *ERC20Token) String() string { return proto.CompactTextString(m) }
func (*ERC20Token) ProtoMessage()    {}
func (*ERC20Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{7}
}
func (m *ERC20Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20Token.Merge(m, src)
}
func (m *ERC20Token) XXX_Size() int {
	return m.Size()
}
func (m *ERC20Token) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20Token.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20Token proto.InternalMessageInfo

func (m *ERC20Token) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *ERC20Token) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type CommunityPoolEVMSpendProposal struct {
	Title       string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Recipient   string      `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount      types1.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	BridgeFee   types1.Coin `protobuf:"bytes,5,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
	ChainId     uint32      `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CommunityPoolEVMSpendProposal) Reset()      { *m = CommunityPoolEVMSpendProposal{} }
func (*CommunityPoolEVMSpendProposal) ProtoMessage() {}
func (*CommunityPoolEVMSpendProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{8}
}
func (m *CommunityPoolEVMSpendProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolEVMSpendProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolEVMSpendProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolEVMSpendProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolEVMSpendProposal.Merge(m, src)
}
func (m *CommunityPoolEVMSpendProposal) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolEVMSpendProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolEVMSpendProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolEVMSpendProposal proto.InternalMessageInfo

// This format of the community spend EVM proposal is specifically for
// the CLI to allow simple text serialization.
type CommunityPoolEVMSpendProposalForCLI struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Recipient   string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	Amount      string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
	BridgeFee   string `protobuf:"bytes,5,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee,omitempty" yaml:"bridge_fee"`
	Deposit     string `protobuf:"bytes,6,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
	ChainId     uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
}

func (m *CommunityPoolEVMSpendProposalForCLI) Reset()         { *m = CommunityPoolEVMSpendProposalForCLI{} }
func (m *CommunityPoolEVMSpendProposalForCLI) String() string { return proto.CompactTextString(m) }
func (*CommunityPoolEVMSpendProposalForCLI) ProtoMessage()    {}
func (*CommunityPoolEVMSpendProposalForCLI) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b37677d6fb1940f, []int{9}
}
func (m *CommunityPoolEVMSpendProposalForCLI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommunityPoolEVMSpendProposalForCLI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommunityPoolEVMSpendProposalForCLI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommunityPoolEVMSpendProposalForCLI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityPoolEVMSpendProposalForCLI.Merge(m, src)
}
func (m *CommunityPoolEVMSpendProposalForCLI) XXX_Size() int {
	return m.Size()
}
func (m *CommunityPoolEVMSpendProposalForCLI) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityPoolEVMSpendProposalForCLI.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityPoolEVMSpendProposalForCLI proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EVMEventVoteRecord)(nil), "gravity.v2.EVMEventVoteRecord")
	proto.RegisterType((*LatestEVMBlockHeight)(nil), "gravity.v2.LatestEVMBlockHeight")
	proto.RegisterType((*EVMSigner)(nil), "gravity.v2.EVMSigner")
	proto.RegisterType((*SignerSetTx)(nil), "gravity.v2.SignerSetTx")
	proto.RegisterType((*BatchTx)(nil), "gravity.v2.BatchTx")
	proto.RegisterType((*SendToEVM)(nil), "gravity.v2.SendToEVM")
	proto.RegisterType((*ContractCallTx)(nil), "gravity.v2.ContractCallTx")
	proto.RegisterType((*ERC20Token)(nil), "gravity.v2.ERC20Token")
	proto.RegisterType((*CommunityPoolEVMSpendProposal)(nil), "gravity.v2.CommunityPoolEVMSpendProposal")
	proto.RegisterType((*CommunityPoolEVMSpendProposalForCLI)(nil), "gravity.v2.CommunityPoolEVMSpendProposalForCLI")
}

func init() { proto.RegisterFile("gravity/v2/gravity.proto", fileDescriptor_2b37677d6fb1940f) }

var fileDescriptor_2b37677d6fb1940f = []byte{
	// 1082 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xbd, 0x6f, 0xdb, 0x46,
	0x14, 0x17, 0x25, 0x5b, 0x12, 0x4f, 0xb2, 0x1b, 0x5f, 0x1d, 0x43, 0x36, 0x1a, 0x51, 0x60, 0xd0,
	0xc0, 0x05, 0x6a, 0xd2, 0x51, 0x02, 0x34, 0x49, 0xd1, 0x16, 0xa1, 0x20, 0xa3, 0x06, 0xe2, 0x22,
	0xa0, 0x5d, 0x0d, 0x05, 0x0a, 0x81, 0x22, 0xcf, 0xf4, 0xd5, 0x14, 0x8f, 0x20, 0x4f, 0xaa, 0xb5,
	0x77, 0x28, 0xd0, 0xa5, 0x5b, 0x0b, 0x74, 0xf1, 0xdc, 0xb9, 0x7f, 0x44, 0xd0, 0x29, 0x5b, 0x3f,
	0x06, 0xb5, 0xb0, 0x97, 0x2e, 0x5d, 0xf4, 0x17, 0x14, 0xf7, 0x41, 0x89, 0x4c, 0x52, 0x25, 0x93,
	0xf8, 0x7b, 0x1f, 0xf7, 0xde, 0xfb, 0xbd, 0xdf, 0x91, 0x02, 0x0d, 0x3f, 0x76, 0xc6, 0x98, 0x4e,
	0xcc, 0x71, 0xdb, 0x94, 0x8f, 0x46, 0x14, 0x13, 0x4a, 0x20, 0x48, 0xe1, 0xb8, 0xbd, 0xd3, 0x74,
	0x49, 0x32, 0x24, 0x89, 0x39, 0x70, 0x12, 0x64, 0x8e, 0xef, 0x0e, 0x10, 0x75, 0xee, 0x9a, 0x2e,
	0xc1, 0xa1, 0x88, 0xdd, 0xd9, 0x16, 0xfe, 0x3e, 0x47, 0xa6, 0x00, 0xd2, 0xb5, 0xe9, 0x13, 0x9f,
	0x08, 0x3b, 0x7b, 0x4a, 0x13, 0x7c, 0x42, 0xfc, 0x00, 0x99, 0x1c, 0x0d, 0x46, 0xa7, 0xa6, 0x13,
	0xca, 0xba, 0xfa, 0x4f, 0x0a, 0x80, 0xdd, 0xde, 0x51, 0x77, 0x8c, 0x42, 0xda, 0x23, 0x14, 0xd9,
	0xc8, 0x25, 0xb1, 0x07, 0x1f, 0x80, 0x55, 0xc4, 0x4c, 0x0d, 0xa5, 0xa5, 0xec, 0xd6, 0xda, 0x9b,
	0x86, 0x38, 0xc1, 0x48, 0x4f, 0x30, 0x1e, 0x87, 0x13, 0xab, 0xfe, 0xeb, 0x2f, 0x7b, 0xd5, 0x34,
	0xd9, 0x16, 0x09, 0x70, 0x13, 0xac, 0x8e, 0x09, 0x45, 0x49, 0xa3, 0xd8, 0x2a, 0xed, 0xaa, 0xb6,
	0x00, 0x70, 0x07, 0x54, 0x1d, 0xd7, 0x45, 0x11, 0x45, 0x5e, 0xa3, 0xd4, 0x52, 0x76, 0xab, 0xf6,
	0x1c, 0xc3, 0x6d, 0x50, 0x75, 0xcf, 0x1c, 0x1c, 0xf6, 0xb1, 0xd7, 0x58, 0x69, 0x29, 0xbb, 0x6b,
	0x76, 0x85, 0xe3, 0x43, 0x4f, 0x1f, 0x81, 0xcd, 0x27, 0x0e, 0x45, 0x09, 0xed, 0xf6, 0x8e, 0xac,
	0x80, 0xb8, 0xe7, 0x9f, 0x22, 0xec, 0x9f, 0x51, 0x78, 0x0b, 0x80, 0x6e, 0xef, 0xa8, 0x7f, 0xc6,
	0x11, 0xef, 0x71, 0xc5, 0x56, 0xbb, 0xbd, 0x23, 0xe9, 0xbe, 0x0d, 0xd6, 0x24, 0x45, 0x32, 0xa2,
	0xc8, 0x23, 0xea, 0xc2, 0x28, 0x83, 0xb2, 0x65, 0x4b, 0xf9, 0xb2, 0x5f, 0x02, 0x76, 0xd8, 0x31,
	0xf6, 0x43, 0x14, 0xb3, 0x81, 0x22, 0xf2, 0x35, 0x8a, 0x65, 0x19, 0x01, 0xa0, 0x06, 0x6a, 0xac,
	0x03, 0xc7, 0xf3, 0x62, 0x94, 0x24, 0xbc, 0x80, 0x6a, 0xb3, 0xa6, 0x1e, 0x0b, 0xcb, 0xb2, 0xe3,
	0x7f, 0x50, 0x40, 0x4d, 0x1c, 0x7e, 0x8c, 0xe8, 0xc9, 0x05, 0xab, 0x10, 0x92, 0xd0, 0x45, 0x69,
	0x05, 0x0e, 0xe0, 0x16, 0x28, 0xe7, 0xba, 0x97, 0x08, 0x7e, 0x02, 0x2a, 0x09, 0x4f, 0x4e, 0x1a,
	0xa5, 0x56, 0x69, 0xb7, 0xd6, 0xbe, 0x69, 0x2c, 0xb4, 0x63, 0xcc, 0xfb, 0xb6, 0xd6, 0x7f, 0xfe,
	0x4b, 0x03, 0x73, 0x98, 0xd8, 0x69, 0xd6, 0x32, 0xbe, 0xff, 0x50, 0x40, 0xc5, 0x72, 0xa8, 0x7b,
	0x76, 0x72, 0xc1, 0x26, 0x1c, 0xb0, 0xc7, 0x7e, 0xb6, 0x37, 0xc0, 0x4d, 0x9f, 0xf1, 0x06, 0x1b,
	0xa0, 0x42, 0xf1, 0x10, 0x91, 0x51, 0xda, 0x61, 0x0a, 0xe1, 0x43, 0x50, 0xa7, 0xb1, 0x13, 0x26,
	0x8e, 0x4b, 0x31, 0x09, 0x5f, 0xd9, 0xe7, 0x31, 0x0a, 0xbd, 0x13, 0xd2, 0xed, 0x1d, 0xd9, 0xb9,
	0x50, 0xf8, 0x2e, 0x58, 0xa7, 0xe4, 0x1c, 0x85, 0x7d, 0x97, 0x84, 0x34, 0x76, 0x5c, 0xca, 0x5b,
	0x54, 0xed, 0x35, 0x6e, 0xed, 0x48, 0x63, 0x86, 0x9c, 0xd5, 0x1c, 0x39, 0xd9, 0xd9, 0xca, 0xf9,
	0xd9, 0xfe, 0x55, 0x80, 0x3a, 0xaf, 0x0a, 0xd7, 0x41, 0x11, 0x7b, 0x72, 0xa8, 0x22, 0xf6, 0xd8,
	0x81, 0x09, 0x0a, 0x3d, 0x14, 0xcb, 0x55, 0x4a, 0xc4, 0xa4, 0xc4, 0xf6, 0x1c, 0x23, 0x17, 0x47,
	0x98, 0x5d, 0x88, 0x12, 0x77, 0xd7, 0x59, 0xe7, 0xa9, 0x0d, 0x7e, 0x04, 0x6a, 0x28, 0x76, 0xdb,
	0xfb, 0x7d, 0xde, 0x24, 0xef, 0xb8, 0xd6, 0xde, 0xca, 0xad, 0xc5, 0xee, 0xb4, 0xf7, 0x4f, 0x98,
	0xd7, 0x5a, 0x79, 0x36, 0xd5, 0x0a, 0x36, 0xe0, 0x09, 0xdc, 0x02, 0x1f, 0x02, 0x55, 0xa4, 0x9f,
	0x22, 0xc4, 0xe7, 0x79, 0x5d, 0x72, 0x95, 0x87, 0x1f, 0x20, 0xb4, 0x6c, 0xde, 0xdf, 0x8a, 0x60,
	0x3d, 0xe5, 0xab, 0xe3, 0x04, 0xc1, 0xc9, 0x05, 0xdc, 0x03, 0x10, 0x87, 0x63, 0x27, 0xc0, 0x9e,
	0xc3, 0xd8, 0xce, 0x6d, 0x76, 0x23, 0xeb, 0x11, 0x0b, 0x7e, 0x31, 0x3c, 0x71, 0x49, 0x84, 0x38,
	0x3f, 0xf5, 0x7c, 0xf8, 0x31, 0x73, 0x30, 0x3d, 0xa4, 0xd7, 0x41, 0x90, 0x94, 0x42, 0xe6, 0x89,
	0x9c, 0x49, 0x40, 0x1c, 0x21, 0xb8, 0xba, 0x9d, 0xc2, 0xac, 0x86, 0x56, 0xf3, 0x1a, 0xba, 0x0f,
	0xca, 0x9c, 0xcd, 0xa4, 0x51, 0xe6, 0xea, 0x59, 0xce, 0x88, 0x8c, 0x85, 0xfb, 0x60, 0xe5, 0x14,
	0xa1, 0xa4, 0x51, 0x79, 0x83, 0x1c, 0x1e, 0x99, 0x51, 0x52, 0xf5, 0x7f, 0x95, 0xa4, 0xe6, 0x99,
	0xfd, 0x4e, 0x01, 0x60, 0x71, 0x1a, 0x7b, 0xb7, 0xcd, 0xc5, 0xaa, 0xf0, 0xc1, 0xe7, 0x18, 0x1e,
	0x80, 0xb2, 0x33, 0x24, 0xa3, 0x50, 0x5c, 0x11, 0xd5, 0x32, 0x58, 0xe5, 0x3f, 0xa7, 0xda, 0x1d,
	0x1f, 0xd3, 0xb3, 0xd1, 0xc0, 0x70, 0xc9, 0x50, 0xbe, 0xc0, 0xe5, 0xcf, 0x5e, 0xe2, 0x9d, 0x9b,
	0x74, 0x12, 0xa1, 0xc4, 0x38, 0x0c, 0xa9, 0x2d, 0xb3, 0x97, 0xbe, 0x4d, 0x8a, 0xe0, 0x56, 0x87,
	0x0c, 0x87, 0xa3, 0x10, 0xd3, 0xc9, 0x53, 0x42, 0x02, 0x76, 0xe7, 0x23, 0x14, 0x7a, 0x4f, 0x63,
	0x12, 0x91, 0xc4, 0x09, 0xd8, 0xfb, 0x85, 0x62, 0x1a, 0x20, 0xd9, 0x9d, 0x00, 0xb0, 0x05, 0x6a,
	0x1e, 0x4a, 0xdc, 0x18, 0x47, 0x6c, 0x85, 0x52, 0xf6, 0x59, 0x13, 0x7c, 0x07, 0xa8, 0x2f, 0xea,
	0x7e, 0x61, 0x80, 0x1f, 0xcc, 0x47, 0x13, 0x7a, 0xdf, 0x36, 0xe4, 0x97, 0x88, 0x7d, 0xb6, 0x0c,
	0xf9, 0xd9, 0x32, 0x3a, 0x04, 0xcf, 0x77, 0x24, 0x67, 0xf9, 0x18, 0x80, 0x41, 0x8c, 0x3d, 0x1f,
	0x65, 0xf4, 0xfe, 0xda, 0x64, 0x55, 0xa4, 0x2c, 0xd7, 0xfc, 0xa3, 0xfa, 0xb7, 0x97, 0x5a, 0xe1,
	0xc7, 0x4b, 0xad, 0xf0, 0xcf, 0xa5, 0x56, 0xd0, 0xbf, 0x29, 0x81, 0xdb, 0x4b, 0x99, 0x39, 0x20,
	0x71, 0xe7, 0xc9, 0x21, 0xbc, 0x93, 0xe3, 0xc7, 0xba, 0x31, 0x9b, 0x6a, 0xf5, 0x89, 0x33, 0x0c,
	0x1e, 0xe9, 0xdc, 0xac, 0xa7, 0x8c, 0x3d, 0x78, 0x05, 0x63, 0xd6, 0xd6, 0x6c, 0xaa, 0x41, 0x11,
	0x9d, 0x71, 0xea, 0x79, 0x26, 0xdb, 0x2f, 0x31, 0x69, 0x6d, 0xce, 0xa6, 0xda, 0x0d, 0x91, 0x37,
	0x77, 0xe9, 0x59, 0x7e, 0xdf, 0xcb, 0xf1, 0xab, 0x5a, 0x1b, 0xb3, 0xa9, 0xb6, 0x26, 0x12, 0x84,
	0x5d, 0x9f, 0x33, 0x7a, 0xff, 0x25, 0x46, 0x55, 0xeb, 0xe6, 0x6c, 0xaa, 0x6d, 0x88, 0xf0, 0x85,
	0x4f, 0xcf, 0xf2, 0xf8, 0x3e, 0xa8, 0x78, 0x28, 0x22, 0x09, 0xa6, 0x9c, 0x46, 0xd5, 0x82, 0xb3,
	0xa9, 0xb6, 0x9e, 0x8e, 0xc2, 0x1d, 0xba, 0x9d, 0x86, 0x40, 0x23, 0xc3, 0x7a, 0x85, 0xb1, 0x6e,
	0xbd, 0x3d, 0x9b, 0x6a, 0x6f, 0x89, 0xf0, 0xd4, 0xa3, 0x2f, 0x56, 0x51, 0x95, 0xab, 0x50, 0xac,
	0xcf, 0x9f, 0x5d, 0x35, 0x95, 0xe7, 0x57, 0x4d, 0xe5, 0xef, 0xab, 0xa6, 0xf2, 0xfd, 0x75, 0xb3,
	0xf0, 0xfc, 0xba, 0x59, 0xf8, 0xfd, 0xba, 0x59, 0xf8, 0xe2, 0xc3, 0xcc, 0x2d, 0x88, 0x90, 0xef,
	0x4f, 0xbe, 0x1a, 0xa7, 0x7f, 0x8b, 0xf6, 0x44, 0x9f, 0xe6, 0x90, 0x78, 0xa3, 0x00, 0x99, 0xe3,
	0x7b, 0xe6, 0x45, 0xea, 0x12, 0xd7, 0x63, 0x50, 0xe6, 0xff, 0x45, 0xee, 0xfd, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0xfb, 0xf8, 0x33, 0x54, 0x09, 0x00, 0x00,
}

func (m *EVMEventVoteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMEventVoteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMEventVoteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if m.Accepted {
		i--
		if m.Accepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Votes[iNdEx])
			copy(dAtA[i:], m.Votes[iNdEx])
			i = encodeVarintGravity(dAtA, i, uint64(len(m.Votes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGravity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LatestEVMBlockHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestEVMBlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatestEVMBlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.CosmosHeight != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.CosmosHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EVMHeight != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.EVMHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EVMSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EVMAddress) > 0 {
		i -= len(m.EVMAddress)
		copy(dAtA[i:], m.EVMAddress)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.EVMAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Power != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignerSetTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignerSetTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignerSetTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Nonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x30
	}
	if m.Height != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendToEVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendToEVM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendToEVM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Erc20Fee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Erc20Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.EVMRecipient) > 0 {
		i -= len(m.EVMRecipient)
		copy(dAtA[i:], m.EVMRecipient)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.EVMRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractCallTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractCallTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractCallTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x48
	}
	if m.Height != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGravity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvalidationScope) > 0 {
		i -= len(m.InvalidationScope)
		copy(dAtA[i:], m.InvalidationScope)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.InvalidationScope)))
		i--
		dAtA[i] = 0x12
	}
	if m.InvalidationNonce != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.InvalidationNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ERC20Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityPoolEVMSpendProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolEVMSpendProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolEVMSpendProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGravity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommunityPoolEVMSpendProposalForCLI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommunityPoolEVMSpendProposalForCLI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommunityPoolEVMSpendProposalForCLI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintGravity(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BridgeFee) > 0 {
		i -= len(m.BridgeFee)
		copy(dAtA[i:], m.BridgeFee)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.BridgeFee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGravity(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGravity(dAtA []byte, offset int, v uint64) int {
	offset -= sovGravity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EVMEventVoteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovGravity(uint64(l))
	}
	if len(m.Votes) > 0 {
		for _, s := range m.Votes {
			l = len(s)
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if m.Accepted {
		n += 2
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *LatestEVMBlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EVMHeight != 0 {
		n += 1 + sovGravity(uint64(m.EVMHeight))
	}
	if m.CosmosHeight != 0 {
		n += 1 + sovGravity(uint64(m.CosmosHeight))
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *EVMSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovGravity(uint64(m.Power))
	}
	l = len(m.EVMAddress)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *SignerSetTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovGravity(uint64(m.Nonce))
	}
	if m.Height != 0 {
		n += 1 + sovGravity(uint64(m.Height))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *BatchTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovGravity(uint64(m.BatchNonce))
	}
	if m.Timeout != 0 {
		n += 1 + sovGravity(uint64(m.Timeout))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGravity(uint64(m.Height))
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *SendToEVM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGravity(uint64(m.Id))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.EVMRecipient)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = m.Erc20Token.Size()
	n += 1 + l + sovGravity(uint64(l))
	l = m.Erc20Fee.Size()
	n += 1 + l + sovGravity(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *ContractCallTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvalidationNonce != 0 {
		n += 1 + sovGravity(uint64(m.InvalidationNonce))
	}
	l = len(m.InvalidationScope)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovGravity(uint64(m.Timeout))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovGravity(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovGravity(uint64(m.Height))
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *ERC20Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGravity(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *CommunityPoolEVMSpendProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGravity(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovGravity(uint64(l))
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func (m *CommunityPoolEVMSpendProposalForCLI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.BridgeFee)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovGravity(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovGravity(uint64(m.ChainId))
	}
	return n
}

func sovGravity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGravity(x uint64) (n int) {
	return sovGravity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EVMEventVoteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMEventVoteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMEventVoteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &types.Any{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accepted = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestEVMBlockHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestEVMBlockHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestEVMBlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMHeight", wireType)
			}
			m.EVMHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EVMHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosHeight", wireType)
			}
			m.CosmosHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignerSetTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignerSetTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignerSetTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, &EVMSigner{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &SendToEVM{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendToEVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendToEVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendToEVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractCallTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractCallTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractCallTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationNonce", wireType)
			}
			m.InvalidationNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvalidationNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidationScope", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidationScope = append(m.InvalidationScope[:0], dAtA[iNdEx:postIndex]...)
			if m.InvalidationScope == nil {
				m.InvalidationScope = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, ERC20Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, ERC20Token{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolEVMSpendProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolEVMSpendProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolEVMSpendProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommunityPoolEVMSpendProposalForCLI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommunityPoolEVMSpendProposalForCLI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommunityPoolEVMSpendProposalForCLI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGravity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGravity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGravity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGravity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGravity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGravity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGravity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGravity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGravity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGravity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGravity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGravity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGravity = fmt.Errorf("proto: unexpected end of group")
)
