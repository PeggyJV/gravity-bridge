syntax = "proto3";
package gravity.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "gravity/v1/genesis.proto";
import "gravity/v1/gravity.proto";
import "gravity/v1/msgs.proto";

option go_package = "github.com/peggyjv/gravity-bridge/module/v4/x/gravity/types";
option (gogoproto.messagename_all) = true;

// Query defines the gRPC querier service
service Query {

  // Module parameters query
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/gravity/v1/params";
  }

  // get info on individual outgoing data
  rpc SignerSetTx(SignerSetTxRequest) returns (SignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1/signer_set_txs/{signer_set_nonce}";
  }
  rpc LatestSignerSetTx(LatestSignerSetTxRequest) returns (SignerSetTxResponse) {
    option (google.api.http).get = "/gravity/v1/signer_set_txs/latest";
  }
  rpc BatchTx(BatchTxRequest) returns (BatchTxResponse) {
    option (google.api.http).get = "/gravity/v1/batch_txs/{token_contract}/{batch_nonce}"; 
  }
  rpc ContractCallTx(ContractCallTxRequest) returns (ContractCallTxResponse) {
    option (google.api.http).get = "/gravity/v1/contract_call_txs/{invalidation_scope}/{invalidation_nonce}";
    }

  // get collections of outgoing traffic from the bridge
  rpc SignerSetTxs(SignerSetTxsRequest) returns (SignerSetTxsResponse) {
    option (google.api.http).get = "/gravity/v1/signer_set_txs";
      }
  rpc BatchTxs(BatchTxsRequest) returns (BatchTxsResponse) {}
  rpc ContractCallTxs(ContractCallTxsRequest)
      returns (ContractCallTxsResponse) {}

  // ethereum signature queries so validators can construct valid etherum
  // transactions

  // TODO: can/should we group these into one endpoint?
  rpc SignerSetTxConfirmations(SignerSetTxConfirmationsRequest)
      returns (SignerSetTxConfirmationsResponse) {}
  rpc BatchTxConfirmations(BatchTxConfirmationsRequest)
      returns (BatchTxConfirmationsResponse) {}
  rpc ContractCallTxConfirmations(ContractCallTxConfirmationsRequest)
      returns (ContractCallTxConfirmationsResponse) {}

  // ^^^^^^^^^^^^ seem okay for now ^^^^^^

  // pending ethereum signature queries for orchestrators to figure out which
  // signatures they are missing
  // TODO: can/should we group this into one endpoint?
  rpc UnsignedSignerSetTxs(UnsignedSignerSetTxsRequest)
      returns (UnsignedSignerSetTxsResponse) {}
  rpc UnsignedBatchTxs(UnsignedBatchTxsRequest)
      returns (UnsignedBatchTxsResponse) {}
  rpc UnsignedContractCallTxs(UnsignedContractCallTxsRequest)
      returns (UnsignedContractCallTxsResponse) {}

  rpc LastSubmittedEthereumEvent(LastSubmittedEthereumEventRequest)
      returns (LastSubmittedEthereumEventResponse) {}

  // Queries the fees for all pending batches, results are returned in sdk.Coin
  // (fee_amount_int)(contract_address) style
  rpc BatchTxFees(BatchTxFeesRequest) returns (BatchTxFeesResponse) {}

  // Query for info about denoms tracked by gravity
  rpc ERC20ToDenom(ERC20ToDenomRequest) returns (ERC20ToDenomResponse) {}

  // DenomToERC20Params implements a query that allows ERC-20 parameter
  // information to be retrieved by a Cosmos base denomination.
  rpc DenomToERC20Params(DenomToERC20ParamsRequest)
      returns (DenomToERC20ParamsResponse) {}

  // Query for info about denoms tracked by gravity
  rpc DenomToERC20(DenomToERC20Request) returns (DenomToERC20Response) {}
  // Query for batch send to ethereums
  rpc BatchedSendToEthereums(BatchedSendToEthereumsRequest)
      returns (BatchedSendToEthereumsResponse) {}
  // Query for unbatched send to ethereums
  rpc UnbatchedSendToEthereums(UnbatchedSendToEthereumsRequest)
      returns (UnbatchedSendToEthereumsResponse) {}

  // delegate keys
  rpc DelegateKeysByValidator(DelegateKeysByValidatorRequest)
      returns (DelegateKeysByValidatorResponse) {}
  rpc DelegateKeysByEthereumSigner(DelegateKeysByEthereumSignerRequest)
      returns (DelegateKeysByEthereumSignerResponse) {}
  rpc DelegateKeysByOrchestrator(DelegateKeysByOrchestratorRequest)
      returns (DelegateKeysByOrchestratorResponse) {}

  rpc DelegateKeys(DelegateKeysRequest) returns (DelegateKeysResponse) {}

  rpc LastObservedEthereumHeight(LastObservedEthereumHeightRequest)
      returns (LastObservedEthereumHeightResponse) {}

  rpc CompletedSignerSetTxs(CompletedSignerSetTxsRequest)
      returns (CompletedSignerSetTxsResponse) {}

  rpc CompletedBatchTxs(CompletedBatchTxsRequest)
      returns (CompletedBatchTxsResponse) {}

  rpc CompletedContractCallTxs(CompletedContractCallTxsRequest)
      returns (CompletedContractCallTxsResponse) {}

  rpc BatchTxConfirmationsByValidator(BatchTxConfirmationsByValidatorRequest)
      returns (BatchTxConfirmationsByValidatorResponse) {}

  rpc ContractCallTxConfirmationsByValidator(
      ContractCallTxConfirmationsByValidatorRequest)
      returns (ContractCallTxConfirmationsByValidatorResponse) {}

  rpc SignerSetTxConfirmationsByValidator(
      SignerSetTxConfirmationsByValidatorRequest)
      returns (SignerSetTxConfirmationsByValidatorResponse) {}

  rpc EthereumEventVoteRecords(EthereumEventVoteRecordsRequest)
      returns (EthereumEventVoteRecordsResponse) {}

  rpc EthereumEventVotes(EthereumEventVotesRequest)
      returns (EthereumEventVotesResponse) {}
}

//  rpc Params
message ParamsRequest {}
message ParamsResponse { Params params = 1 [ (gogoproto.nullable) = false ]; }

//  rpc SignerSetTx
message SignerSetTxRequest { uint64 signer_set_nonce = 1; }
message LatestSignerSetTxRequest {}
message SignerSetTxResponse { SignerSetTx signer_set = 1; }

//  rpc BatchTx
message BatchTxRequest {
  string token_contract = 1;
  uint64 batch_nonce = 2;
}
message BatchTxResponse { BatchTx batch = 1; }

//  rpc ContractCallTx
message ContractCallTxRequest {
  bytes invalidation_scope = 1;
  uint64 invalidation_nonce = 2;
}
message ContractCallTxResponse { ContractCallTx logic_call = 1; }

// rpc SignerSetTxConfirmations
message SignerSetTxConfirmationsRequest { uint64 signer_set_nonce = 1; }
message SignerSetTxConfirmationsResponse {
  repeated SignerSetTxConfirmation signatures = 1;
}

//  rpc SignerSetTxs
message SignerSetTxsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message SignerSetTxsResponse {
  repeated SignerSetTx signer_sets = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

//  rpc BatchTxs
message BatchTxsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message BatchTxsResponse {
  repeated BatchTx batches = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

//  rpc ContractCallTxs
message ContractCallTxsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message ContractCallTxsResponse {
  repeated ContractCallTx calls = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// NOTE(levi) pending queries: this is my address; what do I need to sign??
// why orchestrator key? hot, signing thing all the time so validator key can be
// safer

// rpc UnsignedSignerSetTxs
message UnsignedSignerSetTxsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the
  // orchestrator address or the corresponding validator address
  string address = 1;
}
message UnsignedSignerSetTxsResponse { repeated SignerSetTx signer_sets = 1; }

message UnsignedBatchTxsRequest {
  // NOTE: this is an sdk.AccAddress and can represent either the
  // orchestrator address or the corresponding validator address
  string address = 1;
}
message UnsignedBatchTxsResponse {
  // Note these are returned with the signature empty
  repeated BatchTx batches = 1;
}

//  rpc UnsignedContractCallTxs
message UnsignedContractCallTxsRequest { string address = 1; }
message UnsignedContractCallTxsResponse { repeated ContractCallTx calls = 1; }

message BatchTxFeesRequest {}
message BatchTxFeesResponse {
  repeated cosmos.base.v1beta1.Coin fees = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message ContractCallTxConfirmationsRequest {
  bytes invalidation_scope = 1;
  uint64 invalidation_nonce = 2;
}
message ContractCallTxConfirmationsResponse {
  repeated ContractCallTxConfirmation signatures = 1;
}

message BatchTxConfirmationsRequest {
  uint64 batch_nonce = 1;
  string token_contract = 2;
}
message BatchTxConfirmationsResponse {
  repeated BatchTxConfirmation signatures = 1;
}

message LastSubmittedEthereumEventRequest { string address = 1; }
message LastSubmittedEthereumEventResponse { uint64 event_nonce = 1; }

message ERC20ToDenomRequest { string erc20 = 1; }
message ERC20ToDenomResponse {
  string denom = 1;
  bool cosmos_originated = 2;
}

message DenomToERC20ParamsRequest { string denom = 1; }
message DenomToERC20ParamsResponse {
  string base_denom = 1;
  string erc20_name = 2;
  string erc20_symbol = 3;
  uint64 erc20_decimals = 4;
}

message DenomToERC20Request { string denom = 1; }
message DenomToERC20Response {
  string erc20 = 1;
  bool cosmos_originated = 2;
}

message DelegateKeysByValidatorRequest { string validator_address = 1; }
message DelegateKeysByValidatorResponse {
  string eth_address = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByEthereumSignerRequest { string ethereum_signer = 1; }
message DelegateKeysByEthereumSignerResponse {
  string validator_address = 1;
  string orchestrator_address = 2;
}

message DelegateKeysByOrchestratorRequest { string orchestrator_address = 1; }
message DelegateKeysByOrchestratorResponse {
  string validator_address = 1;
  string ethereum_signer = 2;
}

message DelegateKeysRequest {}
message DelegateKeysResponse { repeated MsgDelegateKeys delegate_keys = 1; }

// NOTE: if there is no sender address, return all
message BatchedSendToEthereumsRequest {
  string sender_address = 1;
  // todo: figure out how to paginate given n Batches with m Send To Ethereums
  //  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message BatchedSendToEthereumsResponse {
  repeated SendToEthereum send_to_ethereums = 1;
  //  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message UnbatchedSendToEthereumsRequest {
  string sender_address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message UnbatchedSendToEthereumsResponse {
  repeated SendToEthereum send_to_ethereums = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message LastObservedEthereumHeightRequest {}
message LastObservedEthereumHeightResponse {
  LatestEthereumBlockHeight last_observed_ethereum_height = 1;
}

message CompletedBatchTxsRequest {}
message CompletedBatchTxsResponse { repeated BatchTx completed_batch_txs = 1; }

message CompletedContractCallTxsRequest {}
message CompletedContractCallTxsResponse {
  repeated ContractCallTx completed_contract_call_txs = 1;
}

message CompletedSignerSetTxsRequest {}
message CompletedSignerSetTxsResponse {
  repeated SignerSetTx completed_signer_set_txs = 1;
}

message BatchTxConfirmationsByValidatorRequest { string validator_address = 1; }

message BatchTxConfirmationsByValidatorResponse {
  repeated BatchTxConfirmation batch_tx_confirmations = 1;
}

message ContractCallTxConfirmationsByValidatorRequest {
  string validator_address = 1;
}

message ContractCallTxConfirmationsByValidatorResponse {
  repeated ContractCallTxConfirmation contract_call_tx_confirmations = 2;
}

message SignerSetTxConfirmationsByValidatorRequest {
  string validator_address = 1;
}

message SignerSetTxConfirmationsByValidatorResponse {
  repeated SignerSetTxConfirmation signer_set_tx_confirmations = 3;
}

message EthereumEventVoteRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message EthereumEventVoteRecordsResponse {
  repeated EthereumEventVoteRecord records = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message EthereumEventVotesRequest { string validator_address = 1; }

message EthereumEventVotesResponse {
  repeated google.protobuf.Any events = 1
      [ (cosmos_proto.accepts_interface) = "gravity.v1.EthereumEvent" ];
}
